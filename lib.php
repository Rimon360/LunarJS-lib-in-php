<?php
class ExactDate {
    private static function _(DateTime $date, int $y, int $m, int $d): DateTime {
        if ($y < 100) {
            $date->setDate($y, $m, $d);
        }
        $date->setTime($date->format('H'), $date->format('i'), $date->format('s'), 0);
        return $date;
    }

    public static function fromYmd(int $y, int $m, int $d): DateTime {
        return self::fromYmdHms($y, $m, $d, 0, 0, 0);
    }

    public static function fromYmdHms(int $y, int $m, int $d, int $hour, int $minute, int $second): DateTime {
        $date = new DateTime("$y-$m-$d $hour:$minute:$second");
        return self::_($date, $y, $m, $d);
    }

    public static function getDaysBetweenYmd(int $ay, int $am, int $ad, int $by, int $bm, int $bd): int {
        if ($ay == $by) {
            $n = SolarUtil::getDaysInYear($by, $bm, $bd) - SolarUtil::getDaysInYear($ay, $am, $ad);
        } elseif ($ay > $by) {
            $days = SolarUtil::getDaysOfYear($by) - SolarUtil::getDaysInYear($by, $bm, $bd);
            for ($i = $by + 1; $i < $ay; $i++) {
                $days += SolarUtil::getDaysOfYear($i);
            }
            $days += SolarUtil::getDaysInYear($ay, $am, $ad);
            $n = -$days;
        } else {
            $days = SolarUtil::getDaysOfYear($ay) - SolarUtil::getDaysInYear($ay, $am, $ad);
            for ($i = $ay + 1; $i < $by; $i++) {
                $days += SolarUtil::getDaysOfYear($i);
            }
            $days += SolarUtil::getDaysInYear($by, $bm, $bd);
            $n = $days;
        }
        return $n;
    }

    public static function getDaysBetween(DateTime $date0, DateTime $date1): int {
        return self::getDaysBetweenYmd(
            (int)$date0->format('Y'), (int)$date0->format('n'), (int)$date0->format('j'),
            (int)$date1->format('Y'), (int)$date1->format('n'), (int)$date1->format('j')
        );
    }
}
class SolarUtil
{
    static $DAYS_OF_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    static $WEEK = ['æ—¥', 'ä¸€', 'äºŒ', 'ä¸‰', 'å››', 'äº”', 'å…­'];
    static $XINGZUO = ['ç™½ç¾Š', 'é‡‘ç‰›', 'åŒå­', 'å·¨èŸ¹', 'ç‹®å­', 'å¤„å¥³', 'å¤©ç§¤', 'å¤©èŽ', 'å°„æ‰‹', 'æ‘©ç¾¯', 'æ°´ç“¶', 'åŒé±¼'];
    static $FESTIVAL = ['1-1' => 'å…ƒæ—¦èŠ‚', '2-14' => 'æƒ…äººèŠ‚', '3-8' => 'å¦‡å¥³èŠ‚', '3-12' => 'æ¤æ ‘èŠ‚', '3-15' => 'æ¶ˆè´¹è€…æƒç›Šæ—¥', '4-1' => 'æ„šäººèŠ‚', '5-1' => 'åŠ³åŠ¨èŠ‚', '5-4' => 'é’å¹´èŠ‚', '6-1' => 'å„¿ç«¥èŠ‚', '7-1' => 'å»ºå…šèŠ‚', '8-1' => 'å»ºå†›èŠ‚', '9-10' => 'æ•™å¸ˆèŠ‚', '10-1' => 'å›½åº†èŠ‚', '10-31' => 'ä¸‡åœ£èŠ‚å‰å¤œ', '11-1' => 'ä¸‡åœ£èŠ‚', '12-24' => 'å¹³å®‰å¤œ', '12-25' => 'åœ£è¯žèŠ‚'];
    static $OTHER_FESTIVAL = ['1-8' => ['å‘¨æ©æ¥é€ä¸–çºªå¿µæ—¥'], '1-10' => ['ä¸­å›½äººæ°‘è­¦å¯ŸèŠ‚', 'ä¸­å›½å…¬å®‰110å®£ä¼ æ—¥'], '1-21' => ['åˆ—å®é€ä¸–çºªå¿µæ—¥'], '1-26' => ['å›½é™…æµ·å…³æ—¥'], '2-2' => ['ä¸–ç•Œæ¹¿åœ°æ—¥'], '2-4' => ['ä¸–ç•ŒæŠ—ç™Œæ—¥'], '2-7' => ['äº¬æ±‰é“è·¯ç½¢å·¥çºªå¿µ'], '2-10' => ['å›½é™…æ°”è±¡èŠ‚'], '2-19' => ['é‚“å°å¹³é€ä¸–çºªå¿µæ—¥'], '2-21' => ['å›½é™…æ¯è¯­æ—¥'], '2-24' => ['ç¬¬ä¸‰ä¸–ç•Œé’å¹´æ—¥'], '3-1' => ['å›½é™…æµ·è±¹æ—¥'], '3-3' => ['å…¨å›½çˆ±è€³æ—¥'], '3-5' => ['å‘¨æ©æ¥è¯žè¾°çºªå¿µæ—¥', 'ä¸­å›½é’å¹´å¿—æ„¿è€…æœåŠ¡æ—¥'], '3-6' => ['ä¸–ç•Œé’å…‰çœ¼æ—¥'], '3-12' => ['å­™ä¸­å±±é€ä¸–çºªå¿µæ—¥'], '3-14' => ['é©¬å…‹æ€é€ä¸–çºªå¿µæ—¥'], '3-17' => ['å›½é™…èˆªæµ·æ—¥'], '3-18' => ['å…¨å›½ç§‘æŠ€äººæ‰æ´»åŠ¨æ—¥'], '3-21' => ['ä¸–ç•Œæ£®æž—æ—¥', 'ä¸–ç•Œç¡çœ æ—¥'], '3-22' => ['ä¸–ç•Œæ°´æ—¥'], '3-23' => ['ä¸–ç•Œæ°”è±¡æ—¥'], '3-24' => ['ä¸–ç•Œé˜²æ²»ç»“æ ¸ç—…æ—¥'], '4-2' => ['å›½é™…å„¿ç«¥å›¾ä¹¦æ—¥'], '4-7' => ['ä¸–ç•Œå«ç”Ÿæ—¥'], '4-22' => ['åˆ—å®è¯žè¾°çºªå¿µæ—¥'], '4-23' => ['ä¸–ç•Œå›¾ä¹¦å’Œç‰ˆæƒæ—¥'], '4-26' => ['ä¸–ç•ŒçŸ¥è¯†äº§æƒæ—¥'], '5-3' => ['ä¸–ç•Œæ–°é—»è‡ªç”±æ—¥'], '5-5' => ['é©¬å…‹æ€è¯žè¾°çºªå¿µæ—¥'], '5-8' => ['ä¸–ç•Œçº¢åå­—æ—¥'], '5-11' => ['ä¸–ç•Œè‚¥èƒ–æ—¥'], '5-25' => ['525å¿ƒç†å¥åº·èŠ‚'], '5-27' => ['ä¸Šæµ·è§£æ”¾æ—¥'], '5-31' => ['ä¸–ç•Œæ— çƒŸæ—¥'], '6-5' => ['ä¸–ç•ŒçŽ¯å¢ƒæ—¥'], '6-6' => ['å…¨å›½çˆ±çœ¼æ—¥'], '6-8' => ['ä¸–ç•Œæµ·æ´‹æ—¥'], '6-11' => ['ä¸­å›½äººå£æ—¥'], '6-14' => ['ä¸–ç•ŒçŒ®è¡€æ—¥'], '7-1' => ['é¦™æ¸¯å›žå½’çºªå¿µæ—¥'], '7-7' => ['ä¸­å›½äººæ°‘æŠ—æ—¥æˆ˜äº‰çºªå¿µæ—¥'], '7-11' => ['ä¸–ç•Œäººå£æ—¥'], '8-5' => ['æ©æ ¼æ–¯é€ä¸–çºªå¿µæ—¥'], '8-6' => ['å›½é™…ç”µå½±èŠ‚'], '8-12' => ['å›½é™…é’å¹´æ—¥'], '8-22' => ['é‚“å°å¹³è¯žè¾°çºªå¿µæ—¥'], '9-3' => ['ä¸­å›½æŠ—æ—¥æˆ˜äº‰èƒœåˆ©çºªå¿µæ—¥'], '9-8' => ['ä¸–ç•Œæ‰«ç›²æ—¥'], '9-9' => ['æ¯›æ³½ä¸œé€ä¸–çºªå¿µæ—¥'], '9-14' => ['ä¸–ç•Œæ¸…æ´åœ°çƒæ—¥'], '9-18' => ['ä¹ä¸€å…«äº‹å˜çºªå¿µæ—¥'], '9-20' => ['å…¨å›½çˆ±ç‰™æ—¥'], '9-21' => ['å›½é™…å’Œå¹³æ—¥'], '9-27' => ['ä¸–ç•Œæ—…æ¸¸æ—¥'], '10-4' => ['ä¸–ç•ŒåŠ¨ç‰©æ—¥'], '10-10' => ['è¾›äº¥é©å‘½çºªå¿µæ—¥'], '10-13' => ['ä¸­å›½å°‘å¹´å…ˆé”‹é˜Ÿè¯žè¾°æ—¥'], '10-25' => ['æŠ—ç¾Žæ´æœçºªå¿µæ—¥'], '11-12' => ['å­™ä¸­å±±è¯žè¾°çºªå¿µæ—¥'], '11-17' => ['å›½é™…å¤§å­¦ç”ŸèŠ‚'], '11-28' => ['æ©æ ¼æ–¯è¯žè¾°çºªå¿µæ—¥'], '12-1' => ['ä¸–ç•Œè‰¾æ»‹ç—…æ—¥'], '12-12' => ['è¥¿å®‰äº‹å˜çºªå¿µæ—¥'], '12-13' => ['å›½å®¶å…¬ç¥­æ—¥'], '12-26' => ['æ¯›æ³½ä¸œè¯žè¾°çºªå¿µæ—¥']];
    static $WEEK_FESTIVAL = ['3-0-1' => 'å…¨å›½ä¸­å°å­¦ç”Ÿå®‰å…¨æ•™è‚²æ—¥', '5-2-0' => 'æ¯äº²èŠ‚', '6-3-0' => 'çˆ¶äº²èŠ‚', '11-4-4' => 'æ„Ÿæ©èŠ‚'];
    public static function isLeapYear($year)
    {
        return ($year % 4 === 0 && $year % 100 !== 0) || ($year % 400 === 0);
    }

    public static function getDaysOfMonth($year, $month)
    {
        $m = $month - 1;
        $d = self::$DAYS_OF_MONTH[$m];
        if ($m === 1 && self::isLeapYear($year)) {
            $d++;
        }
        return $d;
    }

    public static function getDaysOfYear($year)
    {
        return self::isLeapYear($year) ? 366 : 365;
    }

    public static function getDaysInYear($year, $month, $day)
    {
        $days = 0;
        for ($i = 1; $i < $month; $i++) {
            $days += self::getDaysOfMonth($year, $i);
        }
        $days += $day;
        if (1582 === $year && 10 === $month && $day >= 15) {
            $days -= 10;
        }
        return $days;
    }

    public static function getWeeksOfMonth($year, $month, $start)
    {
        $days = self::getDaysOfMonth($year, $month);
        $firstDate = new DateTime("$year-$month-01");
        $firstDayWeek = (int)$firstDate->format('w');
        return ceil(($days + $firstDayWeek - $start) / 7);
    }
}
class ShouXingUtil

{
    // Constants and other class properties should be defined here
    static $PI_2= 2*M_PI;
    static $ONE_THIRD= 1.0/3;
    static $SECOND_PER_DAY= 86400;
    static $SECOND_PER_RAD= 648000 / M_PI;
    static $NUT_B=[2.1824, -33.75705, 36e-6, -1720, 920, 3.5069, 1256.66393, 11e-6, -132, 57, 1.3375, 16799.4182, -51e-6, -23, 10, 4.3649, -67.5141, 72e-6, 21, -9, 0.04, -628.302, 0, -14, 0, 2.36, 8328.691, 0, 7, 0, 3.46, 1884.966, 0, -5, 2, 5.44, 16833.175, 0, -4, 2, 3.69, 25128.110, 0, -3, 0, 3.55, 628.362, 0, 2, 0];
    static $DT_AT=[-4000, 108371.7, -13036.80, 392.000, 0.0000, -500, 17201.0, -627.82, 16.170, -0.3413, -150, 12200.6, -346.41, 5.403, -0.1593, 150, 9113.8, -328.13, -1.647, 0.0377, 500, 5707.5, -391.41, 0.915, 0.3145, 900, 2203.4, -283.45, 13.034, -0.1778, 1300, 490.1, -57.35, 2.085, -0.0072, 1600, 120.0, -9.81, -1.532, 0.1403, 1700, 10.2, -0.91, 0.510, -0.0370, 1800, 13.4, -0.72, 0.202, -0.0193, 1830, 7.8, -1.81, 0.416, -0.0247, 1860, 8.3, -0.13, -0.406, 0.0292, 1880, -5.4, 0.32, -0.183, 0.0173, 1900, -2.3, 2.06, 0.169, -0.0135, 1920, 21.2, 1.69, -0.304, 0.0167, 1940, 24.2, 1.22, -0.064, 0.0031, 1960, 33.2, 0.51, 0.231, -0.0109, 1980, 51.0, 1.29, -0.026, 0.0032, 2000, 63.87, 0.1, 0, 0, 2005, 64.7, 0.4, 0, 0, 2015, 69];
    static $XL0=[10000000000, 20, 578, 920, 1100, 1124, 1136, 1148, 1217, 1226, 1229, 1229, 1229, 1229, 1937, 2363, 2618, 2633, 2660, 2666, 17534704567, 0.00000000000, 0.00000000000, 334165646, 4.669256804, 6283.075849991, 3489428, 4.6261024, 12566.1517000, 349706, 2.744118, 5753.384885, 341757, 2.828866, 3.523118, 313590, 3.627670, 77713.771468, 267622, 4.418084, 7860.419392, 234269, 6.135162, 3930.209696, 132429, 0.742464, 11506.769770, 127317, 2.037097, 529.690965, 119917, 1.109629, 1577.343542, 99025, 5.23268, 5884.92685, 90186, 2.04505, 26.29832, 85722, 3.50849, 398.14900, 77979, 1.17883, 5223.69392, 75314, 2.53339, 5507.55324, 50526, 4.58293, 18849.22755, 49238, 4.20507, 775.52261, 35666, 2.91954, 0.06731, 31709, 5.84902, 11790.62909, 28413, 1.89869, 796.29801, 27104, 0.31489, 10977.07880, 24281, 0.34481, 5486.77784, 20616, 4.80647, 2544.31442, 20539, 1.86948, 5573.14280, 20226, 2.45768, 6069.77675, 15552, 0.83306, 213.29910, 13221, 3.41118, 2942.46342, 12618, 1.08303, 20.77540, 11513, 0.64545, 0.98032, 10285, 0.63600, 4694.00295, 10190, 0.97569, 15720.83878, 10172, 4.26680, 7.11355, 9921, 6.2099, 2146.1654, 9761, 0.6810, 155.4204, 8580, 5.9832, 161000.6857, 8513, 1.2987, 6275.9623, 8471, 3.6708, 71430.6956, 7964, 1.8079, 17260.1547, 7876, 3.0370, 12036.4607, 7465, 1.7551, 5088.6288, 7387, 3.5032, 3154.6871, 7355, 4.6793, 801.8209, 6963, 0.8330, 9437.7629, 6245, 3.9776, 8827.3903, 6115, 1.8184, 7084.8968, 5696, 2.7843, 6286.5990, 5612, 4.3869, 14143.4952, 5558, 3.4701, 6279.5527, 5199, 0.1891, 12139.5535, 5161, 1.3328, 1748.0164, 5115, 0.2831, 5856.4777, 4900, 0.4874, 1194.4470, 4104, 5.3682, 8429.2413, 4094, 2.3985, 19651.0485, 3920, 6.1683, 10447.3878, 3677, 6.0413, 10213.2855, 3660, 2.5696, 1059.3819, 3595, 1.7088, 2352.8662, 3557, 1.7760, 6812.7668, 3329, 0.5931, 17789.8456, 3041, 0.4429, 83996.8473, 3005, 2.7398, 1349.8674, 2535, 3.1647, 4690.4798, 2474, 0.2148, 3.5904, 2366, 0.4847, 8031.0923, 2357, 2.0653, 3340.6124, 2282, 5.2220, 4705.7323, 2189, 5.5559, 553.5694, 2142, 1.4256, 16730.4637, 2109, 4.1483, 951.7184, 2030, 0.3713, 283.8593, 1992, 5.2221, 12168.0027, 1986, 5.7747, 6309.3742, 1912, 3.8222, 23581.2582, 1889, 5.3863, 149854.4001, 1790, 2.2149, 13367.9726, 1748, 4.5605, 135.0651, 1622, 5.9884, 11769.8537, 1508, 4.1957, 6256.7775, 1442, 4.1932, 242.7286, 1435, 3.7236, 38.0277, 1397, 4.4014, 6681.2249, 1362, 1.8893, 7632.9433, 1250, 1.1305, 5.5229, 1205, 2.6223, 955.5997, 1200, 1.0035, 632.7837, 1129, 0.1774, 4164.3120, 1083, 0.3273, 103.0928, 1052, 0.9387, 11926.2544, 1050, 5.3591, 1592.5960, 1033, 6.1998, 6438.4962, 1001, 6.0291, 5746.2713, 980, 0.999, 11371.705, 980, 5.244, 27511.468, 938, 2.624, 5760.498, 923, 0.483, 522.577, 922, 4.571, 4292.331, 905, 5.337, 6386.169, 862, 4.165, 7058.598, 841, 3.299, 7234.794, 836, 4.539, 25132.303, 813, 6.112, 4732.031, 812, 6.271, 426.598, 801, 5.821, 28.449, 787, 0.996, 5643.179, 776, 2.957, 23013.540, 769, 3.121, 7238.676, 758, 3.974, 11499.656, 735, 4.386, 316.392, 731, 0.607, 11513.883, 719, 3.998, 74.782, 706, 0.323, 263.084, 676, 5.911, 90955.552, 663, 3.665, 17298.182, 653, 5.791, 18073.705, 630, 4.717, 6836.645, 615, 1.458, 233141.314, 612, 1.075, 19804.827, 596, 3.321, 6283.009, 596, 2.876, 6283.143, 555, 2.452, 12352.853, 541, 5.392, 419.485, 531, 0.382, 31441.678, 519, 4.065, 6208.294, 513, 2.361, 10973.556, 494, 5.737, 9917.697, 450, 3.272, 11015.106, 449, 3.653, 206.186, 447, 2.064, 7079.374, 435, 4.423, 5216.580, 421, 1.906, 245.832, 413, 0.921, 3738.761, 402, 0.840, 20.355, 387, 1.826, 11856.219, 379, 2.344, 3.881, 374, 2.954, 3128.389, 370, 5.031, 536.805, 365, 1.018, 16200.773, 365, 1.083, 88860.057, 352, 5.978, 3894.182, 352, 2.056, 244287.600, 351, 3.713, 6290.189, 340, 1.106, 14712.317, 339, 0.978, 8635.942, 339, 3.202, 5120.601, 333, 0.837, 6496.375, 325, 3.479, 6133.513, 316, 5.089, 21228.392, 316, 1.328, 10873.986, 309, 3.646, 10.637, 303, 1.802, 35371.887, 296, 3.397, 9225.539, 288, 6.026, 154717.610, 281, 2.585, 14314.168, 262, 3.856, 266.607, 262, 2.579, 22483.849, 257, 1.561, 23543.231, 255, 3.949, 1990.745, 251, 3.744, 10575.407, 240, 1.161, 10984.192, 238, 0.106, 7.046, 236, 4.272, 6040.347, 234, 3.577, 10969.965, 211, 3.714, 65147.620, 210, 0.754, 13521.751, 207, 4.228, 5650.292, 202, 0.814, 170.673, 201, 4.629, 6037.244, 200, 0.381, 6172.870, 199, 3.933, 6206.810, 199, 5.197, 6262.300, 197, 1.046, 18209.330, 195, 1.070, 5230.807, 195, 4.869, 36.028, 194, 4.313, 6244.943, 192, 1.229, 709.933, 192, 5.595, 6282.096, 192, 0.602, 6284.056, 189, 3.744, 23.878, 188, 1.904, 15.252, 188, 0.867, 22003.915, 182, 3.681, 15110.466, 181, 0.491, 1.484, 179, 3.222, 39302.097, 179, 1.259, 12559.038, 62833196674749, 0.000000000000, 0.000000000000, 20605886, 2.67823456, 6283.07584999, 430343, 2.635127, 12566.151700, 42526, 1.59047, 3.52312, 11926, 5.79557, 26.29832, 10898, 2.96618, 1577.34354, 9348, 2.5921, 18849.2275, 7212, 1.1385, 529.6910, 6777, 1.8747, 398.1490, 6733, 4.4092, 5507.5532, 5903, 2.8880, 5223.6939, 5598, 2.1747, 155.4204, 4541, 0.3980, 796.2980, 3637, 0.4662, 775.5226, 2896, 2.6471, 7.1135, 2084, 5.3414, 0.9803, 1910, 1.8463, 5486.7778, 1851, 4.9686, 213.2991, 1729, 2.9912, 6275.9623, 1623, 0.0322, 2544.3144, 1583, 1.4305, 2146.1654, 1462, 1.2053, 10977.0788, 1246, 2.8343, 1748.0164, 1188, 3.2580, 5088.6288, 1181, 5.2738, 1194.4470, 1151, 2.0750, 4694.0030, 1064, 0.7661, 553.5694, 997, 1.303, 6286.599, 972, 4.239, 1349.867, 945, 2.700, 242.729, 858, 5.645, 951.718, 758, 5.301, 2352.866, 639, 2.650, 9437.763, 610, 4.666, 4690.480, 583, 1.766, 1059.382, 531, 0.909, 3154.687, 522, 5.661, 71430.696, 520, 1.854, 801.821, 504, 1.425, 6438.496, 433, 0.241, 6812.767, 426, 0.774, 10447.388, 413, 5.240, 7084.897, 374, 2.001, 8031.092, 356, 2.429, 14143.495, 350, 4.800, 6279.553, 337, 0.888, 12036.461, 337, 3.862, 1592.596, 325, 3.400, 7632.943, 322, 0.616, 8429.241, 318, 3.188, 4705.732, 297, 6.070, 4292.331, 295, 1.431, 5746.271, 290, 2.325, 20.355, 275, 0.935, 5760.498, 270, 4.804, 7234.794, 253, 6.223, 6836.645, 228, 5.003, 17789.846, 225, 5.672, 11499.656, 215, 5.202, 11513.883, 208, 3.955, 10213.286, 208, 2.268, 522.577, 206, 2.224, 5856.478, 206, 2.550, 25132.303, 203, 0.910, 6256.778, 189, 0.532, 3340.612, 188, 4.735, 83996.847, 179, 1.474, 4164.312, 178, 3.025, 5.523, 177, 3.026, 5753.385, 159, 4.637, 3.286, 157, 6.124, 5216.580, 155, 3.077, 6681.225, 154, 4.200, 13367.973, 143, 1.191, 3894.182, 138, 3.093, 135.065, 136, 4.245, 426.598, 134, 5.765, 6040.347, 128, 3.085, 5643.179, 127, 2.092, 6290.189, 125, 3.077, 11926.254, 125, 3.445, 536.805, 114, 3.244, 12168.003, 112, 2.318, 16730.464, 111, 3.901, 11506.770, 111, 5.320, 23.878, 105, 3.750, 7860.419, 103, 2.447, 1990.745, 96, 0.82, 3.88, 96, 4.08, 6127.66, 91, 5.42, 206.19, 91, 0.42, 7079.37, 88, 5.17, 11790.63, 81, 0.34, 9917.70, 80, 3.89, 10973.56, 78, 2.40, 1589.07, 78, 2.58, 11371.70, 77, 3.98, 955.60, 77, 3.36, 36.03, 76, 1.30, 103.09, 75, 5.18, 10969.97, 75, 4.96, 6496.37, 73, 5.21, 38.03, 72, 2.65, 6309.37, 70, 5.61, 3738.76, 69, 2.60, 3496.03, 69, 0.39, 15.25, 69, 2.78, 20.78, 65, 1.13, 7058.60, 64, 4.28, 28.45, 61, 5.63, 10984.19, 60, 0.73, 419.48, 60, 5.28, 10575.41, 58, 5.55, 17298.18, 58, 3.19, 4732.03, 5291887, 0.0000000, 0.0000000, 871984, 1.072097, 6283.075850, 30913, 0.86729, 12566.15170, 2734, 0.0530, 3.5231, 1633, 5.1883, 26.2983, 1575, 3.6846, 155.4204, 954, 0.757, 18849.228, 894, 2.057, 77713.771, 695, 0.827, 775.523, 506, 4.663, 1577.344, 406, 1.031, 7.114, 381, 3.441, 5573.143, 346, 5.141, 796.298, 317, 6.053, 5507.553, 302, 1.192, 242.729, 289, 6.117, 529.691, 271, 0.306, 398.149, 254, 2.280, 553.569, 237, 4.381, 5223.694, 208, 3.754, 0.980, 168, 0.902, 951.718, 153, 5.759, 1349.867, 145, 4.364, 1748.016, 134, 3.721, 1194.447, 125, 2.948, 6438.496, 122, 2.973, 2146.165, 110, 1.271, 161000.686, 104, 0.604, 3154.687, 100, 5.986, 6286.599, 92, 4.80, 5088.63, 89, 5.23, 7084.90, 83, 3.31, 213.30, 76, 3.42, 5486.78, 71, 6.19, 4690.48, 68, 3.43, 4694.00, 65, 1.60, 2544.31, 64, 1.98, 801.82, 61, 2.48, 10977.08, 50, 1.44, 6836.65, 49, 2.34, 1592.60, 46, 1.31, 4292.33, 46, 3.81, 149854.40, 43, 0.04, 7234.79, 40, 4.94, 7632.94, 39, 1.57, 71430.70, 38, 3.17, 6309.37, 35, 0.99, 6040.35, 35, 0.67, 1059.38, 31, 3.18, 2352.87, 31, 3.55, 8031.09, 30, 1.92, 10447.39, 30, 2.52, 6127.66, 28, 4.42, 9437.76, 28, 2.71, 3894.18, 27, 0.67, 25132.30, 26, 5.27, 6812.77, 25, 0.55, 6279.55, 23, 1.38, 4705.73, 22, 0.64, 6256.78, 20, 6.07, 640.88, 28923, 5.84384, 6283.07585, 3496, 0.0000, 0.0000, 1682, 5.4877, 12566.1517, 296, 5.196, 155.420, 129, 4.722, 3.523, 71, 5.30, 18849.23, 64, 5.97, 242.73, 40, 3.79, 553.57, 11408, 3.14159, 0.00000, 772, 4.134, 6283.076, 77, 3.84, 12566.15, 42, 0.42, 155.42, 88, 3.14, 0.00, 17, 2.77, 6283.08, 5, 2.01, 155.42, 3, 2.21, 12566.15, 27962, 3.19870, 84334.66158, 10164, 5.42249, 5507.55324, 8045, 3.8801, 5223.6939, 4381, 3.7044, 2352.8662, 3193, 4.0003, 1577.3435, 2272, 3.9847, 1047.7473, 1814, 4.9837, 6283.0758, 1639, 3.5646, 5856.4777, 1444, 3.7028, 9437.7629, 1430, 3.4112, 10213.2855, 1125, 4.8282, 14143.4952, 1090, 2.0857, 6812.7668, 1037, 4.0566, 71092.8814, 971, 3.473, 4694.003, 915, 1.142, 6620.890, 878, 4.440, 5753.385, 837, 4.993, 7084.897, 770, 5.554, 167621.576, 719, 3.602, 529.691, 692, 4.326, 6275.962, 558, 4.410, 7860.419, 529, 2.484, 4705.732, 521, 6.250, 18073.705, 903, 3.897, 5507.553, 618, 1.730, 5223.694, 380, 5.244, 2352.866, 166, 1.627, 84334.662, 10001398880, 0.00000000000, 0.00000000000, 167069963, 3.098463508, 6283.075849991, 1395602, 3.0552461, 12566.1517000, 308372, 5.198467, 77713.771468, 162846, 1.173877, 5753.384885, 157557, 2.846852, 7860.419392, 92480, 5.45292, 11506.76977, 54244, 4.56409, 3930.20970, 47211, 3.66100, 5884.92685, 34598, 0.96369, 5507.55324, 32878, 5.89984, 5223.69392, 30678, 0.29867, 5573.14280, 24319, 4.27350, 11790.62909, 21183, 5.84715, 1577.34354, 18575, 5.02194, 10977.07880, 17484, 3.01194, 18849.22755, 10984, 5.05511, 5486.77784, 9832, 0.8868, 6069.7768, 8650, 5.6896, 15720.8388, 8583, 1.2708, 161000.6857, 6490, 0.2725, 17260.1547, 6292, 0.9218, 529.6910, 5706, 2.0137, 83996.8473, 5574, 5.2416, 71430.6956, 4938, 3.2450, 2544.3144, 4696, 2.5781, 775.5226, 4466, 5.5372, 9437.7629, 4252, 6.0111, 6275.9623, 3897, 5.3607, 4694.0030, 3825, 2.3926, 8827.3903, 3749, 0.8295, 19651.0485, 3696, 4.9011, 12139.5535, 3566, 1.6747, 12036.4607, 3454, 1.8427, 2942.4634, 3319, 0.2437, 7084.8968, 3192, 0.1837, 5088.6288, 3185, 1.7778, 398.1490, 2846, 1.2134, 6286.5990, 2779, 1.8993, 6279.5527, 2628, 4.5890, 10447.3878, 2460, 3.7866, 8429.2413, 2393, 4.9960, 5856.4777, 2359, 0.2687, 796.2980, 2329, 2.8078, 14143.4952, 2210, 1.9500, 3154.6871, 2035, 4.6527, 2146.1654, 1951, 5.3823, 2352.8662, 1883, 0.6731, 149854.4001, 1833, 2.2535, 23581.2582, 1796, 0.1987, 6812.7668, 1731, 6.1520, 16730.4637, 1717, 4.4332, 10213.2855, 1619, 5.2316, 17789.8456, 1381, 5.1896, 8031.0923, 1364, 3.6852, 4705.7323, 1314, 0.6529, 13367.9726, 1041, 4.3329, 11769.8537, 1017, 1.5939, 4690.4798, 998, 4.201, 6309.374, 966, 3.676, 27511.468, 874, 6.064, 1748.016, 779, 3.674, 12168.003, 771, 0.312, 7632.943, 756, 2.626, 6256.778, 746, 5.648, 11926.254, 693, 2.924, 6681.225, 680, 1.423, 23013.540, 674, 0.563, 3340.612, 663, 5.661, 11371.705, 659, 3.136, 801.821, 648, 2.650, 19804.827, 615, 3.029, 233141.314, 612, 5.134, 1194.447, 563, 4.341, 90955.552, 552, 2.091, 17298.182, 534, 5.100, 31441.678, 531, 2.407, 11499.656, 523, 4.624, 6438.496, 513, 5.324, 11513.883, 477, 0.256, 11856.219, 461, 1.722, 7234.794, 458, 3.766, 6386.169, 458, 4.466, 5746.271, 423, 1.055, 5760.498, 422, 1.557, 7238.676, 415, 2.599, 7058.598, 401, 3.030, 1059.382, 397, 1.201, 1349.867, 379, 4.907, 4164.312, 360, 5.707, 5643.179, 352, 3.626, 244287.600, 348, 0.761, 10973.556, 342, 3.001, 4292.331, 336, 4.546, 4732.031, 334, 3.138, 6836.645, 324, 4.164, 9917.697, 316, 1.691, 11015.106, 307, 0.238, 35371.887, 298, 1.306, 6283.143, 298, 1.750, 6283.009, 293, 5.738, 16200.773, 286, 5.928, 14712.317, 281, 3.515, 21228.392, 280, 5.663, 8635.942, 277, 0.513, 26.298, 268, 4.207, 18073.705, 266, 0.900, 12352.853, 260, 2.962, 25132.303, 255, 2.477, 6208.294, 242, 2.800, 709.933, 231, 1.054, 22483.849, 229, 1.070, 14314.168, 216, 1.314, 154717.610, 215, 6.038, 10873.986, 200, 0.561, 7079.374, 198, 2.614, 951.718, 197, 4.369, 167283.762, 186, 2.861, 5216.580, 183, 1.660, 39302.097, 183, 5.912, 3738.761, 175, 2.145, 6290.189, 173, 2.168, 10575.407, 171, 3.702, 1592.596, 171, 1.343, 3128.389, 164, 5.550, 6496.375, 164, 5.856, 10984.192, 161, 1.998, 10969.965, 161, 1.909, 6133.513, 157, 4.955, 25158.602, 154, 6.216, 23543.231, 153, 5.357, 13521.751, 150, 5.770, 18209.330, 150, 5.439, 155.420, 139, 1.778, 9225.539, 139, 1.626, 5120.601, 128, 2.460, 13916.019, 123, 0.717, 143571.324, 122, 2.654, 88860.057, 121, 4.414, 3894.182, 121, 1.192, 3.523, 120, 4.030, 553.569, 119, 1.513, 17654.781, 117, 3.117, 14945.316, 113, 2.698, 6040.347, 110, 3.085, 43232.307, 109, 0.998, 955.600, 108, 2.939, 17256.632, 107, 5.285, 65147.620, 103, 0.139, 11712.955, 103, 5.850, 213.299, 102, 3.046, 6037.244, 101, 2.842, 8662.240, 100, 3.626, 6262.300, 98, 2.36, 6206.81, 98, 5.11, 6172.87, 98, 2.00, 15110.47, 97, 2.67, 5650.29, 97, 2.75, 6244.94, 96, 4.02, 6282.10, 96, 5.31, 6284.06, 92, 0.10, 29088.81, 85, 3.26, 20426.57, 84, 2.60, 28766.92, 81, 3.58, 10177.26, 80, 5.81, 5230.81, 78, 2.53, 16496.36, 77, 4.06, 6127.66, 73, 0.04, 5481.25, 72, 5.96, 12559.04, 72, 5.92, 4136.91, 71, 5.49, 22003.91, 70, 3.41, 7.11, 69, 0.62, 11403.68, 69, 3.90, 1589.07, 69, 1.96, 12416.59, 69, 4.51, 426.60, 67, 1.61, 11087.29, 66, 4.50, 47162.52, 66, 5.08, 283.86, 66, 4.32, 16858.48, 65, 1.04, 6062.66, 64, 1.59, 18319.54, 63, 5.70, 45892.73, 63, 4.60, 66567.49, 63, 3.82, 13517.87, 62, 2.62, 11190.38, 61, 1.54, 33019.02, 60, 5.58, 10344.30, 60, 5.38, 316428.23, 60, 5.78, 632.78, 59, 6.12, 9623.69, 57, 0.16, 17267.27, 57, 3.86, 6076.89, 57, 1.98, 7668.64, 56, 4.78, 20199.09, 55, 4.56, 18875.53, 55, 3.51, 17253.04, 54, 3.07, 226858.24, 54, 4.83, 18422.63, 53, 5.02, 12132.44, 52, 3.63, 5333.90, 52, 0.97, 155427.54, 51, 3.36, 20597.24, 50, 0.99, 11609.86, 50, 2.21, 1990.75, 48, 1.62, 12146.67, 48, 1.17, 12569.67, 47, 4.62, 5436.99, 47, 1.81, 12562.63, 47, 0.59, 21954.16, 47, 0.76, 7342.46, 46, 0.27, 4590.91, 46, 3.77, 156137.48, 45, 5.66, 10454.50, 44, 5.84, 3496.03, 43, 0.24, 17996.03, 41, 5.93, 51092.73, 41, 4.21, 12592.45, 40, 5.14, 1551.05, 40, 5.28, 15671.08, 39, 3.69, 18052.93, 39, 4.94, 24356.78, 38, 2.72, 11933.37, 38, 5.23, 7477.52, 38, 4.99, 9779.11, 37, 3.70, 9388.01, 37, 4.44, 4535.06, 36, 2.16, 28237.23, 36, 2.54, 242.73, 36, 0.22, 5429.88, 35, 6.15, 19800.95, 35, 2.92, 36949.23, 34, 5.63, 2379.16, 34, 5.73, 16460.33, 34, 5.11, 5849.36, 33, 6.19, 6268.85, 10301861, 1.10748970, 6283.07584999, 172124, 1.064423, 12566.151700, 70222, 3.14159, 0.00000, 3235, 1.0217, 18849.2275, 3080, 2.8435, 5507.5532, 2497, 1.3191, 5223.6939, 1849, 1.4243, 1577.3435, 1008, 5.9138, 10977.0788, 865, 1.420, 6275.962, 863, 0.271, 5486.778, 507, 1.686, 5088.629, 499, 6.014, 6286.599, 467, 5.987, 529.691, 440, 0.518, 4694.003, 410, 1.084, 9437.763, 387, 4.750, 2544.314, 375, 5.071, 796.298, 352, 0.023, 83996.847, 344, 0.949, 71430.696, 341, 5.412, 775.523, 322, 6.156, 2146.165, 286, 5.484, 10447.388, 284, 3.420, 2352.866, 255, 6.132, 6438.496, 252, 0.243, 398.149, 243, 3.092, 4690.480, 225, 3.689, 7084.897, 220, 4.952, 6812.767, 219, 0.420, 8031.092, 209, 1.282, 1748.016, 193, 5.314, 8429.241, 185, 1.820, 7632.943, 175, 3.229, 6279.553, 173, 1.537, 4705.732, 158, 4.097, 11499.656, 158, 5.539, 3154.687, 150, 3.633, 11513.883, 148, 3.222, 7234.794, 147, 3.653, 1194.447, 144, 0.817, 14143.495, 135, 6.151, 5746.271, 134, 4.644, 6836.645, 128, 2.693, 1349.867, 123, 5.650, 5760.498, 118, 2.577, 13367.973, 113, 3.357, 17789.846, 110, 4.497, 4292.331, 108, 5.828, 12036.461, 102, 5.621, 6256.778, 99, 1.14, 1059.38, 98, 0.66, 5856.48, 93, 2.32, 10213.29, 92, 0.77, 16730.46, 88, 1.50, 11926.25, 86, 1.42, 5753.38, 85, 0.66, 155.42, 81, 1.64, 6681.22, 80, 4.11, 951.72, 66, 4.55, 5216.58, 65, 0.98, 25132.30, 64, 4.19, 6040.35, 64, 0.52, 6290.19, 63, 1.51, 5643.18, 59, 6.18, 4164.31, 57, 2.30, 10973.56, 55, 2.32, 11506.77, 55, 2.20, 1592.60, 55, 5.27, 3340.61, 54, 5.54, 553.57, 53, 5.04, 9917.70, 53, 0.92, 11371.70, 52, 3.98, 17298.18, 52, 3.60, 10969.97, 49, 5.91, 3894.18, 49, 2.51, 6127.66, 48, 1.67, 12168.00, 46, 0.31, 801.82, 42, 3.70, 10575.41, 42, 4.05, 10984.19, 40, 2.17, 7860.42, 40, 4.17, 26.30, 38, 5.82, 7058.60, 37, 3.39, 6496.37, 36, 1.08, 6309.37, 36, 5.34, 7079.37, 34, 3.62, 11790.63, 32, 0.32, 16200.77, 31, 4.24, 3738.76, 29, 4.55, 11856.22, 29, 1.26, 8635.94, 27, 3.45, 5884.93, 26, 5.08, 10177.26, 26, 5.38, 21228.39, 24, 2.26, 11712.96, 24, 1.05, 242.73, 24, 5.59, 6069.78, 23, 3.63, 6284.06, 23, 1.64, 4732.03, 22, 3.46, 213.30, 21, 1.05, 3496.03, 21, 3.92, 13916.02, 21, 4.01, 5230.81, 20, 5.16, 12352.85, 20, 0.69, 1990.75, 19, 2.73, 6062.66, 19, 5.01, 11015.11, 18, 6.04, 6283.01, 18, 2.85, 7238.68, 18, 5.60, 6283.14, 18, 5.16, 17253.04, 18, 2.54, 14314.17, 17, 1.58, 7.11, 17, 0.98, 3930.21, 17, 4.75, 17267.27, 16, 2.19, 6076.89, 16, 2.19, 18073.70, 16, 6.12, 3.52, 16, 4.61, 9623.69, 16, 3.40, 16496.36, 15, 0.19, 9779.11, 15, 5.30, 13517.87, 15, 4.26, 3128.39, 15, 0.81, 709.93, 14, 0.50, 25158.60, 14, 4.38, 4136.91, 13, 0.98, 65147.62, 13, 3.31, 154717.61, 13, 2.11, 1589.07, 13, 1.92, 22483.85, 12, 6.03, 9225.54, 12, 1.53, 12559.04, 12, 5.82, 6282.10, 12, 5.61, 5642.20, 12, 2.38, 167283.76, 12, 0.39, 12132.44, 12, 3.98, 4686.89, 12, 5.81, 12569.67, 12, 0.56, 5849.36, 11, 0.45, 6172.87, 11, 5.80, 16858.48, 11, 6.22, 12146.67, 11, 2.27, 5429.88, 435939, 5.784551, 6283.075850, 12363, 5.57935, 12566.15170, 1234, 3.1416, 0.0000, 879, 3.628, 77713.771, 569, 1.870, 5573.143, 330, 5.470, 18849.228, 147, 4.480, 5507.553, 110, 2.842, 161000.686, 101, 2.815, 5223.694, 85, 3.11, 1577.34, 65, 5.47, 775.52, 61, 1.38, 6438.50, 50, 4.42, 6286.60, 47, 3.66, 7084.90, 46, 5.39, 149854.40, 42, 0.90, 10977.08, 40, 3.20, 5088.63, 35, 1.81, 5486.78, 32, 5.35, 3154.69, 30, 3.52, 796.30, 29, 4.62, 4690.48, 28, 1.84, 4694.00, 27, 3.14, 71430.70, 27, 6.17, 6836.65, 26, 1.42, 2146.17, 25, 2.81, 1748.02, 24, 2.18, 155.42, 23, 4.76, 7234.79, 21, 3.38, 7632.94, 21, 0.22, 4705.73, 20, 4.22, 1349.87, 20, 2.01, 1194.45, 20, 4.58, 529.69, 19, 1.59, 6309.37, 18, 5.70, 6040.35, 18, 6.03, 4292.33, 17, 2.90, 9437.76, 17, 2.00, 8031.09, 17, 5.78, 83996.85, 16, 0.05, 2544.31, 15, 0.95, 6127.66, 14, 0.36, 10447.39, 14, 1.48, 2352.87, 13, 0.77, 553.57, 13, 5.48, 951.72, 13, 5.27, 6279.55, 13, 3.76, 6812.77, 11, 5.41, 6256.78, 10, 0.68, 1592.60, 10, 4.95, 398.15, 10, 1.15, 3894.18, 10, 5.20, 244287.60, 10, 1.94, 11856.22, 9, 5.39, 25132.30, 8, 6.18, 1059.38, 8, 0.69, 8429.24, 8, 5.85, 242.73, 7, 5.26, 14143.50, 7, 0.52, 801.82, 6, 2.24, 8635.94, 6, 4.00, 13367.97, 6, 2.77, 90955.55, 6, 5.17, 7058.60, 5, 1.46, 233141.31, 5, 4.13, 7860.42, 5, 3.91, 26.30, 5, 3.89, 12036.46, 5, 5.58, 6290.19, 5, 5.54, 1990.75, 5, 0.83, 11506.77, 5, 6.22, 6681.22, 4, 5.26, 10575.41, 4, 1.91, 7477.52, 4, 0.43, 10213.29, 4, 1.09, 709.93, 4, 5.09, 11015.11, 4, 4.22, 88860.06, 4, 3.57, 7079.37, 4, 1.98, 6284.06, 4, 3.93, 10973.56, 4, 6.18, 9917.70, 4, 0.36, 10177.26, 4, 2.75, 3738.76, 4, 3.33, 5643.18, 4, 5.36, 25158.60, 14459, 4.27319, 6283.07585, 673, 3.917, 12566.152, 77, 0.00, 0.00, 25, 3.73, 18849.23, 4, 2.80, 6286.60, 386, 2.564, 6283.076, 31, 2.27, 12566.15, 5, 3.44, 5573.14, 2, 2.05, 18849.23, 1, 2.06, 77713.77, 1, 4.41, 161000.69, 1, 3.82, 149854.40, 1, 4.08, 6127.66, 1, 5.26, 6438.50, 9, 1.22, 6283.08, 1, 0.66, 12566.15];
    static $XL1=[
      [22639.586, 0.78475822, 8328.691424623, 1.5229241, 25.0719, -0.123598, 4586.438, 0.1873974, 7214.06286536, -2.184756, -18.860, 0.08280, 2369.914, 2.5429520, 15542.75428998, -0.661832, 6.212, -0.04080, 769.026, 3.140313, 16657.38284925, 3.04585, 50.144, -0.2472, 666.418, 1.527671, 628.30195521, -0.02664, 0.062, -0.0054, 411.596, 4.826607, 16866.9323150, -1.28012, -1.07, -0.0059, 211.656, 4.115028, -1114.6285593, -3.70768, -43.93, 0.2064, 205.436, 0.230523, 6585.7609101, -2.15812, -18.92, 0.0882, 191.956, 4.898507, 23871.4457146, 0.86109, 31.28, -0.164, 164.729, 2.586078, 14914.4523348, -0.6352, 6.15, -0.035, 147.321, 5.45530, -7700.3894694, -1.5496, -25.01, 0.118, 124.988, 0.48608, 7771.3771450, -0.3309, 3.11, -0.020, 109.380, 3.88323, 8956.9933798, 1.4963, 25.13, -0.129, 55.177, 5.57033, -1324.1780250, 0.6183, 7.3, -0.035, 45.100, 0.89898, 25195.623740, 0.2428, 24.0, -0.129, 39.533, 3.81213, -8538.240890, 2.8030, 26.1, -0.118, 38.430, 4.30115, 22756.817155, -2.8466, -12.6, 0.042, 36.124, 5.49587, 24986.074274, 4.5688, 75.2, -0.371, 30.773, 1.94559, 14428.125731, -4.3695, -37.7, 0.166, 28.397, 3.28586, 7842.364821, -2.2114, -18.8, 0.077, 24.358, 5.64142, 16171.056245, -0.6885, 6.3, -0.046, 18.585, 4.41371, -557.314280, -1.8538, -22.0, 0.10, 17.954, 3.58454, 8399.679100, -0.3576, 3.2, -0.03, 14.530, 4.9416, 23243.143759, 0.888, 31.2, -0.16, 14.380, 0.9709, 32200.137139, 2.384, 56.4, -0.29, 14.251, 5.7641, -2.301200, 1.523, 25.1, -0.12, 13.899, 0.3735, 31085.508580, -1.324, 12.4, -0.08, 13.194, 1.7595, -9443.319984, -5.231, -69.0, 0.33, 9.679, 3.0997, -16029.080894, -3.072, -50.1, 0.24, 9.366, 0.3016, 24080.995180, -3.465, -19.9, 0.08, 8.606, 4.1582, -1742.930514, -3.681, -44.0, 0.21, 8.453, 2.8416, 16100.068570, 1.192, 28.2, -0.14, 8.050, 2.6292, 14286.150380, -0.609, 6.1, -0.03, 7.630, 6.2388, 17285.684804, 3.019, 50.2, -0.25, 7.447, 1.4845, 1256.603910, -0.053, 0.1, -0.01, 7.371, 0.2736, 5957.458955, -2.131, -19.0, 0.09, 7.063, 5.6715, 33.757047, -0.308, -3.6, 0.02, 6.383, 4.7843, 7004.513400, 2.141, 32.4, -0.16, 5.742, 2.6572, 32409.686605, -1.942, 5, -0.05, 4.374, 4.3443, 22128.51520, -2.820, -13, 0.05, 3.998, 3.2545, 33524.31516, 1.766, 49, -0.25, 3.210, 2.2443, 14985.44001, -2.516, -16, 0.06, 2.915, 1.7138, 24499.74767, 0.834, 31, -0.17, 2.732, 1.9887, 13799.82378, -4.343, -38, 0.17, 2.568, 5.4122, -7072.08751, -1.576, -25, 0.11, 2.521, 3.2427, 8470.66678, -2.238, -19, 0.07, 2.489, 4.0719, -486.32660, -3.734, -44, 0.20, 2.146, 5.6135, -1952.47998, 0.645, 7, -0.03, 1.978, 2.7291, 39414.20000, 0.199, 37, -0.21, 1.934, 1.5682, 33314.76570, 6.092, 100, -0.5, 1.871, 0.4166, 30457.20662, -1.297, 12, -0.1, 1.753, 2.0582, -8886.00570, -3.38, -47, 0.2, 1.437, 2.386, -695.87607, 0.59, 7, 0, 1.373, 3.026, -209.54947, 4.33, 51, -0.2, 1.262, 5.940, 16728.37052, 1.17, 28, -0.1, 1.224, 6.172, 6656.74859, -4.04, -41, 0.2, 1.187, 5.873, 6099.43431, -5.89, -63, 0.3, 1.177, 1.014, 31571.83518, 2.41, 56, -0.3, 1.162, 3.840, 9585.29534, 1.47, 25, -0.1, 1.143, 5.639, 8364.73984, -2.18, -19, 0.1, 1.078, 1.229, 70.98768, -1.88, -22, 0.1, 1.059, 3.326, 40528.82856, 3.91, 81, -0.4, 0.990, 5.013, 40738.37803, -0.42, 30, -0.2, 0.948, 5.687, -17772.01141, -6.75, -94, 0.5, 0.876, 0.298, -0.35232, 0, 0, 0, 0.822, 2.994, 393.02097, 0, 0, 0, 0.788, 1.836, 8326.39022, 3.05, 50, -0.2, 0.752, 4.985, 22614.84180, 0.91, 31, -0.2, 0.740, 2.875, 8330.99262, 0, 0, 0, 0.669, 0.744, -24357.77232, -4.60, -75, 0.4, 0.644, 1.314, 8393.12577, -2.18, -19, 0.1, 0.639, 5.888, 575.33849, 0, 0, 0, 0.635, 1.116, 23385.11911, -2.87, -13, 0, 0.584, 5.197, 24428.75999, 2.71, 53, -0.3, 0.583, 3.513, -9095.55517, 0.95, 4, 0, 0.572, 6.059, 29970.88002, -5.03, -32, 0.1, 0.565, 2.960, 0.32863, 1.52, 25, -0.1, 0.561, 4.001, -17981.56087, -2.43, -43, 0.2, 0.557, 0.529, 7143.07519, -0.30, 3, 0, 0.546, 2.311, 25614.37623, 4.54, 75, -0.4, 0.536, 4.229, 15752.30376, -4.99, -45, 0.2, 0.493, 3.316, -8294.9344, -1.83, -29, 0.1, 0.491, 1.744, 8362.4485, 1.21, 21, -0.1, 0.478, 1.803, -10071.6219, -5.20, -69, 0.3, 0.454, 0.857, 15333.2048, 3.66, 57, -0.3, 0.445, 2.071, 8311.7707, -2.18, -19, 0.1, 0.426, 0.345, 23452.6932, -3.44, -20, 0.1, 0.420, 4.941, 33733.8646, -2.56, -2, 0, 0.413, 1.642, 17495.2343, -1.31, -1, 0, 0.404, 1.458, 23314.1314, -0.99, 9, -0.1, 0.395, 2.132, 38299.5714, -3.51, -6, 0, 0.382, 2.700, 31781.3846, -1.92, 5, 0, 0.375, 4.827, 6376.2114, 2.17, 32, -0.2, 0.361, 3.867, 16833.1753, -0.97, 3, 0, 0.358, 5.044, 15056.4277, -4.40, -38, 0.2, 0.350, 5.157, -8257.7037, -3.40, -47, 0.2, 0.344, 4.233, 157.7344, 0, 0, 0, 0.340, 2.672, 13657.8484, -0.58, 6, 0, 0.329, 5.610, 41853.0066, 3.29, 74, -0.4, 0.325, 5.895, -39.8149, 0, 0, 0, 0.309, 4.387, 21500.2132, -2.79, -13, 0.1, 0.302, 1.278, 786.0419, 0, 0, 0, 0.302, 5.341, -24567.3218, -0.27, -24, 0.1, 0.301, 1.045, 5889.8848, -1.57, -12, 0, 0.294, 4.201, -2371.2325, -3.65, -44, 0.2, 0.293, 3.704, 21642.1886, -6.55, -57, 0.2, 0.290, 4.069, 32828.4391, 2.36, 56, -0.3, 0.289, 3.472, 31713.8105, -1.35, 12, -0.1, 0.285, 5.407, -33.7814, 0.31, 4, 0, 0.283, 5.998, -16.9207, -3.71, -44, 0.2, 0.283, 2.772, 38785.8980, 0.23, 37, -0.2, 0.274, 5.343, 15613.7420, -2.54, -16, 0.1, 0.263, 3.997, 25823.9257, 0.22, 24, -0.1, 0.254, 0.600, 24638.3095, -1.61, 2, 0, 0.253, 1.344, 6447.1991, 0.29, 10, -0.1, 0.250, 0.887, 141.9754, -3.76, -44, 0.2, 0.247, 0.317, 5329.1570, -2.10, -19, 0.1, 0.245, 0.141, 36.0484, -3.71, -44, 0.2, 0.231, 2.287, 14357.1381, -2.49, -16, 0.1, 0.227, 5.158, 2.6298, 0, 0, 0, 0.219, 5.085, 47742.8914, 1.72, 63, -0.3, 0.211, 2.145, 6638.7244, -2.18, -19, 0.1, 0.201, 4.415, 39623.7495, -4.13, -14, 0, 0.194, 2.091, 588.4927, 0, 0, 0, 0.193, 3.057, -15400.7789, -3.10, -50, 0, 0.186, 5.598, 16799.3582, -0.72, 6, 0, 0.185, 3.886, 1150.6770, 0, 0, 0, 0.183, 1.619, 7178.0144, 1.52, 25, 0, 0.181, 2.635, 8328.3391, 1.52, 25, 0, 0.181, 2.077, 8329.0437, 1.52, 25, 0, 0.179, 3.215, -9652.8694, -0.90, -18, 0, 0.176, 1.716, -8815.0180, -5.26, -69, 0, 0.175, 5.673, 550.7553, 0, 0, 0, 0.170, 2.060, 31295.0580, -5.6, -39, 0, 0.167, 1.239, 7211.7617, -0.7, 6, 0, 0.165, 4.499, 14967.4158, -0.7, 6, 0, 0.164, 3.595, 15540.4531, 0.9, 31, 0, 0.164, 4.237, 522.3694, 0, 0, 0, 0.163, 4.633, 15545.0555, -2.2, -19, 0, 0.161, 0.478, 6428.0209, -2.2, -19, 0, 0.158, 2.03, 13171.5218, -4.3, -38, 0, 0.157, 2.28, 7216.3641, -3.7, -44, 0, 0.154, 5.65, 7935.6705, 1.5, 25, 0, 0.152, 0.46, 29828.9047, -1.3, 12, 0, 0.151, 1.19, -0.7113, 0, 0, 0, 0.150, 1.42, 23942.4334, -1.0, 9, 0, 0.144, 2.75, 7753.3529, 1.5, 25, 0, 0.137, 2.08, 7213.7105, -2.2, -19, 0, 0.137, 1.44, 7214.4152, -2.2, -19, 0, 0.136, 4.46, -1185.6162, -1.8, -22, 0, 0.136, 3.03, 8000.1048, -2.2, -19, 0, 0.134, 2.83, 14756.7124, -0.7, 6, 0, 0.131, 5.05, 6821.0419, -2.2, -19, 0, 0.128, 5.99, -17214.6971, -4.9, -72, 0, 0.127, 5.35, 8721.7124, 1.5, 25, 0, 0.126, 4.49, 46628.2629, -2.0, 19, 0, 0.125, 5.94, 7149.6285, 1.5, 25, 0, 0.124, 1.09, 49067.0695, 1.1, 55, 0, 0.121, 2.88, 15471.7666, 1.2, 28, 0, 0.111, 3.92, 41643.4571, 7.6, 125, -1, 0.110, 1.96, 8904.0299, 1.5, 25, 0, 0.106, 3.30, -18.0489, -2.2, -19, 0, 0.105, 2.30, -4.9310, 1.5, 25, 0, 0.104, 2.22, -6.5590, -1.9, -22, 0, 0.101, 1.44, 1884.9059, -0.1, 0, 0, 0.100, 5.92, 5471.1324, -5.9, -63, 0, 0.099, 1.12, 15149.7333, -0.7, 6, 0, 0.096, 4.73, 15508.9972, -0.4, 10, 0, 0.095, 5.18, 7230.9835, 1.5, 25, 0, 0.093, 3.37, 39900.5266, 3.9, 81, 0, 0.092, 2.01, 25057.0619, 2.7, 53, 0, 0.092, 1.21, -79.6298, 0, 0, 0, 0.092, 1.65, -26310.2523, -4.0, -68, 0, 0.091, 1.01, 42062.5561, -1.0, 23, 0, 0.090, 6.10, 29342.5781, -5.0, -32, 0, 0.090, 4.43, 15542.4020, -0.7, 6, 0, 0.090, 3.80, 15543.1066, -0.7, 6, 0, 0.089, 4.15, 6063.3859, -2.2, -19, 0, 0.086, 4.03, 52.9691, 0, 0, 0, 0.085, 0.49, 47952.4409, -2.6, 11, 0, 0.085, 1.60, 7632.8154, 2.1, 32, 0, 0.084, 0.22, 14392.0773, -0.7, 6, 0, 0.083, 6.22, 6028.4466, -4.0, -41, 0, 0.083, 0.63, -7909.9389, 2.8, 26, 0, 0.083, 5.20, -77.5523, 0, 0, 0, 0.082, 2.74, 8786.1467, -2.2, -19, 0, 0.080, 2.43, 9166.5428, -2.8, -26, 0, 0.080, 3.70, -25405.1732, 4.1, 27, 0, 0.078, 5.68, 48857.5200, 5.4, 106, -1, 0.077, 1.85, 8315.5735, -2.2, -19, 0, 0.075, 5.46, -18191.1103, 1.9, 8, 0, 0.075, 1.41, -16238.6304, 1.3, 1, 0, 0.074, 5.06, 40110.0761, -0.4, 30, 0, 0.072, 2.10, 64.4343, -3.7, -44, 0, 0.071, 2.17, 37671.2695, -3.5, -6, 0, 0.069, 1.71, 16693.4313, -0.7, 6, 0, 0.069, 3.33, -26100.7028, -8.3, -119, 1, 0.068, 1.09, 8329.4028, 1.5, 25, 0, 0.068, 3.62, 8327.9801, 1.5, 25, 0, 0.068, 2.41, 16833.1509, -1.0, 3, 0, 0.067, 3.40, 24709.2971, -3.5, -20, 0, 0.067, 1.65, 8346.7156, -0.3, 3, 0, 0.066, 2.61, 22547.2677, 1.5, 39, 0, 0.066, 3.50, 15576.5113, -1.0, 3, 0, 0.065, 5.76, 33037.9886, -2.0, 5, 0, 0.065, 4.58, 8322.1325, -0.3, 3, 0, 0.065, 6.20, 17913.9868, 3.0, 50, 0, 0.065, 1.50, 22685.8295, -1.0, 9, 0, 0.065, 2.37, 7180.3058, -1.9, -15, 0, 0.064, 1.06, 30943.5332, 2.4, 56, 0, 0.064, 1.89, 8288.8765, 1.5, 25, 0, 0.064, 4.70, 6.0335, 0.3, 4, 0, 0.063, 2.83, 8368.5063, 1.5, 25, 0, 0.063, 5.66, -2580.7819, 0.7, 7, 0, 0.062, 3.78, 7056.3285, -2.2, -19, 0, 0.061, 1.49, 8294.9100, 1.8, 29, 0, 0.061, 0.12, -10281.1714, -0.9, -18, 0, 0.061, 3.06, -8362.4729, -1.2, -21, 0, 0.061, 4.43, 8170.9571, 1.5, 25, 0, 0.059, 5.78, -13.1179, -3.7, -44, 0, 0.059, 5.97, 6625.5702, -2.2, -19, 0, 0.058, 5.01, -0.5080, -0.3, 0, 0, 0.058, 2.73, 7161.0938, -2.2, -19, 0, 0.057, 0.19, 7214.0629, -2.2, -19, 0, 0.057, 4.00, 22199.5029, -4.7, -35, 0, 0.057, 5.38, 8119.1420, 5.8, 76, 0, 0.056, 1.07, 7542.6495, 1.5, 25, 0, 0.056, 0.28, 8486.4258, 1.5, 25, 0, 0.054, 4.19, 16655.0816, 4.6, 75, 0, 0.053, 0.72, 7267.0320, -2.2, -19, 0, 0.053, 3.12, 12.6192, 0.6, 7, 0, 0.052, 2.99, -32896.013, -1.8, -49, 0, 0.052, 3.46, 1097.708, 0, 0, 0, 0.051, 5.37, -6443.786, -1.6, -25, 0, 0.051, 1.35, 7789.401, -2.2, -19, 0, 0.051, 5.83, 40042.502, 0.2, 38, 0, 0.051, 3.63, 9114.733, 1.5, 25, 0, 0.050, 1.51, 8504.484, -2.5, -22, 0, 0.050, 5.23, 16659.684, 1.5, 25, 0, 0.050, 1.15, 7247.820, -2.5, -23, 0, 0.047, 0.25, -1290.421, 0.3, 0, 0, 0.047, 4.67, -32686.464, -6.1, -100, 0, 0.047, 3.49, 548.678, 0, 0, 0, 0.047, 2.37, 6663.308, -2.2, -19, 0, 0.046, 0.98, 1572.084, 0, 0, 0, 0.046, 2.04, 14954.262, -0.7, 6, 0, 0.046, 3.72, 6691.693, -2.2, -19, 0, 0.045, 6.19, -235.287, 0, 0, 0, 0.044, 2.96, 32967.001, -0.1, 27, 0, 0.044, 3.82, -1671.943, -5.6, -66, 0, 0.043, 5.82, 1179.063, 0, 0, 0, 0.043, 0.07, 34152.617, 1.7, 49, 0, 0.043, 3.71, 6514.773, -0.3, 0, 0, 0.043, 5.62, 15.732, -2.5, -23, 0, 0.043, 5.80, 8351.233, -2.2, -19, 0, 0.042, 0.27, 7740.199, 1.5, 25, 0, 0.042, 6.14, 15385.020, -0.7, 6, 0, 0.042, 6.13, 7285.051, -4.1, -41, 0, 0.041, 1.27, 32757.451, 4.2, 78, 0, 0.041, 4.46, 8275.722, 1.5, 25, 0, 0.040, 0.23, 8381.661, 1.5, 25, 0, 0.040, 5.87, -766.864, 2.5, 29, 0, 0.040, 1.66, 254.431, 0, 0, 0, 0.040, 0.40, 9027.981, -0.4, 0, 0, 0.040, 2.96, 7777.936, 1.5, 25, 0, 0.039, 4.67, 33943.068, 6.1, 100, 0, 0.039, 3.52, 8326.062, 1.5, 25, 0, 0.039, 3.75, 21013.887, -6.5, -57, 0, 0.039, 5.60, 606.978, 0, 0, 0, 0.039, 1.19, 8331.321, 1.5, 25, 0, 0.039, 2.84, 7211.433, -2.2, -19, 0, 0.038, 0.67, 7216.693, -2.2, -19, 0, 0.038, 6.22, 25161.867, 0.6, 28, 0, 0.038, 4.40, 7806.322, 1.5, 25, 0, 0.038, 4.16, 9179.168, -2.2, -19, 0, 0.037, 4.73, 14991.999, -0.7, 6, 0, 0.036, 0.35, 67.514, -0.6, -7, 0, 0.036, 3.70, 25266.611, -1.6, 0, 0, 0.036, 5.39, 16328.796, -0.7, 6, 0, 0.035, 1.44, 7174.248, -2.2, -19, 0, 0.035, 5.00, 15684.730, -4.4, -38, 0, 0.035, 0.39, -15.419, -2.2, -19, 0, 0.035, 6.07, 15020.385, -0.7, 6, 0, 0.034, 6.01, 7371.797, -2.2, -19, 0, 0.034, 0.96, -16623.626, -3.4, -54, 0, 0.033, 6.24, 9479.368, 1.5, 25, 0, 0.033, 3.21, 23661.896, 5.2, 82, 0, 0.033, 4.06, 8311.418, -2.2, -19, 0, 0.033, 2.40, 1965.105, 0, 0, 0, 0.033, 5.17, 15489.785, -0.7, 6, 0, 0.033, 5.03, 21986.540, 0.9, 31, 0, 0.033, 4.10, 16691.140, 2.7, 46, 0, 0.033, 5.13, 47114.589, 1.7, 63, 0, 0.033, 4.45, 8917.184, 1.5, 25, 0, 0.033, 4.23, 2.078, 0, 0, 0, 0.032, 2.33, 75.251, 1.5, 25, 0, 0.032, 2.10, 7253.878, -2.2, -19, 0, 0.032, 3.11, -0.224, 1.5, 25, 0, 0.032, 4.43, 16640.462, -0.7, 6, 0, 0.032, 5.68, 8328.363, 0, 0, 0, 0.031, 5.32, 8329.020, 3.0, 50, 0, 0.031, 3.70, 16118.093, -0.7, 6, 0, 0.030, 3.67, 16721.817, -0.7, 6, 0, 0.030, 5.27, -1881.492, -1.2, -15, 0, 0.030, 5.72, 8157.839, -2.2, -19, 0, 0.029, 5.73, -18400.313, -6.7, -94, 0, 0.029, 2.76, 16.000, -2.2, -19, 0, 0.029, 1.75, 8879.447, 1.5, 25, 0, 0.029, 0.32, 8851.061, 1.5, 25, 0, 0.029, 0.90, 14704.903, 3.7, 57, 0, 0.028, 2.90, 15595.723, -0.7, 6, 0, 0.028, 5.88, 16864.631, 0.2, 24, 0, 0.028, 0.63, 16869.234, -2.8, -26, 0, 0.028, 4.04, -18609.863, -2.4, -43, 0, 0.027, 5.83, 6727.736, -5.9, -63, 0, 0.027, 6.12, 418.752, 4.3, 51, 0, 0.027, 0.14, 41157.131, 3.9, 81, 0, 0.026, 3.80, 15.542, 0, 0, 0, 0.026, 1.68, 50181.698, 4.8, 99, -1, 0.026, 0.32, 315.469, 0, 0, 0, 0.025, 5.67, 19.188, 0.3, 0, 0, 0.025, 3.16, 62.133, -2.2, -19, 0, 0.025, 3.76, 15502.939, -0.7, 6, 0, 0.025, 4.53, 45999.961, -2.0, 19, 0, 0.024, 3.21, 837.851, -4.4, -51, 0, 0.024, 2.82, 38157.596, 0.3, 37, 0, 0.024, 5.21, 15540.124, -0.7, 6, 0, 0.024, 0.26, 14218.576, 0, 13, 0, 0.024, 3.01, 15545.384, -0.7, 6, 0, 0.024, 1.16, -17424.247, -0.6, -21, 0, 0.023, 2.34, -67.574, 0.6, 7, 0, 0.023, 2.44, 18.024, -1.9, -22, 0, 0.023, 3.70, 469.400, 0, 0, 0, 0.023, 0.72, 7136.511, -2.2, -19, 0, 0.023, 4.50, 15582.569, -0.7, 6, 0, 0.023, 2.80, -16586.395, -4.9, -72, 0, 0.023, 1.51, 80.182, 0, 0, 0, 0.023, 1.09, 5261.583, -1.5, -12, 0, 0.023, 0.56, 54956.954, -0.5, 44, 0, 0.023, 4.01, 8550.860, -2.2, -19, 0, 0.023, 4.46, 38995.448, -4.1, -14, 0, 0.023, 3.82, 2358.126, 0, 0, 0, 0.022, 3.77, 32271.125, 0.5, 34, 0, 0.022, 0.82, 15935.775, -0.7, 6, 0, 0.022, 1.07, 24013.421, -2.9, -13, 0, 0.022, 0.40, 8940.078, -2.2, -19, 0, 0.022, 2.06, 15700.489, -0.7, 6, 0, 0.022, 4.27, 15124.002, -5.0, -45, 0, 0.021, 1.16, 56071.583, 3.2, 88, 0, 0.021, 5.58, 9572.189, -2.2, -19, 0, 0.020, 1.70, -17.273, -3.7, -44, 0, 0.020, 3.05, 214.617, 0, 0, 0, 0.020, 4.41, 8391.048, -2.2, -19, 0, 0.020, 5.95, 23869.145, 2.4, 56, 0, 0.020, 0.42, 40947.927, -4.7, -21, 0, 0.019, 1.39, 5818.897, 0.3, 10, 0, 0.019, 0.71, 23873.747, -0.7, 6, 0, 0.019, 2.81, 7291.615, -2.2, -19, 0, 0.019, 5.09, 8428.018, -2.2, -19, 0, 0.019, 4.14, 6518.187, -1.6, -12, 0, 0.019, 3.85, 21.330, 0, 0, 0, 0.018, 0.66, 14445.046, -0.7, 6, 0, 0.018, 1.65, 0.966, -4.0, -48, 0, 0.018, 5.64, -17143.709, -6.8, -94, 0, 0.018, 6.01, 7736.432, -2.2, -19, 0, 0.018, 2.74, 31153.083, -1.9, 5, 0, 0.018, 4.58, 6116.355, -2.2, -19, 0, 0.018, 2.28, 46.401, 0.3, 0, 0, 0.018, 3.80, 10213.597, 1.4, 25, 0, 0.018, 2.84, 56281.132, -1.1, 36, 0, 0.018, 3.53, 8249.062, 1.5, 25, 0, 0.017, 4.43, 20871.911, -3, -13, 0, 0.017, 4.44, 627.596, 0, 0, 0, 0.017, 1.85, 628.308, 0, 0, 0, 0.017, 1.19, 8408.321, 2, 25, 0, 0.017, 1.95, 7214.056, -2, -19, 0, 0.017, 1.57, 7214.070, -2, -19, 0, 0.017, 1.65, 13870.811, -6, -60, 0, 0.017, 0.30, 22.542, -4, -44, 0, 0.017, 2.62, -119.445, 0, 0, 0, 0.016, 4.87, 5747.909, 2, 32, 0, 0.016, 4.45, 14339.108, -1, 6, 0, 0.016, 1.83, 41366.680, 0, 30, 0, 0.016, 4.53, 16309.618, -3, -23, 0, 0.016, 2.54, 15542.754, -1, 6, 0, 0.016, 6.05, 1203.646, 0, 0, 0, 0.015, 5.2, 2751.147, 0, 0, 0, 0.015, 1.8, -10699.924, -5, -69, 0, 0.015, 0.4, 22824.391, -3, -20, 0, 0.015, 2.1, 30666.756, -6, -39, 0, 0.015, 2.1, 6010.417, -2, -19, 0, 0.015, 0.7, -23729.470, -5, -75, 0, 0.015, 1.4, 14363.691, -1, 6, 0, 0.015, 5.8, 16900.689, -2, 0, 0, 0.015, 5.2, 23800.458, 3, 53, 0, 0.015, 5.3, 6035.000, -2, -19, 0, 0.015, 1.2, 8251.139, 2, 25, 0, 0.015, 3.6, -8.860, 0, 0, 0, 0.015, 0.8, 882.739, 0, 0, 0, 0.015, 3.0, 1021.329, 0, 0, 0, 0.015, 0.6, 23296.107, 1, 31, 0, 0.014, 5.4, 7227.181, 2, 25, 0, 0.014, 0.1, 7213.352, -2, -19, 0, 0.014, 4.0, 15506.706, 3, 50, 0, 0.014, 3.4, 7214.774, -2, -19, 0, 0.014, 4.6, 6665.385, -2, -19, 0, 0.014, 0.1, -8.636, -2, -22, 0, 0.014, 3.1, 15465.202, -1, 6, 0, 0.014, 4.9, 508.863, 0, 0, 0, 0.014, 3.5, 8406.244, 2, 25, 0, 0.014, 1.3, 13313.497, -8, -82, 0, 0.014, 2.8, 49276.619, -3, 0, 0, 0.014, 0.1, 30528.194, -3, -10, 0, 0.013, 1.7, 25128.050, 1, 31, 0, 0.013, 2.9, 14128.405, -1, 6, 0, 0.013, 3.4, 57395.761, 3, 80, 0, 0.013, 2.7, 13029.546, -1, 6, 0, 0.013, 3.9, 7802.556, -2, -19, 0, 0.013, 1.6, 8258.802, -2, -19, 0, 0.013, 2.2, 8417.709, -2, -19, 0, 0.013, 0.7, 9965.210, -2, -19, 0, 0.013, 3.4, 50391.247, 0, 48, 0, 0.013, 3.0, 7134.433, -2, -19, 0, 0.013, 2.9, 30599.182, -5, -31, 0, 0.013, 3.6, -9723.857, 1, 0, 0, 0.013, 4.8, 7607.084, -2, -19, 0, 0.012, 0.8, 23837.689, 1, 35, 0, 0.012, 3.6, 4.409, -4, -44, 0, 0.012, 5.0, 16657.031, 3, 50, 0, 0.012, 4.4, 16657.735, 3, 50, 0, 0.012, 1.1, 15578.803, -4, -38, 0, 0.012, 6.0, -11.490, 0, 0, 0, 0.012, 1.9, 8164.398, 0, 0, 0, 0.012, 2.4, 31852.372, -4, -17, 0, 0.012, 2.4, 6607.085, -2, -19, 0, 0.012, 4.2, 8359.870, 0, 0, 0, 0.012, 0.5, 5799.713, -2, -19, 0, 0.012, 2.7, 7220.622, 0, 0, 0, 0.012, 4.3, -139.720, 0, 0, 0, 0.012, 2.3, 13728.836, -2, -16, 0, 0.011, 3.6, 14912.146, 1, 31, 0, 0.011, 4.7, 14916.748, -2, -19, 0],
      [1.67680, 4.66926, 628.301955, -0.0266, 0.1, -0.005, 0.51642, 3.3721, 6585.760910, -2.158, -18.9, 0.09, 0.41383, 5.7277, 14914.452335, -0.635, 6.2, -0.04, 0.37115, 3.9695, 7700.389469, 1.550, 25.0, -0.12, 0.27560, 0.7416, 8956.993380, 1.496, 25.1, -0.13, 0.24599, 4.2253, -2.301200, 1.523, 25.1, -0.12, 0.07118, 0.1443, 7842.36482, -2.211, -19, 0.08, 0.06128, 2.4998, 16171.05625, -0.688, 6, 0, 0.04516, 0.443, 8399.67910, -0.36, 3, 0, 0.04048, 5.771, 14286.15038, -0.61, 6, 0, 0.03747, 4.626, 1256.60391, -0.05, 0, 0, 0.03707, 3.415, 5957.45895, -2.13, -19, 0.1, 0.03649, 1.800, 23243.14376, 0.89, 31, -0.2, 0.02438, 0.042, 16029.08089, 3.07, 50, -0.2, 0.02165, 1.017, -1742.93051, -3.68, -44, 0.2, 0.01923, 3.097, 17285.68480, 3.02, 50, -0.3, 0.01692, 1.280, 0.3286, 1.52, 25, -0.1, 0.01361, 0.298, 8326.3902, 3.05, 50, -0.2, 0.01293, 4.013, 7072.0875, 1.58, 25, -0.1, 0.01276, 4.413, 8330.9926, 0, 0, 0, 0.01270, 0.101, 8470.6668, -2.24, -19, 0.1, 0.01097, 1.203, 22128.5152, -2.82, -13, 0, 0.01088, 2.545, 15542.7543, -0.66, 6, 0, 0.00835, 0.190, 7214.0629, -2.18, -19, 0.1, 0.00734, 4.855, 24499.7477, 0.83, 31, -0.2, 0.00686, 5.130, 13799.8238, -4.34, -38, 0.2, 0.00631, 0.930, -486.3266, -3.73, -44, 0, 0.00585, 0.699, 9585.2953, 1.5, 25, 0, 0.00566, 4.073, 8328.3391, 1.5, 25, 0, 0.00566, 0.638, 8329.0437, 1.5, 25, 0, 0.00539, 2.472, -1952.4800, 0.6, 7, 0, 0.00509, 2.88, -0.7113, 0, 0, 0, 0.00469, 3.56, 30457.2066, -1.3, 12, 0, 0.00387, 0.78, -0.3523, 0, 0, 0, 0.00378, 1.84, 22614.8418, 0.9, 31, 0, 0.00362, 5.53, -695.8761, 0.6, 7, 0, 0.00317, 2.80, 16728.3705, 1.2, 28, 0, 0.00303, 6.07, 157.7344, 0, 0, 0, 0.00300, 2.53, 33.7570, -0.3, -4, 0, 0.00295, 4.16, 31571.8352, 2.4, 56, 0, 0.00289, 5.98, 7211.7617, -0.7, 6, 0, 0.00285, 2.06, 15540.4531, 0.9, 31, 0, 0.00283, 2.65, 2.6298, 0, 0, 0, 0.00282, 6.17, 15545.0555, -2.2, -19, 0, 0.00278, 1.23, -39.8149, 0, 0, 0, 0.00272, 3.82, 7216.3641, -3.7, -44, 0, 0.00270, 4.37, 70.9877, -1.9, -22, 0, 0.00256, 5.81, 13657.8484, -0.6, 6, 0, 0.00244, 5.64, -0.2237, 1.5, 25, 0, 0.00240, 2.96, 8311.7707, -2.2, -19, 0, 0.00239, 0.87, -33.7814, 0.3, 4, 0, 0.00216, 2.31, 15.9995, -2.2, -19, 0, 0.00186, 3.46, 5329.1570, -2.1, -19, 0, 0.00169, 2.40, 24357.772, 4.6, 75, 0, 0.00161, 5.80, 8329.403, 1.5, 25, 0, 0.00161, 5.20, 8327.980, 1.5, 25, 0, 0.00160, 4.26, 23385.119, -2.9, -13, 0, 0.00156, 1.26, 550.755, 0, 0, 0, 0.00155, 1.25, 21500.213, -2.8, -13, 0, 0.00152, 0.60, -16.921, -3.7, -44, 0, 0.00150, 2.71, -79.630, 0, 0, 0, 0.00150, 5.29, 15.542, 0, 0, 0, 0.00148, 1.06, -2371.232, -3.7, -44, 0, 0.00141, 0.77, 8328.691, 1.5, 25, 0, 0.00141, 3.67, 7143.075, -0.3, 0, 0, 0.00138, 5.45, 25614.376, 4.5, 75, 0, 0.00129, 4.90, 23871.446, 0.9, 31, 0, 0.00126, 4.03, 141.975, -3.8, -44, 0, 0.00124, 6.01, 522.369, 0, 0, 0, 0.00120, 4.94, -10071.622, -5.2, -69, 0, 0.00118, 5.07, -15.419, -2.2, -19, 0, 0.00107, 3.49, 23452.693, -3.4, -20, 0, 0.00104, 4.78, 17495.234, -1.3, 0, 0, 0.00103, 1.44, -18.049, -2.2, -19, 0, 0.00102, 5.63, 15542.402, -0.7, 6, 0, 0.00102, 2.59, 15543.107, -0.7, 6, 0, 0.00100, 4.11, -6.559, -1.9, -22, 0, 0.00097, 0.08, 15400.779, 3.1, 50, 0, 0.00096, 5.84, 31781.385, -1.9, 5, 0, 0.00094, 1.08, 8328.363, 0, 0, 0, 0.00094, 2.46, 16799.358, -0.7, 6, 0, 0.00094, 1.69, 6376.211, 2.2, 32, 0, 0.00093, 3.64, 8329.020, 3.0, 50, 0, 0.00093, 2.65, 16655.082, 4.6, 75, 0, 0.00090, 1.90, 15056.428, -4.4, -38, 0, 0.00089, 1.59, 52.969, 0, 0, 0, 0.00088, 2.02, -8257.704, -3.4, -47, 0, 0.00088, 3.02, 7213.711, -2.2, -19, 0, 0.00087, 0.50, 7214.415, -2.2, -19, 0, 0.00087, 0.49, 16659.684, 1.5, 25, 0, 0.00082, 5.64, -4.931, 1.5, 25, 0, 0.00079, 5.17, 13171.522, -4.3, -38, 0, 0.00076, 3.60, 29828.905, -1.3, 12, 0, 0.00076, 4.08, 24567.322, 0.3, 24, 0, 0.00076, 4.58, 1884.906, -0.1, 0, 0, 0.00073, 0.33, 31713.811, -1.4, 12, 0, 0.00073, 0.93, 32828.439, 2.4, 56, 0, 0.00071, 5.91, 38785.898, 0.2, 37, 0, 0.00069, 2.20, 15613.742, -2.5, -16, 0, 0.00066, 3.87, 15.732, -2.5, -23, 0, 0.00066, 0.86, 25823.926, 0.2, 24, 0, 0.00065, 2.52, 8170.957, 1.5, 25, 0, 0.00063, 0.18, 8322.132, -0.3, 0, 0, 0.00060, 5.84, 8326.062, 1.5, 25, 0, 0.00060, 5.15, 8331.321, 1.5, 25, 0, 0.00060, 2.18, 8486.426, 1.5, 25, 0, 0.00058, 2.30, -1.731, -4, -44, 0, 0.00058, 5.43, 14357.138, -2, -16, 0, 0.00057, 3.09, 8294.910, 2, 29, 0, 0.00057, 4.67, -8362.473, -1, -21, 0, 0.00056, 4.15, 16833.151, -1, 0, 0, 0.00054, 1.93, 7056.329, -2, -19, 0, 0.00054, 5.27, 8315.574, -2, -19, 0, 0.00052, 5.6, 8311.418, -2, -19, 0, 0.00052, 2.7, -77.552, 0, 0, 0, 0.00051, 4.3, 7230.984, 2, 25, 0, 0.00050, 0.4, -0.508, 0, 0, 0, 0.00049, 5.4, 7211.433, -2, -19, 0, 0.00049, 4.4, 7216.693, -2, -19, 0, 0.00049, 4.3, 16864.631, 0, 24, 0, 0.00049, 2.2, 16869.234, -3, -26, 0, 0.00047, 6.1, 627.596, 0, 0, 0, 0.00047, 5.0, 12.619, 1, 7, 0, 0.00045, 4.9, -8815.018, -5, -69, 0, 0.00044, 1.6, 62.133, -2, -19, 0, 0.00042, 2.9, -13.118, -4, -44, 0, 0.00042, 4.1, -119.445, 0, 0, 0, 0.00041, 4.3, 22756.817, -3, -13, 0, 0.00041, 3.6, 8288.877, 2, 25, 0, 0.00040, 0.5, 6663.308, -2, -19, 0, 0.00040, 1.1, 8368.506, 2, 25, 0, 0.00039, 4.1, 6443.786, 2, 25, 0, 0.00039, 3.1, 16657.383, 3, 50, 0, 0.00038, 0.1, 16657.031, 3, 50, 0, 0.00038, 3.0, 16657.735, 3, 50, 0, 0.00038, 4.6, 23942.433, -1, 9, 0, 0.00037, 4.3, 15385.020, -1, 6, 0, 0.00037, 5.0, 548.678, 0, 0, 0, 0.00036, 1.8, 7213.352, -2, -19, 0, 0.00036, 1.7, 7214.774, -2, -19, 0, 0.00035, 1.1, 7777.936, 2, 25, 0, 0.00035, 1.6, -8.860, 0, 0, 0, 0.00035, 4.4, 23869.145, 2, 56, 0, 0.00035, 2.0, 6691.693, -2, -19, 0, 0.00034, 1.3, -1185.616, -2, -22, 0, 0.00034, 2.2, 23873.747, -1, 6, 0, 0.00033, 2.0, -235.287, 0, 0, 0, 0.00033, 3.1, 17913.987, 3, 50, 0, 0.00033, 1.0, 8351.233, -2, -19, 0],
      [0.004870, 4.6693, 628.30196, -0.027, 0, -0.01, 0.002280, 2.6746, -2.30120, 1.523, 25, -0.12, 0.001500, 3.372, 6585.76091, -2.16, -19, 0.1, 0.001200, 5.728, 14914.45233, -0.64, 6, 0, 0.001080, 3.969, 7700.38947, 1.55, 25, -0.1, 0.000800, 0.742, 8956.99338, 1.50, 25, -0.1, 0.000254, 6.002, 0.3286, 1.52, 25, -0.1, 0.000210, 0.144, 7842.3648, -2.21, -19, 0, 0.000180, 2.500, 16171.0562, -0.7, 6, 0, 0.000130, 0.44, 8399.6791, -0.4, 3, 0, 0.000126, 5.03, 8326.3902, 3.0, 50, 0, 0.000120, 5.77, 14286.1504, -0.6, 6, 0, 0.000118, 5.96, 8330.9926, 0, 0, 0, 0.000110, 1.80, 23243.1438, 0.9, 31, 0, 0.000110, 3.42, 5957.4590, -2.1, -19, 0, 0.000110, 4.63, 1256.6039, -0.1, 0, 0, 0.000099, 4.70, -0.7113, 0, 0, 0, 0.000070, 0.04, 16029.0809, 3.1, 50, 0, 0.000070, 5.14, 8328.3391, 1.5, 25, 0, 0.000070, 5.85, 8329.0437, 1.5, 25, 0, 0.000060, 1.02, -1742.9305, -3.7, -44, 0, 0.000060, 3.10, 17285.6848, 3.0, 50, 0, 0.000054, 5.69, -0.352, 0, 0, 0, 0.000043, 0.52, 15.542, 0, 0, 0, 0.000041, 2.03, 2.630, 0, 0, 0, 0.000040, 0.10, 8470.667, -2.2, -19, 0, 0.000040, 4.01, 7072.088, 1.6, 25, 0, 0.000036, 2.93, -8.860, -0.3, 0, 0, 0.000030, 1.20, 22128.515, -2.8, -13, 0, 0.000030, 2.54, 15542.754, -0.7, 6, 0, 0.000027, 4.43, 7211.762, -0.7, 6, 0, 0.000026, 0.51, 15540.453, 0.9, 31, 0, 0.000026, 1.44, 15545.055, -2.2, -19, 0, 0.000025, 5.37, 7216.364, -3.7, -44, 0],
      [0.00001200, 1.041, -2.3012, 1.52, 25, -0.1, 0.00000170, 0.31, -0.711, 0, 0, 0]
    ];
    static $SHUO_KB=[1457698.231017, 29.53067166, 1546082.512234, 29.53085106, 1640640.735300, 29.53060000, 1642472.151543, 29.53085439, 1683430.509300, 29.53086148, 1752148.041079, 29.53085097, 1807665.420323, 29.53059851, 1883618.114100, 29.53060000, 1907360.704700, 29.53060000, 1936596.224900, 29.53060000, 1939135.675300, 29.53060000, 1947168.00];
static
    public static function nutationLon2($t)
    {
        $a = -1.742 * $t;
        $t2 = $t * $t;
        $dl = 0;
        for ($i = 0, $j = count(self::$NUT_B); $i < $j; $i += 5) {
            $dl += (self::$NUT_B[$i + 3] + $a) * sin(self::$NUT_B[$i] + self::$NUT_B[$i + 1] * $t + self::$NUT_B[$i + 2] * $t2);
            $a = 0;
        }
        return $dl / 100 / self::$SECOND_PER_RAD;
    }
    public static function saLon($t, $n) {
     return self::eLon($t, $n) + self::nutationLon2($t) + self::gxcSunLon($t) + M_PI;
    }

    public static function salont($w)
    {
        $v = 628.3319653318;
        $t = ($w - 1.75347 - M_PI) / $v;
        $v = self::ev($t);
        $t += ($w - self::saLon($t, 10)) / $v;
        $v = self::ev($t);
        $t += ($w - self::saLon($t, -1)) / $v;
        return $t;
    }
    public static function eLon($t, $n)
    {
        $t /= 10;
        $v = 0;
        $tn = 1;
        $pn = 1;
        $m0 = self::$XL0[$pn + 1] - self::$XL0[$pn];
        for ($i = 0; $i < 6; $i++, $tn *= $t) {
            $n1 = floor(self::$XL0[$pn + $i]);
            $n2 = floor(self::$XL0[$pn + 1 + $i]);
            $n0 = $n2 - $n1;
            if ($n0 === 0) {
                continue;
            }
            if ($n < 0) {
                $m = $n2;
            } else {
                $m = floor((3 * $n * $n0 / $m0 + 0.5) + $n1);
                if ($i != 0) {
                    $m += 3;
                }
                if ($m > $n2) {
                    $m = $n2;
                }
            }
            $c = 0;
            for ($j = $n1; $j < $m; $j += 3) {
                $c += self::$XL0[$j] * cos(self::$XL0[$j + 1] + $t * self::$XL0[$j + 2]);
            }
            $v += $c * $tn;
        }
        $v /= self::$XL0[0];
        $t2 = $t * $t;
        $v += (-0.0728 - 2.7702 * $t - 1.1019 * $t2 - 0.0996 * $t2 * $t) / self::$SECOND_PER_RAD;
        return $v;
    }

    public static function mLon($t, $n)
    {
        $ob = self::$XL1;
        $obl = count($ob[0]);
        $tn = 1;
        $v = 0;
        $t2 = $t * $t;
        $t3 = $t2 * $t;
        $t4 = $t3 * $t;
        $t5 = $t4 * $t;
        $tx = $t - 10;
        $v += (3.81034409 + 8399.684730072 * $t - 3.319e-05 * $t2 + 3.11e-08 * $t3 - 2.033e-10 * $t4) * self::$SECOND_PER_RAD;
        $v += 5028.792262 * $t + 1.1124406 * $t2 + 0.00007699 * $t3 - 0.000023479 * $t4 - 0.0000000178 * $t5;
        if ($tx > 0) {
            $v += -0.866 + 1.43 * $tx + 0.054 * $tx * $tx;
        }
        $t2 /= 1e4;
        $t3 /= 1e8;
        $t4 /= 1e8;
        $n *= 6;
        if ($n < 0) {
            $n = $obl;
        }
        for ($i = 0, $x = count($ob); $i < $x; $i++, $tn *= $t) {
            $f = $ob[$i];
            $l = count($f);
            $m = floor(($n * $l / $obl + 0.5));
            if ($i > 0) {
                $m += 6;
            }
            if ($m >= $l) {
                $m = $l;
            }
            for ($j = 0, $c = 0; $j < $m; $j += 6) {
                $c += $f[$j] * cos($f[$j + 1] + $t * $f[$j + 2] + $t2 * $f[$j + 3] + $t3 * $f[$j + 4] + $t4 * $f[$j + 5]);
            }
            $v += $c * $tn;
        }
        $v /= self::$SECOND_PER_RAD;
        return $v;
    }
    public static function msaLonT2($w)
    {
        $v = 7771.37714500204;
        $t = ($w + 1.08472) / $v;
        $t2 = $t * $t;
        $t -= (-0.00003309 * $t2 + 0.10976 * cos(0.784758 + 8328.6914246 * $t + 0.000152292 * $t2) 
            + 0.02224 * cos(0.18740 + 7214.0628654 * $t - 0.00021848 * $t2) 
            - 0.03342 * cos(4.669257 + 628.307585 * $t)) / $v;
        $t2 = $t * $t;
        $l = self::mLon($t, 20) - (4.8950632 + 628.3319653318 * $t + 0.000005297 * $t2 
            + 0.0334166 * cos(4.669257 + 628.307585 * $t) 
            + 0.0002061 * cos(2.67823 + 628.307585 * $t) * $t 
            + 0.000349 * cos(4.6261 + 1256.61517 * $t) 
            - 20.5 / self::$SECOND_PER_RAD);
        $v = 7771.38 - 914 * sin(0.7848 + 8328.691425 * $t + 0.0001523 * $t2) 
            - 179 * sin(2.543 + 15542.7543 * $t) 
            - 160 * sin(0.1874 + 7214.0629 * $t);
        $t += ($w - $l) / $v;
        return $t;
    }
    public static function gxcSunLon($t)
    {
        $t2 = $t * $t;
        $v = -0.043126 + 628.301955 * $t - 0.000002732 * $t2;
        $e = 0.016708634 - 0.000042037 * $t - 0.0000001267 * $t2;
        return -20.49552 * (1 + $e * cos($v)) / self::$SECOND_PER_RAD;
    }

    public static function msaLon($t, $mn, $sn)
    {
        return self::mLon($t, $mn) - 3.4E-6 - (self::eLon($t, $sn) + self::gxcSunLon($t) + M_PI);
    }
    public static function ev($t)
    {
        $f = 628.307585 * $t;
        return 628.332 
              + 21 * sin(1.527 + $f) 
              + 0.44 * sin(1.48 + $f * 2) 
              + 0.129 * sin(5.82 + $f) * $t 
              + 0.00055 * sin(4.21 + $f) * $t * $t;
    }

    public static function mv($t)
    {
        $v = 8399.71 - 914 * sin(0.7848 + 8328.691425 * $t + 0.0001523 * $t * $t);
        $v -= 179 * sin(2.543 + 15542.7543 * $t) 
            + 160 * sin(0.1874 + 7214.0629 * $t)
            + 62 * sin(3.14 + 16657.3828 * $t)
            + 34 * sin(4.827 + 16866.9323 * $t)
            + 22 * sin(4.9 + 23871.4457 * $t)
            + 12 * sin(2.59 + 14914.4523 * $t)
            + 7 * sin(0.23 + 6585.7609 * $t)
            + 5 * sin(0.9 + 25195.624 * $t)
            + 5 * sin(2.32 - 7700.3895 * $t)
            + 5 * sin(3.88 + 8956.9934 * $t)
            + 5 * sin(0.49 + 7771.3771 * $t);
        return $v;
    }

    public static function msaLonT($w)
    {
        $v = 7771.37714500204;
        $t = ($w + 1.08472) / $v;
        $t += ($w - self::msaLon($t, 3, 3)) / $v;
        $v = self::mv($t) - self::ev($t);
        $t += ($w - self::msaLon($t, 20, 10)) / $v;
        $t += ($w - self::msaLon($t, -1, 60)) / $v;
        return $t;
    }
    public static function dtExt($y, $jsd)
    {
        $dy = ($y - 1820) / 100;
        return -20 + $jsd * $dy * $dy;
    }

    public static function dtCalc($y)
    {
        $size = count(self::$DT_AT);
        $y0 = self::$DT_AT[$size - 2];
        $t0 = self::$DT_AT[$size - 1];

        if ($y >= $y0) {
            $jsd = 31;
            if ($y > $y0 + 100) {
                return self::dtExt($y, $jsd);
            }
            return self::dtExt($y, $jsd) - (self::dtExt($y0, $jsd) - $t0) * ($y0 + 100 - $y) / 100;
        }

        for ($i = 0; $i < $size; $i += 5) {
            if ($y < self::$DT_AT[$i + 5]) {
                break;
            }
        }

        $t1 = ($y - self::$DT_AT[$i]) / (self::$DT_AT[$i + 5] - self::$DT_AT[$i]) * 10;
        $t2 = $t1 * $t1;
        $t3 = $t2 * $t1;

        return self::$DT_AT[$i + 1] + self::$DT_AT[$i + 2] * $t1 + self::$DT_AT[$i + 3] * $t2 + self::$DT_AT[$i + 4] * $t3;
    }

    public static function dtT($t)
    {
        return self::dtCalc($t / 365.2425 + 2000) / self::$SECOND_PER_DAY;
    } 
    // Other methods should be implemented similarly
    public static function shuoHigh($w)
    {
        $t = self::msaLonT2($w) * 36525;
        $t = $t - self::dtT($t) + self::$ONE_THIRD;
        $v = (($t + 0.5) % 1) * self::$SECOND_PER_DAY;
        if ($v < 1800 || $v > self::$SECOND_PER_DAY - 1800) {
            $t = self::msaLonT($w) * 36525 - self::dtT($t) + self::$ONE_THIRD;
        }
        return $t;
    }
    
    public static function shuoLow($w)
    {
        $v = 7771.37714500204;
        $t = ($w + 1.08472) / $v;
        $t -= (-0.0000331 * $t * $t + 0.10976 * cos(0.785 + 8328.6914 * $t) + 0.02224 * cos(0.187 + 7214.0629 * $t) - 0.03342 * cos(4.669 + 628.3076 * $t)) / $v + (32 * ($t + 1.8) * ($t + 1.8) - 20) / self::$SECOND_PER_DAY / 36525;
        return $t * 36525 + self::$ONE_THIRD;
    }
    
    public static function calcShuo($jd)
    {
        $size = count(self::$SHUO_KB);
        $d = 0;
        $pc = 14;
        $jd += Solar::J2000();
        $f1 = self::$SHUO_KB[0] - $pc;
        $f2 = self::$SHUO_KB[$size - 1] - $pc;
        $f3 = 2436935;
        if ($jd < $f1 || $jd >= $f3) {
            $d = floor(self::shuoHigh(floor(($jd + $pc - 2451551) / 29.5306) * M_PI * 2) + 0.5);
        } elseif ($jd >= $f1 && $jd < $f2) {
            for ($i = 0; $i < $size; $i += 2) {
                if ($jd + $pc < self::$SHUO_KB[$i + 2]) {
                    break;
                }
            }
            $d = self::$SHUO_KB[$i] + self::$SHUO_KB[$i + 1] * floor(($jd + $pc - self::$SHUO_KB[$i]) / self::$SHUO_KB[$i + 1]);
            $d = floor($d + 0.5);
            if ($d === 1683460) {
                $d++;
            }
            $d -= Solar::J2000();
        } elseif ($jd >= $f2 && $jd < $f3) {
            $d = floor(self::shuoLow(floor(($jd + $pc - 2451551) / 29.5306) * M_PI * 2) + 0.5);
            $from = floor(($jd - $f2) / 29.5306);
            $n = substr(self::$SB, $from, 1);
            if ($n === '1') {
                $d += 1;
            } elseif ($n === '2') {
                $d -= 1;
            }
        }
        return $d;
    }
}
class SolarWeek
{
    private $year;
    private $month;
    private $day;
    private $start;
    public static $calendar;

    private function __construct($year, $month, $day, $start)
    {
        $this->year = $year;
        $this->month = $month;
        $this->day = $day;
        $this->start = $start;
        $this->calendar = ExactDate::fromYmd($year, $month, $day);
    }

    public static function fromYmd($y, $m, $d, $start)
    {
        return new self($y, $m, $d, $start);
    }

    public static function fromDate($date, $start)
    {
        return self::fromYmd($date->format('Y'), $date->format('n'), $date->format('j'), $start);
    }

    public function getYear()
    {
        return $this->year;
    }

    public function getMonth()
    {
        return $this->month;
    }

    public function getDay()
    {
        return $this->day;
    }

    public function getStart()
    {
        return $this->start;
    }

    public function getIndex()
    {
        $firstDate = ExactDate::fromYmd($this->year, $this->month, 1);
        $firstDayWeek = $firstDate->format('w');
        $offset = $firstDayWeek - $this->start;
        if ($offset < 0) {
            $offset += 7;
        }
        return ceil(($this->day + $offset) / 7);
    }

    public function getIndexInYear()
    {
        $firstDate = ExactDate::fromYmd($this->year, 1, 1);
        $firstDayWeek = $firstDate->format('w');
        $offset = $firstDayWeek - $this->start;
        if ($offset < 0) {
            $offset += 7;
        }
        return ceil((SolarUtil::getDaysInYear($this->year, $this->month, $this->day) + $offset) / 7);
    }

    public function next($weeks, $separateMonth)
    {
        if ($weeks === 0) {
            return self::fromYmd($this->year, $this->month, $this->day, $this->start);
        }

        if ($separateMonth) {
            $n = $weeks;
            $date = ExactDate::fromYmd($this->year, $this->month, $this->day);
            $week = self::fromDate($date, $this->start);
            $month = $this->month;
            $plus = $n > 0;

            while ($n !== 0) {
                $date->modify(($plus ? '+' : '-') . '7 days');
                $week = self::fromDate($date, $this->start);
                $weekMonth = $week->getMonth();

                if ($month !== $weekMonth) {
                    $index = $week->getIndex();
                    if ($plus) {
                        if ($index === 1) {
                            $firstDay = $week->getFirstDay();
                            $week = self::fromYmd($firstDay->getYear(), $firstDay->getMonth(), $firstDay->getDay(), $this->start);
                            $weekMonth = $week->getMonth();
                        } else {
                            $date = ExactDate::fromYmd($week->getYear(), $week->getMonth(), 1);
                            $week = self::fromDate($date, $this->start);
                        }
                    } else {
                        $size = SolarUtil::getWeeksOfMonth($week->getYear(), $week->getMonth(), $this->start);
                        if ($size === $index) {
                            $lastDay = $week->getFirstDay()->next(6);
                            $week = self::fromYmd($lastDay->getYear(), $lastDay->getMonth(), $lastDay->getDay(), $this->start);
                            $weekMonth = $week->getMonth();
                        } else {
                            $date = ExactDate::fromYmd($week->getYear(), $week->getMonth(), SolarUtil::getDaysOfMonth($week->getYear(), $week->getMonth()));
                            $week = self::fromDate($date, $this->start);
                        }
                    }
                    $month = $weekMonth;
                }
                $n -= $plus ? 1 : -1;
            }
            return $week;
        } else {
            $date = ExactDate::fromYmd($this->year, $this->month, $this->day);
            $date->modify(($weeks * 7) . ' days');
            return self::fromDate($date, $this->start);
        }
    }

    public function getFirstDay()
    {
        $date = ExactDate::fromYmd($this->year, $this->month, $this->day);
        $prev = $date->format('w') - $this->start;
        if ($prev < 0) {
            $prev += 7;
        }
        $date->modify('-' . $prev . ' days');
        return Solar::fromDate($date);
    }

    public function getFirstDayInMonth()
    {
        $days = $this->getDays();
        foreach ($days as $day) {
            if ($this->month === $day->getMonth()) {
                return $day;
            }
        }
    }

    public function getDays()
    {
        $firstDay = $this->getFirstDay();
        $days = [$firstDay];
        for ($i = 1; $i < 7; $i++) {
            $days[] = $firstDay->next($i);
        }
        return $days;
    }

    public function getDaysInMonth()
    {
        $days = $this->getDays();
        $daysInMonth = [];
        foreach ($days as $day) {
            if ($this->month !== $day->getMonth()) {
                continue;
            }
            $daysInMonth[] = $day;
        }
        return $daysInMonth;
    }

    public function __toString()
    {
        return $this->getYear() . '.' . $this->getMonth() . '.' . $this->getIndex();
    }

    public function toFullString()
    {
        return $this->getYear() . 'å¹´' . $this->getMonth() . 'æœˆç¬¬' . $this->getIndex() . 'å‘¨';
    }
}
class HolidayUtil {
    static $SIZE = 18;
    static $ZERO = 48; // ASCII code for '0'
    static $TAG_REMOVE = '~';
    public static $DATA='';
   
    static $NAMES = ['å…ƒæ—¦èŠ‚','æ˜¥èŠ‚','æ¸…æ˜ŽèŠ‚','åŠ³åŠ¨èŠ‚','ç«¯åˆèŠ‚','ä¸­ç§‹èŠ‚','å›½åº†èŠ‚','å›½åº†ä¸­ç§‹','æŠ—æˆ˜èƒœåˆ©æ—¥'];
   
    static function padding($n) {
        return ($n < 10 ? '0' : '') . $n;
    }
  
    static function ymd($s) {
        return strpos($s, '-') === false ? (substr($s, 0, 4) . '-' . substr($s, 4, 2) . '-' . substr($s, 6)) : $s;
    }
  
    private static function buildHoliday($day, $name, $work, $target) {
        return new class($day, $name, $work, $target) {
            private $p;
  
            public function __construct($day, $name, $work, $target) {
                $this->p = [
                    'day' => HolidayUtil::ymd($day),
                    'name' => $name,
                    'work' => $work,
                    'target' => HolidayUtil::ymd($target)
                ];
            }
  
            public function getDay() { return $this->p['day']; }
            public function setDay($v) { $this->p['day'] = HolidayUtil::ymd($v); }
            public function getName() { return $this->p['name']; }
            public function setName($v) { $this->p['name'] = $v; }
            public function isWork() { return $this->p['work']; }
            public function setWork($v) { $this->p['work'] = $v; }
            public function getTarget() { return $this->p['target']; }
            public function setTarget($v) { $this->p['target'] = HolidayUtil::ymd($v); }
  
            public function __toString() {
                return $this->p['day'] . ' ' . $this->p['name'] . ($this->p['work'] ? '调休' : '') . ' ' . $this->p['target'];
            }
        };
    }
  
    private static function buildHolidayForward($s) {
        $day = substr($s, 0, 8);
        $name = self::$NAMES[ord($s[8]) - self::$ZERO];
        $work = ord($s[9]) === self::$ZERO;
        $target = substr($s, 10, 8);
        return self::buildHoliday($day, $name, $work, $target);
    }
  
    private static function buildHolidayBackward($s) {
        $size = strlen($s);
        $day = substr($s, $size - 18, 8);
        $name = self::$NAMES[ord($s[$size - 10]) - self::$ZERO];
        $work = ord($s[$size - 9]) === self::$ZERO;
        $target = substr($s, $size - 8);
        return self::buildHoliday($day, $name, $work, $target);
    }
  
    private static function findForward($key) {
        $start = strpos(self::$DATA, $key);
        if ($start === false) {
            return null;
        }
        $right = substr(self::$DATA, $start);
        $n = strlen($right) % self::$SIZE;
        if ($n > 0) {
            $right = substr($right, $n);
        }
        while ((strpos($right, $key) !== 0) && strlen($right) >= self::$SIZE) {
            $right = substr($right, self::$SIZE);
        }
        return $right;
    }
  
    private static function findBackward($key) {
        $start = strrpos(self::$DATA, $key);
        if ($start === false) {
            return null;
        }
        $keySize = strlen($key);
        $left = substr(self::$DATA, 0, $start + $keySize);
        $size = strlen($left);
        $n = $size % self::$SIZE;
        if ($n > 0) {
            $left = substr($left, 0, $size - $n);
        }
        $size = strlen($left);
        while ((strrpos($left, $key) !== $size - $keySize) && $size >= self::$SIZE) {
            $left = substr($left, 0, $size - self::$SIZE);
            $size = strlen($left);
        }
        return $left;
    }
  
    private static function findHolidaysForward($key) {
        $l = [];
        $s = self::findForward($key);
        if ($s === null) {
            return $l;
        }
        while (strpos($s, $key) === 0) {
            $l[] = self::buildHolidayForward($s);
            $s = substr($s, self::$SIZE);
        }
        return $l;
    }
  
    private static function findHolidaysBackward($key) {
        $l = [];
        $s = self::findBackward($key);
        if ($s === null) {
            return $l;
        }
        $size = strlen($s);
        $keySize = strlen($key);
        while (strrpos($s, $key) === $size - $keySize) {
            $l[] = self::buildHolidayBackward($s);
            $s = substr($s, 0, $size - self::$SIZE);
            $size = strlen($s);
        }
        return array_reverse($l);
    }
  
    public static function getHoliday(...$args) {
        $l = [];
        switch (count($args)) {
            case 1:
                $l = self::findHolidaysForward(str_replace('-', '', $args[0]));
                break;
            case 3:
                $l = self::findHolidaysForward($args[0] . self::padding($args[1]) . self::padding($args[2]));
                break;
        }
        return count($l) < 1 ? null : $l[0];
    }
  
    public static function getHolidays(...$args) {
        $l = [];
        switch (count($args)) {
            case 1:
                $l = self::findHolidaysForward(str_replace('-', '', (string)$args[0]));
                break;
            case 2:
                $l = self::findHolidaysForward($args[0] . self::padding($args[1]));
                break;
        }
        return $l;
    }
  
    public static function getHolidaysByTarget(...$args) {
        $l = [];
        switch (count($args)) {
            case 1:
                $l = self::findHolidaysBackward(str_replace('-', '', (string)$args[0]));
                break;
            case 3:
                $l = self::findHolidaysBackward($args[0] . self::padding($args[1]) . self::padding($args[2]));
                break;
        }
        return $l;
    }
  
    private static function fixNames($names) {
        if ($names) {
            self::$NAMES = $names;
        }
    }
  
    private static function fixData($data) {
        if (!$data) {
            return;
        }
        $append = [];
        while (strlen($data) >= self::$SIZE) {
            $segment = substr($data, 0, self::$SIZE);
            $day = substr($segment, 0, 8);
            $remove = self::$TAG_REMOVE == substr($segment, 8, 1);
            $holiday = self::getHoliday($day);
            if (!$holiday) {
                if (!$remove) {
                    $append[] = $segment;
                }
            } else {
                $nameIndex = array_search($holiday->getName(), self::$NAMES);
                if ($nameIndex !== false) {
                    $old = $day . chr($nameIndex + self::$ZERO) . ($holiday->isWork() ? '0' : '1') . str_replace('-', '', $holiday->getTarget());
                    self::$DATA = str_replace($old, $remove ? '' : $segment, self::$DATA);
                }
            }
            $data = substr($data, self::$SIZE);
        }
        if (count($append) > 0) {
            self::$DATA .= implode('', $append);
        }
    }
  
    public static function fix(...$args) {
        switch (count($args)) {
            case 1:
                self::fixData($args[0]);
                break;
            case 2:
                self::fixNames($args[0]);
                self::fixData($args[1]);
                break;
        }
    }
  }
 class LunarUtil {
 
  public static $BASE_MONTH_ZHI_INDEX=2;
  public static $XUN=['ç”²å­','ç”²æˆŒ','ç”²ç”³','ç”²åˆ','ç”²è¾°','ç”²å¯…'];
  public static $XUN_KONG=['æˆŒäº¥','ç”³é…‰','åˆæœª','è¾°å·³','å¯…å¯','å­ä¸‘'];
  public static $LIU_YAO=['å…ˆèƒœ','å‹å¼•','å…ˆè´Ÿ','ä½›ç­','å¤§å®‰','èµ¤å£'];
  public static $HOU=['åˆå€™','äºŒå€™','ä¸‰å€™'];
  public static $WU_HOU=['èš¯èš“ç»“','éº‹è§’è§£','æ°´æ³‰åŠ¨','é›åŒ—ä¹¡','é¹Šå§‹å·¢','é›‰å§‹é›Š','é¸¡å§‹ä¹³','å¾é¸ŸåŽ‰ç–¾','æ°´æ³½è…¹åš','ä¸œé£Žè§£å†»','è›°è™«å§‹æŒ¯','é±¼é™Ÿè´Ÿå†°','ç­ç¥­é±¼','å€™é›åŒ—','è‰æœ¨èŒåŠ¨','æ¡ƒå§‹åŽ','ä»“åºšé¸£','é¹°åŒ–ä¸ºé¸ ','çŽ„é¸Ÿè‡³','é›·ä¹ƒå‘å£°','å§‹ç”µ','æ¡å§‹åŽ','ç”°é¼ åŒ–ä¸ºé´½','è™¹å§‹è§','èå§‹ç”Ÿ','é¸£é¸ æ‹‚å¥‡ç¾½','æˆ´èƒœé™äºŽæ¡‘','è¼èˆé¸£','èš¯èš“å‡º','çŽ‹ç“œç”Ÿ','è‹¦èœç§€','é¡è‰æ­»','éº¦ç§‹è‡³','èž³èž‚ç”Ÿ','éµ™å§‹é¸£','åèˆŒæ— å£°','é¹¿è§’è§£','èœ©å§‹é¸£','åŠå¤ç”Ÿ','æ¸©é£Žè‡³','èŸ‹èŸ€å±…å£','é¹°å§‹æŒš','è…è‰ä¸ºè¤','åœŸæ¶¦æº½æš‘','å¤§é›¨è¡Œæ—¶','å‡‰é£Žè‡³','ç™½éœ²é™','å¯’è‰é¸£','é¹°ä¹ƒç¥­é¸Ÿ','å¤©åœ°å§‹è‚ƒ','ç¦¾ä¹ƒç™»','é¸¿é›æ¥','çŽ„é¸Ÿå½’','ç¾¤é¸Ÿå…»ç¾ž','é›·å§‹æ”¶å£°','è›°è™«å¯æˆ·','æ°´å§‹æ¶¸','é¸¿é›æ¥å®¾','é›€å…¥å¤§æ°´ä¸ºè›¤','èŠæœ‰é»„èŠ±','è±ºä¹ƒç¥­å…½','è‰æœ¨é»„è½','è›°è™«å’¸ä¿¯','æ°´å§‹å†°','åœ°å§‹å†»','é›‰å…¥å¤§æ°´ä¸ºèœƒ','è™¹è—ä¸è§','å¤©æ°”ä¸Šå‡åœ°æ°”ä¸‹é™','é—­å¡žè€Œæˆå†¬','é¹–é´ ä¸é¸£','è™Žå§‹äº¤','è”æŒºå‡º'];
  public static $GAN=['','ç”²','ä¹™','ä¸™','ä¸','æˆŠ','å·±','åºš','è¾›','å£¬','ç™¸'];
  public static $POSITION_XI=['','è‰®','ä¹¾','å¤','ç¦»','å·½','è‰®','ä¹¾','å¤','ç¦»','å·½'];
  public static $POSITION_YANG_GUI=['','å¤','å¤','å…‘','ä¹¾','è‰®','åŽ','ç¦»','è‰®','éœ‡','å·½'];
  public static $POSITION_YIN_GUI=['','è‰®','åŽ','ä¹¾','å…‘','å¤','å¤','è‰®','ç¦»','å·½','éœ‡'];
  public static $POSITION_FU=['','å·½','å·½','éœ‡','éœ‡','åŽ','ç¦»','å¤','å¤','ä¹¾','å…‘'];
  public static $POSITION_FU_2=['','åŽ','å¤','ä¹¾','å·½','è‰®','åŽ','å¤','ä¹¾','å·½','è‰®'];
  public static $POSITION_CAI=['','è‰®','è‰®','å¤','å¤','åŽ','åŽ','éœ‡','éœ‡','ç¦»','ç¦»'];
  public static $POSITION_TAI_SUI_YEAR= ['åŽ','è‰®','è‰®','éœ‡','å·½','å·½','ç¦»','å¤','å¤','å…‘','åŽ','åŽ'];
  public static $POSITION_GAN= ['éœ‡','éœ‡','ç¦»','ç¦»','ä¸­','ä¸­','å…‘','å…‘','åŽ','åŽ'];
  public static $POSITION_ZHI= ['åŽ','ä¸­','éœ‡','éœ‡','ä¸­','ç¦»','ç¦»','ä¸­','å…‘','å…‘','ä¸­','åŽ'];
  public static $POSITION_TAI_DAY=['å é—¨ç¢“ å¤–ä¸œå—','ç¢“ç£¨åŽ• å¤–ä¸œå—','åŽ¨ç¶ç‚‰ å¤–æ­£å—','ä»“åº“é—¨ å¤–æ­£å—','æˆ¿åºŠæ – å¤–æ­£å—','å é—¨åºŠ å¤–æ­£å—','å ç¢“ç£¨ å¤–æ­£å—','åŽ•ç¶åŽ¨ å¤–è¥¿å—','ä»“åº“ç‚‰ å¤–è¥¿å—','æˆ¿åºŠé—¨ å¤–è¥¿å—','é—¨ç¢“æ – å¤–è¥¿å—','ç¢“ç£¨åºŠ å¤–è¥¿å—','åŽ¨ç¶ç¢“ å¤–è¥¿å—','ä»“åº“åŽ• å¤–æ­£è¥¿','æˆ¿åºŠç‚‰ å¤–æ­£è¥¿','å å¤§é—¨ å¤–æ­£è¥¿','ç¢“ç£¨æ – å¤–æ­£è¥¿','åŽ¨æˆ¿åºŠ å¤–æ­£è¥¿','ä»“åº“ç¢“ å¤–è¥¿åŒ—','æˆ¿åºŠåŽ• å¤–è¥¿åŒ—','å é—¨ç‚‰ å¤–è¥¿åŒ—','é—¨ç¢“ç£¨ å¤–è¥¿åŒ—','åŽ¨ç¶æ – å¤–è¥¿åŒ—','ä»“åº“åºŠ å¤–è¥¿åŒ—','æˆ¿åºŠç¢“ å¤–æ­£åŒ—','å é—¨åŽ• å¤–æ­£åŒ—','ç¢“ç£¨ç‚‰ å¤–æ­£åŒ—','åŽ¨ç¶é—¨ å¤–æ­£åŒ—','ä»“åº“æ – å¤–æ­£åŒ—','å æˆ¿åºŠ æˆ¿å†…åŒ—','å é—¨ç¢“ æˆ¿å†…åŒ—','ç¢“ç£¨åŽ• æˆ¿å†…åŒ—','åŽ¨ç¶ç‚‰ æˆ¿å†…åŒ—','é—¨ä»“åº“ æˆ¿å†…åŒ—','åºŠæˆ¿æ – æˆ¿å†…ä¸­','å é—¨åºŠ æˆ¿å†…ä¸­','å ç¢“ç£¨ æˆ¿å†…å—','åŽ¨ç£¨åŽ• æˆ¿å†…å—','ä»“åº“ç‚‰ æˆ¿å†…å—','æˆ¿åºŠé—¨ æˆ¿å†…è¥¿','é—¨ç¢“æ – æˆ¿å†…ä¸œ','ç¢“ç£¨åºŠ æˆ¿å†…ä¸œ','åŽ¨ç¶ç¢“ æˆ¿å†…ä¸œ','ä»“åº“åŽ• æˆ¿å†…ä¸œ','æˆ¿åºŠç‚‰ æˆ¿å†…ä¸­','å å¤§é—¨ å¤–ä¸œåŒ—','ç¢“ç£¨æ – å¤–ä¸œåŒ—','åŽ¨ç¶åºŠ å¤–ä¸œåŒ—','ä»“åº“ç¢“ å¤–ä¸œåŒ—','æˆ¿åºŠåŽ• å¤–ä¸œåŒ—','å é—¨ç‚‰ å¤–ä¸œåŒ—','é—¨ç¢“ç£¨ å¤–æ­£ä¸œ','åŽ¨ç¶æ – å¤–æ­£ä¸œ','ä»“åº“åºŠ å¤–æ­£ä¸œ','æˆ¿åºŠç¢“ å¤–æ­£ä¸œ','å é—¨åŽ• å¤–æ­£ä¸œ','ç¢“ç£¨ç‚‰ å¤–ä¸œå—','åŽ¨ç¶é—¨ å¤–ä¸œå—','ä»“åº“æ – å¤–ä¸œå—','å æˆ¿åºŠ å¤–ä¸œå—'];
  public static $POSITION_TAI_MONTH=['å æˆ¿åºŠ','å æˆ·çª—','å é—¨å ‚','å åŽ¨ç¶','å æˆ¿åºŠ','å åºŠä»“','å ç¢“ç£¨','å åŽ•æˆ·','å é—¨æˆ¿','å æˆ¿åºŠ','å ç¶ç‚‰','å æˆ¿åºŠ'];
  public static $ZHI=['','å­','ä¸‘','å¯…','å¯','è¾°','å·³','åˆ','æœª','ç”³','é…‰','æˆŒ','äº¥'];
  public static $ZHI_XING=['','å»º','é™¤','æ»¡','å¹³','å®š','æ‰§','ç ´','å±','æˆ','æ”¶','å¼€','é—­'];
  public static $JIA_ZI=['ç”²å­','ä¹™ä¸‘','ä¸™å¯…','ä¸å¯','æˆŠè¾°','å·±å·³','åºšåˆ','è¾›æœª','å£¬ç”³','ç™¸é…‰','ç”²æˆŒ','ä¹™äº¥','ä¸™å­','ä¸ä¸‘','æˆŠå¯…','å·±å¯','åºšè¾°','è¾›å·³','å£¬åˆ','ç™¸æœª','ç”²ç”³','ä¹™é…‰','ä¸™æˆŒ','ä¸äº¥','æˆŠå­','å·±ä¸‘','åºšå¯…','è¾›å¯','å£¬è¾°','ç™¸å·³','ç”²åˆ','ä¹™æœª','ä¸™ç”³','ä¸é…‰','æˆŠæˆŒ','å·±äº¥','åºšå­','è¾›ä¸‘','å£¬å¯…','ç™¸å¯','ç”²è¾°','ä¹™å·³','ä¸™åˆ','ä¸æœª','æˆŠç”³','å·±é…‰','åºšæˆŒ','è¾›äº¥','å£¬å­','ç™¸ä¸‘','ç”²å¯…','ä¹™å¯','ä¸™è¾°','ä¸å·³','æˆŠåˆ','å·±æœª','åºšç”³','è¾›é…‰','å£¬æˆŒ','ç™¸äº¥'];
  public static $TIAN_SHEN=['','é’é¾™','æ˜Žå ‚','å¤©åˆ‘','æœ±é›€','é‡‘åŒ®','å¤©å¾·','ç™½è™Ž','çŽ‰å ‚','å¤©ç‰¢','çŽ„æ­¦','å¸å‘½','å‹¾é™ˆ'];
  public static $ZHI_TIAN_SHEN_OFFSET=['å­'=>4,'ä¸‘'=>2,'å¯…'=>0,'å¯'=>10,'è¾°'=>8,'å·³'=>6,'åˆ'=>4,'æœª'=>2,'ç”³'=>0,'é…‰'=>10,'æˆŒ'=>8,'äº¥'=>6];
  public static $TIAN_SHEN_TYPE=['é’é¾™'=>'é»„é“','æ˜Žå ‚'=>'é»„é“','é‡‘åŒ®'=>'é»„é“','å¤©å¾·'=>'é»„é“','çŽ‰å ‚'=>'é»„é“','å¸å‘½'=>'é»„é“','å¤©åˆ‘'=>'é»‘é“','æœ±é›€'=>'é»‘é“','ç™½è™Ž'=>'é»‘é“','å¤©ç‰¢'=>'é»‘é“','çŽ„æ­¦'=>'é»‘é“','å‹¾é™ˆ'=>'é»‘é“'];
  public static $TIAN_SHEN_TYPE_LUCK=['é»„é“'=>'å‰','é»‘é“'=>'å‡¶'];
  public static $PENGZU_GAN=['','ç”²ä¸å¼€ä»“è´¢ç‰©è€—æ•£','ä¹™ä¸æ ½æ¤åƒæ ªä¸é•¿','ä¸™ä¸ä¿®ç¶å¿…è§ç¾æ®ƒ','ä¸ä¸å‰ƒå¤´å¤´å¿…ç”Ÿç–®','æˆŠä¸å—ç”°ç”°ä¸»ä¸ç¥¥','å·±ä¸ç ´åˆ¸äºŒæ¯”å¹¶äº¡','åºšä¸ç»ç»œç»‡æœºè™šå¼ ','è¾›ä¸åˆé…±ä¸»äººä¸å°','å£¬ä¸æ³±æ°´æ›´éš¾æé˜²','ç™¸ä¸è¯è®¼ç†å¼±æ•Œå¼º'];
  public static $PENGZU_ZHI=['','å­ä¸é—®åœè‡ªæƒ¹ç¥¸æ®ƒ','ä¸‘ä¸å† å¸¦ä¸»ä¸è¿˜ä¹¡','å¯…ä¸ç¥­ç¥€ç¥žé¬¼ä¸å°','å¯ä¸ç©¿äº•æ°´æ³‰ä¸é¦™','è¾°ä¸å“­æ³£å¿…ä¸»é‡ä¸§','å·³ä¸è¿œè¡Œè´¢ç‰©ä¼è—','åˆä¸è‹«ç›–å±‹ä¸»æ›´å¼ ','æœªä¸æœè¯æ¯’æ°”å…¥è‚ ','ç”³ä¸å®‰åºŠé¬¼ç¥Ÿå…¥æˆ¿','é…‰ä¸ä¼šå®¢é†‰åé¢ ç‹‚','æˆŒä¸åƒçŠ¬ä½œæ€ªä¸ŠåºŠ','äº¥ä¸å«å¨¶ä¸åˆ©æ–°éƒŽ'];
  public static $NUMBER=['ã€‡','ä¸€','äºŒ','ä¸‰','å››','äº”','å…­','ä¸ƒ','å…«','ä¹','å','åä¸€','åäºŒ'];
  public static $MONTH=['','æ­£','äºŒ','ä¸‰','å››','äº”','å…­','ä¸ƒ','å…«','ä¹','å','å†¬','è…Š'];
  public static $SEASON=['','å­Ÿæ˜¥','ä»²æ˜¥','å­£æ˜¥','å­Ÿå¤','ä»²å¤','å­£å¤','å­Ÿç§‹','ä»²ç§‹','å­£ç§‹','å­Ÿå†¬','ä»²å†¬','å­£å†¬'];
  public static $SHENGXIAO=['','é¼ ','ç‰›','è™Ž','å…”','é¾™','è›‡','é©¬','ç¾Š','çŒ´','é¸¡','ç‹—','çŒª'];
  public static $DAY=['','åˆä¸€','åˆäºŒ','åˆä¸‰','åˆå››','åˆäº”','åˆå…­','åˆä¸ƒ','åˆå…«','åˆä¹','åˆå','åä¸€','åäºŒ','åä¸‰','åå››','åäº”','åå…­','åä¸ƒ','åå…«','åä¹','äºŒå','å»¿ä¸€','å»¿äºŒ','å»¿ä¸‰','å»¿å››','å»¿äº”','å»¿å…­','å»¿ä¸ƒ','å»¿å…«','å»¿ä¹','ä¸‰å'];
  public static $YUE_XIANG=['','æœ”','æ—¢æœ”','è›¾çœ‰æ–°','è›¾çœ‰æ–°','è›¾çœ‰','å¤•æœˆ','ä¸Šå¼¦','ä¸Šå¼¦','ä¹å¤œ','å®µ','å®µ','å®µ','æ¸ç›ˆå‡¸','å°æœ›','æœ›','æ—¢æœ›','ç«‹å¾…','å±…å¾…','å¯å¾…','æ›´å¾…','æ¸äºå‡¸','ä¸‹å¼¦','ä¸‹å¼¦','æœ‰æ˜Ž','æœ‰æ˜Ž','è›¾çœ‰æ®‹','è›¾çœ‰æ®‹','æ®‹','æ™“','æ™¦'];
  public static $XIU=['ç”³1'=>'æ¯•','ç”³2'=>'ç¿¼','ç”³3'=>'ç®•','ç”³4'=>'å¥Ž','ç”³5'=>'é¬¼','ç”³6'=>'æ°','ç”³0'=>'è™š','å­1'=>'æ¯•','å­2'=>'ç¿¼','å­3'=>'ç®•','å­4'=>'å¥Ž','å­5'=>'é¬¼','å­6'=>'æ°','å­0'=>'è™š','è¾°1'=>'æ¯•','è¾°2'=>'ç¿¼','è¾°3'=>'ç®•','è¾°4'=>'å¥Ž','è¾°5'=>'é¬¼','è¾°6'=>'æ°','è¾°0'=>'è™š','å·³1'=>'å±','å·³2'=>'è§œ','å·³3'=>'è½¸','å·³4'=>'æ–—','å·³5'=>'å¨„','å·³6'=>'æŸ³','å·³0'=>'æˆ¿','é…‰1'=>'å±','é…‰2'=>'è§œ','é…‰3'=>'è½¸','é…‰4'=>'æ–—','é…‰5'=>'å¨„','é…‰6'=>'æŸ³','é…‰0'=>'æˆ¿','ä¸‘1'=>'å±','ä¸‘2'=>'è§œ','ä¸‘3'=>'è½¸','ä¸‘4'=>'æ–—','ä¸‘5'=>'å¨„','ä¸‘6'=>'æŸ³','ä¸‘0'=>'æˆ¿','å¯…1'=>'å¿ƒ','å¯…2'=>'å®¤','å¯…3'=>'å‚','å¯…4'=>'è§’','å¯…5'=>'ç‰›','å¯…6'=>'èƒƒ','å¯…0'=>'æ˜Ÿ','åˆ1'=>'å¿ƒ','åˆ2'=>'å®¤','åˆ3'=>'å‚','åˆ4'=>'è§’','åˆ5'=>'ç‰›','åˆ6'=>'èƒƒ','åˆ0'=>'æ˜Ÿ','æˆŒ1'=>'å¿ƒ','æˆŒ2'=>'å®¤','æˆŒ3'=>'å‚','æˆŒ4'=>'è§’','æˆŒ5'=>'ç‰›','æˆŒ6'=>'èƒƒ','æˆŒ0'=>'æ˜Ÿ','äº¥1'=>'å¼ ','äº¥2'=>'å°¾','äº¥3'=>'å£','äº¥4'=>'äº•','äº¥5'=>'äº¢','äº¥6'=>'å¥³','äº¥0'=>'æ˜´','å¯1'=>'å¼ ','å¯2'=>'å°¾','å¯3'=>'å£','å¯4'=>'äº•','å¯5'=>'äº¢','å¯6'=>'å¥³','å¯0'=>'æ˜´','æœª1'=>'å¼ ','æœª2'=>'å°¾','æœª3'=>'å£','æœª4'=>'äº•','æœª5'=>'äº¢','æœª6'=>'å¥³','æœª0'=>'æ˜´'];
  //28æ˜Ÿå®¿ç©´ä½ å†œåŽ†ä¸­æ–‡æœˆ+æ•°å­—æ—¥ â†“
  public static $XXXW=['å…«27'=>'è§’','å…«28'=>'è§’','å…«29'=>'è§’','å…«30'=>'è§’','ä¹1'=>'è§’','ä¹2'=>'è§’','ä¹3'=>'è§’','ä¹4'=>'è§’','ä¹5'=>'è§’','ä¹6'=>'è§’','ä¹7'=>'è§’','ä¹8'=>'è§’','ä¹9'=>'è§’','ä¹10'=>'è§’','ä¹11'=>'è§’','ä¹12'=>'è§’','ä¹13'=>'è§’','ä¹14'=>'è§’','ä¹15'=>'è§’','ä¹16'=>'è§’','ä¹17'=>'è§’','ä¹18'=>'è§’','ä¹19'=>'è§’','ä¹20'=>'è§’','ä¹21'=>'è§’','ä¹22'=>'è§’','ä¹23'=>'äº¢','ä¹24'=>'äº¢','ä¹25'=>'äº¢','ä¹26'=>'äº¢','ä¹27'=>'äº¢','ä¹28'=>'äº¢','ä¹29'=>'äº¢','ä¹30'=>'äº¢','å1'=>'äº¢','å2'=>'äº¢','å3'=>'äº¢','å4'=>'äº¢','å5'=>'äº¢','å6'=>'äº¢','å7'=>'äº¢','å8'=>'æ°','å9'=>'æ°','å10'=>'æ°','å11'=>'æ°','å12'=>'æ°','å13'=>'æ°','å14'=>'æ°','å15'=>'æ°','å16'=>'æ°','å17'=>'æ°','å18'=>'æ°','å19'=>'æ°','å20'=>'æ°','å21'=>'æ°','å22'=>'æ°','å23'=>'æ°','å24'=>'æˆ¿','å25'=>'æˆ¿','å26'=>'æˆ¿','å27'=>'æˆ¿','å28'=>'æˆ¿','å29'=>'æˆ¿','å30'=>'æˆ¿','å†¬1'=>'æˆ¿','å†¬2'=>'æˆ¿','å†¬3'=>'å¿ƒ','å†¬4'=>'å¿ƒ','å†¬5'=>'å¿ƒ','å†¬6'=>'å¿ƒ','å†¬7'=>'å¿ƒ','å†¬8'=>'å¿ƒ','å†¬9'=>'å¿ƒ','å†¬10'=>'å¿ƒ','å†¬11'=>'å¿ƒ','å†¬12'=>'å¿ƒ','å†¬13'=>'å°¾','å†¬14'=>'å°¾','å†¬15'=>'å°¾','å†¬16'=>'å°¾','å†¬17'=>'å°¾','å†¬18'=>'å°¾','å†¬19'=>'å°¾','å†¬20'=>'å°¾','å†¬21'=>'å°¾','å†¬22'=>'å°¾','å†¬23'=>'ç®•','å†¬24'=>'ç®•','å†¬25'=>'ç®•','å†¬26'=>'ç®•','å†¬27'=>'ç®•','å†¬28'=>'ç®•','å†¬29'=>'ç®•','å†¬30'=>'ç®•','è…Š1'=>'ç®•','è…Š2'=>'ç®•','è…Š3'=>'ç®•','è…Š4'=>'ç®•','è…Š5'=>'ç®•','è…Š6'=>'ç®•','è…Š7'=>'ç®•','è…Š8'=>'æ–—','è…Š9'=>'æ–—','è…Š10'=>'æ–—','è…Š11'=>'æ–—','è…Š12'=>'æ–—','è…Š13'=>'æ–—','è…Š14'=>'æ–—','è…Š15'=>'æ–—','è…Š16'=>'æ–—','è…Š17'=>'æ–—','è…Š18'=>'æ–—','è…Š19'=>'æ–—','è…Š20'=>'æ–—','è…Š21'=>'æ–—','è…Š22'=>'ç‰›','è…Š23'=>'ç‰›','è…Š24'=>'ç‰›','è…Š25'=>'ç‰›','è…Š26'=>'ç‰›','è…Š27'=>'ç‰›','è…Š28'=>'ç‰›','è…Š29'=>'ç‰›','è…Š30'=>'ç‰›','æ­£1'=>'ç‰›','æ­£2'=>'ç‰›','æ­£3'=>'ç‰›','æ­£4'=>'ç‰›','æ­£5'=>'ç‰›','æ­£6'=>'å¥³','æ­£7'=>'å¥³','æ­£8'=>'å¥³','æ­£9'=>'å¥³','æ­£10'=>'å¥³','æ­£12'=>'å¥³','æ­£13'=>'å¥³','æ­£14'=>'å¥³','æ­£15'=>'å¥³','æ­£16'=>'å¥³','æ­£17'=>'å¥³','æ­£18'=>'å¥³','æ­£19'=>'å¥³','æ­£20'=>'è™š','æ­£21'=>'è™š','æ­£22'=>'è™š','æ­£23'=>'è™š','æ­£24'=>'è™š','æ­£25'=>'è™š','æ­£26'=>'è™š','æ­£27'=>'è™š','æ­£28'=>'è™š','æ­£29'=>'è™š','æ­£30'=>'å±','äºŒ1'=>'å±','äºŒ2'=>'å±','äºŒ3'=>'å±','äºŒ4'=>'å±','äºŒ5'=>'å±','äºŒ6'=>'å±','äºŒ7'=>'å±','äºŒ8'=>'å±','äºŒ9'=>'å®¤','äºŒ10'=>'å®¤','äºŒ11'=>'å®¤','äºŒ12'=>'å®¤','äºŒ13'=>'å®¤','äºŒ14'=>'å®¤','äºŒ15'=>'å®¤','äºŒ16'=>'å®¤','äºŒ17'=>'å®¤','äºŒ18'=>'å®¤','äºŒ19'=>'å£','äºŒ20'=>'å£','äºŒ21'=>'å£','äºŒ22'=>'å£','äºŒ23'=>'å£','äºŒ24'=>'å£','äºŒ25'=>'å£','äºŒ26'=>'å£','äºŒ27'=>'å£','äºŒ28'=>'å£','äºŒ29'=>'å£','äºŒ30'=>'å£','ä¸‰1'=>'å£','ä¸‰2'=>'å£','ä¸‰3'=>'å£','ä¸‰4'=>'å£','ä¸‰5'=>'å£','ä¸‰6'=>'å¥Ž','ä¸‰7'=>'å¥Ž','ä¸‰8'=>'å¥Ž','ä¸‰9'=>'å¥Ž','ä¸‰10'=>'å¥Ž','ä¸‰11'=>'å¥Ž','ä¸‰12'=>'å¥Ž','ä¸‰13'=>'å¥Ž','ä¸‰14'=>'å¥Ž','ä¸‰15'=>'å¥Ž','ä¸‰16'=>'å¥Ž','ä¸‰17'=>'å¥Ž','ä¸‰18'=>'å¥Ž','ä¸‰19'=>'å¥Ž','ä¸‰20'=>'å¥Ž','ä¸‰21'=>'å¨„','ä¸‰22'=>'å¨„','ä¸‰23'=>'å¨„','ä¸‰24'=>'å¨„','ä¸‰25'=>'å¨„','ä¸‰26'=>'å¨„','ä¸‰27'=>'å¨„','ä¸‰28'=>'å¨„','ä¸‰29'=>'å¨„','ä¸‰30'=>'å¨„','å››1'=>'å¨„','å››2'=>'å¨„','å››3'=>'å¨„','å››4'=>'å¨„','å››5'=>'èƒƒ','å››6'=>'èƒƒ','å››7'=>'èƒƒ','å››8'=>'èƒƒ','å››9'=>'èƒƒ','å››10'=>'èƒƒ','å››11'=>'èƒƒ','å››12'=>'èƒƒ','å››13'=>'èƒƒ','å››14'=>'èƒƒ','å››15'=>'èƒƒ','å››16'=>'èƒƒ','å››17'=>'èƒƒ','å››18'=>'èƒƒ','å››19'=>'èƒƒ','å››20'=>'æ˜´','å››21'=>'æ˜´','å››22'=>'æ˜´','å››23'=>'æ˜´','å››24'=>'æ˜´','å››25'=>'æ˜´','å››26'=>'æ˜´','å››27'=>'æ˜´','å››28'=>'æ˜´','å››29'=>'æ˜´','å››30'=>'æ˜´','äº”1'=>'æ¯•','äº”2'=>'æ¯•','äº”3'=>'æ¯•','äº”4'=>'æ¯•','äº”5'=>'æ¯•','äº”6'=>'æ¯•','äº”7'=>'æ¯•','äº”8'=>'æ¯•','äº”9'=>'æ¯•','äº”10'=>'æ¯•','äº”11'=>'è§œ','äº”12'=>'è§œ','äº”13'=>'è§œ','äº”14'=>'è§œ','äº”15'=>'è§œ','äº”16'=>'è§œ','äº”17'=>'è§œ','äº”18'=>'è§œ','äº”19'=>'è§œ','äº”20'=>'è§œ','äº”21'=>'å‚','äº”22'=>'å‚','äº”23'=>'å‚','äº”24'=>'å‚','äº”25'=>'å‚','äº”26'=>'å‚','äº”27'=>'å‚','äº”28'=>'å‚','äº”29'=>'å‚','äº”30'=>'å‚','å…­1'=>'å‚','å…­2'=>'å‚','å…­3'=>'å‚','å…­4'=>'å‚','å…­5'=>'å‚','å…­6'=>'äº•','å…­7'=>'äº•','å…­8'=>'äº•','å…­9'=>'äº•','å…­10'=>'äº•','å…­11'=>'äº•','å…­12'=>'äº•','å…­13'=>'äº•','å…­14'=>'äº•','å…­15'=>'äº•','å…­16'=>'äº•','å…­17'=>'äº•','å…­18'=>'äº•','å…­19'=>'äº•','å…­20'=>'äº•','å…­21'=>'äº•','å…­22'=>'é¬¼','å…­23'=>'é¬¼','å…­24'=>'é¬¼','å…­25'=>'é¬¼','å…­26'=>'é¬¼','å…­27'=>'é¬¼','å…­28'=>'é¬¼','å…­29'=>'é¬¼','å…­30'=>'é¬¼','ä¸ƒ1'=>'é¬¼','ä¸ƒ2'=>'é¬¼','ä¸ƒ3'=>'é¬¼','ä¸ƒ4'=>'é¬¼','ä¸ƒ5'=>'é¬¼','ä¸ƒ6'=>'é¬¼','ä¸ƒ7'=>'é¬¼','ä¸ƒ8'=>'æŸ³','ä¸ƒ9'=>'æŸ³','ä¸ƒ10'=>'æŸ³','ä¸ƒ11'=>'æŸ³','ä¸ƒ12'=>'æŸ³','ä¸ƒ13'=>'æŸ³','ä¸ƒ14'=>'æŸ³','ä¸ƒ15'=>'æŸ³','ä¸ƒ16'=>'æŸ³','ä¸ƒ17'=>'æŸ³','ä¸ƒ18'=>'æŸ³','ä¸ƒ19'=>'æŸ³','ä¸ƒ20'=>'æŸ³','ä¸ƒ21'=>'æŸ³','ä¸ƒ22'=>'æŸ³','ä¸ƒ23'=>'æ˜Ÿ','ä¸ƒ24'=>'æ˜Ÿ','ä¸ƒ25'=>'æ˜Ÿ','ä¸ƒ26'=>'æ˜Ÿ','ä¸ƒ27'=>'æ˜Ÿ','ä¸ƒ28'=>'æ˜Ÿ','ä¸ƒ29'=>'æ˜Ÿ','ä¸ƒ30'=>'æ˜Ÿ','å…«1'=>'æ˜Ÿ','å…«2'=>'å¼ ','å…«2'=>'å¼ ','å…«3'=>'å¼ ','å…«4'=>'å¼ ','å…«5'=>'å¼ ','å…«6'=>'å¼ ','å…«7'=>'å¼ ','å…«8'=>'å¼ ','å…«9'=>'å¼ ','å…«10'=>'å¼ ','å…«11'=>'å¼ ','å…«12'=>'ç¿¼','å…«13'=>'ç¿¼','å…«14'=>'ç¿¼','å…«15'=>'ç¿¼','å…«16'=>'ç¿¼','å…«17'=>'ç¿¼','å…«18'=>'ç¿¼','å…«19'=>'ç¿¼','å…«20'=>'ç¿¼','å…«21'=>'ç¿¼','å…«22'=>'ç¿¼','å…«23'=>'è½¸','å…«24'=>'è½¸','å…«25'=>'è½¸','å…«26'=>'è½¸'];
  //çµé¾Ÿå…«æ³•æ—¥å¹²æ”¯+æ—¶æ”¯ â†“
  public static $LGBF=['ç”²å­å­'=>'8','ç”²å­ä¸‘'=>'6','ç”²å­å¯…'=>'4','ç”²å­å¯'=>'2','ç”²å­è¾°'=>'9','ç”²å­å·³'=>'3','ç”²å­åˆ'=>'7','ç”²å­æœª'=>'5','ç”²å­ç”³'=>'3','ç”²å­é…‰'=>'1','ç”²å­æˆŒ'=>'4','ç”²å­äº¥'=>'2','ç”²æˆŒå­'=>'2','ç”²æˆŒä¸‘'=>'9','ç”²æˆŒå¯…'=>'7','ç”²æˆŒå¯'=>'5','ç”²æˆŒè¾°'=>'3','ç”²æˆŒå·³'=>'6','ç”²æˆŒåˆ'=>'1','ç”²æˆŒæœª'=>'8','ç”²æˆŒç”³'=>'6','ç”²æˆŒé…‰'=>'4','ç”²æˆŒæˆŒ'=>'7','ç”²æˆŒäº¥'=>'5','ç”²ç”³å­'=>'1','ç”²ç”³ä¸‘'=>'8','ç”²ç”³å¯…'=>'6','ç”²ç”³å¯'=>'4','ç”²ç”³è¾°'=>'2','ç”²ç”³å·³'=>'5','ç”²ç”³åˆ'=>'9','ç”²ç”³æœª'=>'7','ç”²ç”³ç”³'=>'5','ç”²ç”³é…‰'=>'3','ç”²ç”³æˆŒ'=>'6','ç”²ç”³äº¥'=>'4','ç”²åˆå­'=>'8','ç”²åˆä¸‘'=>'6','ç”²åˆå¯…'=>'4','ç”²åˆå¯'=>'2','ç”²åˆè¾°'=>'9','ç”²åˆå·³'=>'3','ç”²åˆåˆ'=>'7','ç”²åˆæœª'=>'5','ç”²åˆç”³'=>'3','ç”²åˆé…‰'=>'1','ç”²åˆæˆŒ'=>'4','ç”²åˆäº¥'=>'2','ç”²è¾°å­'=>'2','ç”²è¾°ä¸‘'=>'9','ç”²è¾°å¯…'=>'7','ç”²è¾°å¯'=>'5','ç”²è¾°è¾°'=>'3','ç”²è¾°å·³'=>'6','ç”²è¾°åˆ'=>'1','ç”²è¾°æœª'=>'8','ç”²è¾°ç”³'=>'6','ç”²è¾°é…‰'=>'4','ç”²è¾°æˆŒ'=>'7','ç”²è¾°äº¥'=>'5','ç”²å¯…å­'=>'9','ç”²å¯…ä¸‘'=>'7','ç”²å¯…å¯…'=>'5','ç”²å¯…å¯'=>'3','ç”²å¯…è¾°'=>'1','ç”²å¯…å·³'=>'4','ç”²å¯…åˆ'=>'8','ç”²å¯…æœª'=>'6','ç”²å¯…ç”³'=>'4','ç”²å¯…é…‰'=>'2','ç”²å¯…æˆŒ'=>'5','ç”²å¯…äº¥'=>'3','ä¹™ä¸‘å­'=>'5','ä¹™ä¸‘ä¸‘'=>'3','ä¹™ä¸‘å¯…'=>'1','ä¹™ä¸‘å¯'=>'4','ä¹™ä¸‘è¾°'=>'2','ä¹™ä¸‘å·³'=>'6','ä¹™ä¸‘åˆ'=>'4','ä¹™ä¸‘æœª'=>'2','ä¹™ä¸‘ç”³'=>'5','ä¹™ä¸‘é…‰'=>'3','ä¹™ä¸‘æˆŒ'=>'1','ä¹™ä¸‘äº¥'=>'5','ä¹™äº¥å­'=>'2','ä¹™äº¥ä¸‘'=>'6','ä¹™äº¥å¯…'=>'4','ä¹™äº¥å¯'=>'1','ä¹™äº¥è¾°'=>'5','ä¹™äº¥å·³'=>'3','ä¹™äº¥åˆ'=>'1','ä¹™äº¥æœª'=>'5','ä¹™äº¥ç”³'=>'2','ä¹™äº¥é…‰'=>'6','ä¹™äº¥æˆŒ'=>'4','ä¹™äº¥äº¥'=>'2','ä¹™é…‰å­'=>'4','ä¹™é…‰ä¸‘'=>'2','ä¹™é…‰å¯…'=>'6','ä¹™é…‰å¯'=>'3','ä¹™é…‰è¾°'=>'1','ä¹™é…‰å·³'=>'5','ä¹™é…‰åˆ'=>'3','ä¹™é…‰æœª'=>'1','ä¹™é…‰ç”³'=>'4','ä¹™é…‰é…‰'=>'2','ä¹™é…‰æˆŒ'=>'6','ä¹™é…‰äº¥'=>'4','ä¹™æœªå­'=>'5','ä¹™æœªä¸‘'=>'3','ä¹™æœªå¯…'=>'1','ä¹™æœªå¯'=>'4','ä¹™æœªè¾°'=>'2','ä¹™æœªå·³'=>'6','ä¹™æœªåˆ'=>'4','ä¹™æœªæœª'=>'2','ä¹™æœªç”³'=>'5','ä¹™æœªé…‰'=>'3','ä¹™æœªæˆŒ'=>'1','ä¹™æœªäº¥'=>'5','ä¹™å·³å­'=>'2','ä¹™å·³ä¸‘'=>'6','ä¹™å·³å¯…'=>'4','ä¹™å·³å¯'=>'1','ä¹™å·³è¾°'=>'5','ä¹™å·³å·³'=>'3','ä¹™å·³åˆ'=>'1','ä¹™å·³æœª'=>'5','ä¹™å·³ç”³'=>'2','ä¹™å·³é…‰'=>'6','ä¹™å·³æˆŒ'=>'4','ä¹™å·³äº¥'=>'2','ä¹™å¯å­'=>'3','ä¹™å¯ä¸‘'=>'1','ä¹™å¯å¯…'=>'5','ä¹™å¯å¯'=>'2','ä¹™å¯è¾°'=>'6','ä¹™å¯å·³'=>'4','ä¹™å¯åˆ'=>'2','ä¹™å¯æœª'=>'6','ä¹™å¯ç”³'=>'3','ä¹™å¯é…‰'=>'1','ä¹™å¯æˆŒ'=>'5','ä¹™å¯äº¥'=>'3','ä¸™å¯…å­'=>'2','ä¸™å¯…ä¸‘'=>'5','ä¸™å¯…å¯…'=>'3','ä¸™å¯…å¯'=>'1','ä¸™å¯…è¾°'=>'8','ä¸™å¯…å·³'=>'6','ä¸™å¯…åˆ'=>'6','ä¸™å¯…æœª'=>'4','ä¸™å¯…ç”³'=>'2','ä¸™å¯…é…‰'=>'9','ä¸™å¯…æˆŒ'=>'7','ä¸™å¯…äº¥'=>'1','ä¸™å­å­'=>'1','ä¸™å­ä¸‘'=>'4','ä¸™å­å¯…'=>'2','ä¸™å­å¯'=>'9','ä¸™å­è¾°'=>'7','ä¸™å­å·³'=>'5','ä¸™å­åˆ'=>'5','ä¸™å­æœª'=>'3','ä¸™å­ç”³'=>'1','ä¸™å­é…‰'=>'8','ä¸™å­æˆŒ'=>'6','ä¸™å­äº¥'=>'9','ä¸™æˆŒå­'=>'4','ä¸™æˆŒä¸‘'=>'7','ä¸™æˆŒå¯…'=>'5','ä¸™æˆŒå¯'=>'3','ä¸™æˆŒè¾°'=>'1','ä¸™æˆŒå·³'=>'8','ä¸™æˆŒåˆ'=>'8','ä¸™æˆŒæœª'=>'6','ä¸™æˆŒç”³'=>'4','ä¸™æˆŒé…‰'=>'2','ä¸™æˆŒæˆŒ'=>'9','ä¸™æˆŒäº¥'=>'3','ä¸™ç”³å­'=>'3','ä¸™ç”³ä¸‘'=>'6','ä¸™ç”³å¯…'=>'4','ä¸™ç”³å¯'=>'2','ä¸™ç”³è¾°'=>'9','ä¸™ç”³å·³'=>'7','ä¸™ç”³åˆ'=>'7','ä¸™ç”³æœª'=>'5','ä¸™ç”³ç”³'=>'3','ä¸™ç”³é…‰'=>'1','ä¸™ç”³æˆŒ'=>'8','ä¸™ç”³äº¥'=>'2','ä¸™åˆå­'=>'1','ä¸™åˆä¸‘'=>'4','ä¸™åˆå¯…'=>'2','ä¸™åˆå¯'=>'9','ä¸™åˆè¾°'=>'7','ä¸™åˆå·³'=>'5','ä¸™åˆåˆ'=>'5','ä¸™åˆæœª'=>'3','ä¸™åˆç”³'=>'1','ä¸™åˆé…‰'=>'8','ä¸™åˆæˆŒ'=>'6','ä¸™åˆäº¥'=>'9','ä¸™è¾°å­'=>'4','ä¸™è¾°ä¸‘'=>'7','ä¸™è¾°å¯…'=>'5','ä¸™è¾°å¯'=>'3','ä¸™è¾°è¾°'=>'1','ä¸™è¾°å·³'=>'8','ä¸™è¾°åˆ'=>'8','ä¸™è¾°æœª'=>'6','ä¸™è¾°ç”³'=>'4','ä¸™è¾°é…‰'=>'2','ä¸™è¾°æˆŒ'=>'9','ä¸™è¾°äº¥'=>'3','ä¸å¯å­'=>'3','ä¸å¯ä¸‘'=>'1','ä¸å¯å¯…'=>'5','ä¸å¯å¯'=>'3','ä¸å¯è¾°'=>'6','ä¸å¯å·³'=>'4','ä¸å¯åˆ'=>'2','ä¸å¯æœª'=>'6','ä¸å¯ç”³'=>'4','ä¸å¯é…‰'=>'1','ä¸å¯æˆŒ'=>'5','ä¸å¯äº¥'=>'3','ä¸ä¸‘å­'=>'5','ä¸ä¸‘ä¸‘'=>'3','ä¸ä¸‘å¯…'=>'1','ä¸ä¸‘å¯'=>'5','ä¸ä¸‘è¾°'=>'2','ä¸ä¸‘å·³'=>'6','ä¸ä¸‘åˆ'=>'4','ä¸ä¸‘æœª'=>'2','ä¸ä¸‘ç”³'=>'6','ä¸ä¸‘é…‰'=>'3','ä¸ä¸‘æˆŒ'=>'1','ä¸ä¸‘äº¥'=>'5','ä¸äº¥å­'=>'2','ä¸äº¥ä¸‘'=>'6','ä¸äº¥å¯…'=>'4','ä¸äº¥å¯'=>'2','ä¸äº¥è¾°'=>'5','ä¸äº¥å·³'=>'3','ä¸äº¥åˆ'=>'1','ä¸äº¥æœª'=>'5','ä¸äº¥ç”³'=>'3','ä¸äº¥é…‰'=>'6','ä¸äº¥æˆŒ'=>'4','ä¸äº¥äº¥'=>'2','ä¸é…‰å­'=>'4','ä¸é…‰ä¸‘'=>'2','ä¸é…‰å¯…'=>'6','ä¸é…‰å¯'=>'4','ä¸é…‰è¾°'=>'1','ä¸é…‰å·³'=>'5','ä¸é…‰åˆ'=>'3','ä¸é…‰æœª'=>'1','ä¸é…‰ç”³'=>'5','ä¸é…‰é…‰'=>'2','ä¸é…‰æˆŒ'=>'6','ä¸é…‰äº¥'=>'4','ä¸æœªå­'=>'5','ä¸æœªä¸‘'=>'3','ä¸æœªå¯…'=>'1','ä¸æœªå¯'=>'5','ä¸æœªè¾°'=>'2','ä¸æœªå·³'=>'6','ä¸æœªåˆ'=>'4','ä¸æœªæœª'=>'2','ä¸æœªç”³'=>'6','ä¸æœªé…‰'=>'3','ä¸æœªæˆŒ'=>'1','ä¸æœªäº¥'=>'5','ä¸å·³å­'=>'2','ä¸å·³ä¸‘'=>'6','ä¸å·³å¯…'=>'4','ä¸å·³å¯'=>'2','ä¸å·³è¾°'=>'5','ä¸å·³å·³'=>'3','ä¸å·³åˆ'=>'1','ä¸å·³æœª'=>'5','ä¸å·³ç”³'=>'3','ä¸å·³é…‰'=>'6','ä¸å·³æˆŒ'=>'4','ä¸å·³äº¥'=>'2','æˆŠè¾°å­'=>'5','æˆŠè¾°ä¸‘'=>'3','æˆŠè¾°å¯…'=>'6','æˆŠè¾°å¯'=>'4','æˆŠè¾°è¾°'=>'2','æˆŠè¾°å·³'=>'9','æˆŠè¾°åˆ'=>'4','æˆŠè¾°æœª'=>'7','æˆŠè¾°ç”³'=>'5','æˆŠè¾°é…‰'=>'3','æˆŠè¾°æˆŒ'=>'1','æˆŠè¾°äº¥'=>'8','æˆŠå¯…å­'=>'3','æˆŠå¯…ä¸‘'=>'1','æˆŠå¯…å¯…'=>'4','æˆŠå¯…å¯'=>'2','æˆŠå¯…è¾°'=>'9','æˆŠå¯…å·³'=>'7','æˆŠå¯…åˆ'=>'2','æˆŠå¯…æœª'=>'5','æˆŠå¯…ç”³'=>'3','æˆŠå¯…é…‰'=>'1','æˆŠå¯…æˆŒ'=>'8','æˆŠå¯…äº¥'=>'6','æˆŠå­å­'=>'2','æˆŠå­ä¸‘'=>'9','æˆŠå­å¯…'=>'3','æˆŠå­å¯'=>'1','æˆŠå­è¾°'=>'8','æˆŠå­å·³'=>'6','æˆŠå­åˆ'=>'1','æˆŠå­æœª'=>'4','æˆŠå­ç”³'=>'2','æˆŠå­é…‰'=>'9','æˆŠå­æˆŒ'=>'7','æˆŠå­äº¥'=>'5','æˆŠæˆŒå­'=>'5','æˆŠæˆŒä¸‘'=>'3','æˆŠæˆŒå¯…'=>'6','æˆŠæˆŒå¯'=>'4','æˆŠæˆŒè¾°'=>'2','æˆŠæˆŒå·³'=>'9','æˆŠæˆŒåˆ'=>'4','æˆŠæˆŒæœª'=>'7','æˆŠæˆŒç”³'=>'5','æˆŠæˆŒé…‰'=>'3','æˆŠæˆŒæˆŒ'=>'1','æˆŠæˆŒäº¥'=>'8','æˆŠç”³å­'=>'4','æˆŠç”³ä¸‘'=>'2','æˆŠç”³å¯…'=>'5','æˆŠç”³å¯'=>'3','æˆŠç”³è¾°'=>'1','æˆŠç”³å·³'=>'8','æˆŠç”³åˆ'=>'3','æˆŠç”³æœª'=>'6','æˆŠç”³ç”³'=>'4','æˆŠç”³é…‰'=>'2','æˆŠç”³æˆŒ'=>'9','æˆŠç”³äº¥'=>'7','æˆŠåˆå­'=>'2','æˆŠåˆä¸‘'=>'9','æˆŠåˆå¯…'=>'3','æˆŠåˆå¯'=>'1','æˆŠåˆè¾°'=>'8','æˆŠåˆå·³'=>'6','æˆŠåˆåˆ'=>'1','æˆŠåˆæœª'=>'4','æˆŠåˆç”³'=>'2','æˆŠåˆé…‰'=>'9','æˆŠåˆæˆŒ'=>'7','æˆŠåˆäº¥'=>'5','å·±å·³å­'=>'5','å·±å·³ä¸‘'=>'3','å·±å·³å¯…'=>'1','å·±å·³å¯'=>'5','å·±å·³è¾°'=>'3','å·±å·³å·³'=>'6','å·±å·³åˆ'=>'4','å·±å·³æœª'=>'2','å·±å·³ç”³'=>'6','å·±å·³é…‰'=>'4','å·±å·³æˆŒ'=>'1','å·±å·³äº¥'=>'5','å·±å¯å­'=>'6','å·±å¯ä¸‘'=>'4','å·±å¯å¯…'=>'2','å·±å¯å¯'=>'6','å·±å¯è¾°'=>'4','å·±å¯å·³'=>'1','å·±å¯åˆ'=>'5','å·±å¯æœª'=>'3','å·±å¯ç”³'=>'1','å·±å¯é…‰'=>'5','å·±å¯æˆŒ'=>'2','å·±å¯äº¥'=>'6','å·±ä¸‘å­'=>'2','å·±ä¸‘ä¸‘'=>'6','å·±ä¸‘å¯…'=>'4','å·±ä¸‘å¯'=>'2','å·±ä¸‘è¾°'=>'6','å·±ä¸‘å·³'=>'3','å·±ä¸‘åˆ'=>'1','å·±ä¸‘æœª'=>'5','å·±ä¸‘ç”³'=>'3','å·±ä¸‘é…‰'=>'1','å·±ä¸‘æˆŒ'=>'4','å·±ä¸‘äº¥'=>'2','å·±äº¥å­'=>'5','å·±äº¥ä¸‘'=>'3','å·±äº¥å¯…'=>'1','å·±äº¥å¯'=>'5','å·±äº¥è¾°'=>'3','å·±äº¥å·³'=>'6','å·±äº¥åˆ'=>'4','å·±äº¥æœª'=>'2','å·±äº¥ç”³'=>'6','å·±äº¥é…‰'=>'4','å·±äº¥æˆŒ'=>'1','å·±äº¥äº¥'=>'5','å·±é…‰å­'=>'1','å·±é…‰ä¸‘'=>'5','å·±é…‰å¯…'=>'3','å·±é…‰å¯'=>'1','å·±é…‰è¾°'=>'5','å·±é…‰å·³'=>'2','å·±é…‰åˆ'=>'6','å·±é…‰æœª'=>'4','å·±é…‰ç”³'=>'2','å·±é…‰é…‰'=>'6','å·±é…‰æˆŒ'=>'3','å·±é…‰äº¥'=>'1','å·±æœªå­'=>'2','å·±æœªä¸‘'=>'6','å·±æœªå¯…'=>'4','å·±æœªå¯'=>'2','å·±æœªè¾°'=>'6','å·±æœªå·³'=>'3','å·±æœªåˆ'=>'1','å·±æœªæœª'=>'5','å·±æœªç”³'=>'3','å·±æœªé…‰'=>'1','å·±æœªæˆŒ'=>'4','å·±æœªäº¥'=>'2','åºšåˆå­'=>'5','åºšåˆä¸‘'=>'3','åºšåˆå¯…'=>'1','åºšåˆå¯'=>'4','åºšåˆè¾°'=>'2','åºšåˆå·³'=>'9','åºšåˆåˆ'=>'4','åºšåˆæœª'=>'2','åºšåˆç”³'=>'5','åºšåˆé…‰'=>'3','åºšåˆæˆŒ'=>'1','åºšåˆäº¥'=>'8','åºšè¾°å­'=>'8','åºšè¾°ä¸‘'=>'6','åºšè¾°å¯…'=>'4','åºšè¾°å¯'=>'7','åºšè¾°è¾°'=>'5','åºšè¾°å·³'=>'3','åºšè¾°åˆ'=>'7','åºšè¾°æœª'=>'5','åºšè¾°ç”³'=>'8','åºšè¾°é…‰'=>'6','åºšè¾°æˆŒ'=>'4','åºšè¾°äº¥'=>'2','åºšå¯…å­'=>'6','åºšå¯…ä¸‘'=>'4','åºšå¯…å¯…'=>'2','åºšå¯…å¯'=>'5','åºšå¯…è¾°'=>'3','åºšå¯…å·³'=>'1','åºšå¯…åˆ'=>'5','åºšå¯…æœª'=>'3','åºšå¯…ç”³'=>'6','åºšå¯…é…‰'=>'4','åºšå¯…æˆŒ'=>'2','åºšå¯…äº¥'=>'9','åºšå­å­'=>'5','åºšå­ä¸‘'=>'3','åºšå­å¯…'=>'1','åºšå­å¯'=>'4','åºšå­è¾°'=>'2','åºšå­å·³'=>'9','åºšå­åˆ'=>'4','åºšå­æœª'=>'2','åºšå­ç”³'=>'5','åºšå­é…‰'=>'3','åºšå­æˆŒ'=>'1','åºšå­äº¥'=>'8','åºšæˆŒå­'=>'8','åºšæˆŒä¸‘'=>'6','åºšæˆŒå¯…'=>'4','åºšæˆŒå¯'=>'7','åºšæˆŒè¾°'=>'5','åºšæˆŒå·³'=>'3','åºšæˆŒåˆ'=>'7','åºšæˆŒæœª'=>'5','åºšæˆŒç”³'=>'8','åºšæˆŒé…‰'=>'6','åºšæˆŒæˆŒ'=>'4','åºšæˆŒäº¥'=>'2','åºšç”³å­'=>'7','åºšç”³ä¸‘'=>'5','åºšç”³å¯…'=>'3','åºšç”³å¯'=>'6','åºšç”³è¾°'=>'4','åºšç”³å·³'=>'2','åºšç”³åˆ'=>'6','åºšç”³æœª'=>'4','åºšç”³ç”³'=>'7','åºšç”³é…‰'=>'5','åºšç”³æˆŒ'=>'3','åºšç”³äº¥'=>'1','è¾›æœªå­'=>'1','è¾›æœªä¸‘'=>'4','è¾›æœªå¯…'=>'2','è¾›æœªå¯'=>'6','è¾›æœªè¾°'=>'4','è¾›æœªå·³'=>'2','è¾›æœªåˆ'=>'5','è¾›æœªæœª'=>'3','è¾›æœªç”³'=>'1','è¾›æœªé…‰'=>'5','è¾›æœªæˆŒ'=>'3','è¾›æœªäº¥'=>'6','è¾›å·³å­'=>'4','è¾›å·³ä¸‘'=>'1','è¾›å·³å¯…'=>'5','è¾›å·³å¯'=>'3','è¾›å·³è¾°'=>'1','è¾›å·³å·³'=>'5','è¾›å·³åˆ'=>'2','è¾›å·³æœª'=>'6','è¾›å·³ç”³'=>'4','è¾›å·³é…‰'=>'2','è¾›å·³æˆŒ'=>'6','è¾›å·³äº¥'=>'3','è¾›å¯å­'=>'5','è¾›å¯ä¸‘'=>'2','è¾›å¯å¯…'=>'6','è¾›å¯å¯'=>'4','è¾›å¯è¾°'=>'2','è¾›å¯å·³'=>'6','è¾›å¯åˆ'=>'3','è¾›å¯æœª'=>'1','è¾›å¯ç”³'=>'5','è¾›å¯é…‰'=>'3','è¾›å¯æˆŒ'=>'1','è¾›å¯äº¥'=>'4','è¾›ä¸‘å­'=>'1','è¾›ä¸‘ä¸‘'=>'4','è¾›ä¸‘å¯…'=>'2','è¾›ä¸‘å¯'=>'6','è¾›ä¸‘è¾°'=>'4','è¾›ä¸‘å·³'=>'2','è¾›ä¸‘åˆ'=>'5','è¾›ä¸‘æœª'=>'3','è¾›ä¸‘ç”³'=>'1','è¾›ä¸‘é…‰'=>'5','è¾›ä¸‘æˆŒ'=>'3','è¾›ä¸‘äº¥'=>'6','è¾›äº¥å­'=>'4','è¾›äº¥ä¸‘'=>'1','è¾›äº¥å¯…'=>'5','è¾›äº¥å¯'=>'3','è¾›äº¥è¾°'=>'1','è¾›äº¥å·³'=>'5','è¾›äº¥åˆ'=>'2','è¾›äº¥æœª'=>'6','è¾›äº¥ç”³'=>'4','è¾›äº¥é…‰'=>'2','è¾›äº¥æˆŒ'=>'6','è¾›äº¥äº¥'=>'3','è¾›é…‰å­'=>'6','è¾›é…‰ä¸‘'=>'3','è¾›é…‰å¯…'=>'1','è¾›é…‰å¯'=>'5','è¾›é…‰è¾°'=>'3','è¾›é…‰å·³'=>'1','è¾›é…‰åˆ'=>'4','è¾›é…‰æœª'=>'2','è¾›é…‰ç”³'=>'6','è¾›é…‰é…‰'=>'4','è¾›é…‰æˆŒ'=>'2','è¾›é…‰äº¥'=>'5','å£¬ç”³å­'=>'7','å£¬ç”³ä¸‘'=>'5','å£¬ç”³å¯…'=>'3','å£¬ç”³å¯'=>'1','å£¬ç”³è¾°'=>'4','å£¬ç”³å·³'=>'2','å£¬ç”³åˆ'=>'6','å£¬ç”³æœª'=>'4','å£¬ç”³ç”³'=>'2','å£¬ç”³é…‰'=>'5','å£¬ç”³æˆŒ'=>'3','å£¬ç”³äº¥'=>'1','å£¬åˆå­'=>'5','å£¬åˆä¸‘'=>'3','å£¬åˆå¯…'=>'1','å£¬åˆå¯'=>'8','å£¬åˆè¾°'=>'2','å£¬åˆå·³'=>'9','å£¬åˆåˆ'=>'4','å£¬åˆæœª'=>'2','å£¬åˆç”³'=>'9','å£¬åˆé…‰'=>'3','å£¬åˆæˆŒ'=>'1','å£¬åˆäº¥'=>'8','å£¬è¾°å­'=>'8','å£¬è¾°ä¸‘'=>'6','å£¬è¾°å¯…'=>'4','å£¬è¾°å¯'=>'2','å£¬è¾°è¾°'=>'5','å£¬è¾°å·³'=>'3','å£¬è¾°åˆ'=>'7','å£¬è¾°æœª'=>'5','å£¬è¾°ç”³'=>'3','å£¬è¾°é…‰'=>'6','å£¬è¾°æˆŒ'=>'4','å£¬è¾°äº¥'=>'2','å£¬å¯…å­'=>'6','å£¬å¯…ä¸‘'=>'4','å£¬å¯…å¯…'=>'2','å£¬å¯…å¯'=>'9','å£¬å¯…è¾°'=>'3','å£¬å¯…å·³'=>'1','å£¬å¯…åˆ'=>'5','å£¬å¯…æœª'=>'3','å£¬å¯…ç”³'=>'1','å£¬å¯…é…‰'=>'4','å£¬å¯…æˆŒ'=>'2','å£¬å¯…äº¥'=>'9','å£¬å­å­'=>'5','å£¬å­ä¸‘'=>'3','å£¬å­å¯…'=>'1','å£¬å­å¯'=>'8','å£¬å­è¾°'=>'2','å£¬å­å·³'=>'9','å£¬å­åˆ'=>'4','å£¬å­æœª'=>'2','å£¬å­ç”³'=>'9','å£¬å­é…‰'=>'3','å£¬å­æˆŒ'=>'1','å£¬å­äº¥'=>'8','å£¬æˆŒå­'=>'8','å£¬æˆŒä¸‘'=>'6','å£¬æˆŒå¯…'=>'4','å£¬æˆŒå¯'=>'2','å£¬æˆŒè¾°'=>'5','å£¬æˆŒå·³'=>'3','å£¬æˆŒåˆ'=>'7','å£¬æˆŒæœª'=>'5','å£¬æˆŒç”³'=>'3','å£¬æˆŒé…‰'=>'6','å£¬æˆŒæˆŒ'=>'4','å£¬æˆŒäº¥'=>'2','ç™¸é…‰å­'=>'1','ç™¸é…‰ä¸‘'=>'5','ç™¸é…‰å¯…'=>'2','ç™¸é…‰å¯'=>'6','ç™¸é…‰è¾°'=>'4','ç™¸é…‰å·³'=>'2','ç™¸é…‰åˆ'=>'6','ç™¸é…‰æœª'=>'3','ç™¸é…‰ç”³'=>'1','ç™¸é…‰é…‰'=>'5','ç™¸é…‰æˆŒ'=>'3','ç™¸é…‰äº¥'=>'1','ç™¸æœªå­'=>'2','ç™¸æœªä¸‘'=>'6','ç™¸æœªå¯…'=>'3','ç™¸æœªå¯'=>'1','ç™¸æœªè¾°'=>'5','ç™¸æœªå·³'=>'3','ç™¸æœªåˆ'=>'1','ç™¸æœªæœª'=>'4','ç™¸æœªç”³'=>'2','ç™¸æœªé…‰'=>'6','ç™¸æœªæˆŒ'=>'4','ç™¸æœªäº¥'=>'2','ç™¸å·³å­'=>'5','ç™¸å·³ä¸‘'=>'3','ç™¸å·³å¯…'=>'6','ç™¸å·³å¯'=>'4','ç™¸å·³è¾°'=>'2','ç™¸å·³å·³'=>'6','ç™¸å·³åˆ'=>'4','ç™¸å·³æœª'=>'1','ç™¸å·³ç”³'=>'5','ç™¸å·³é…‰'=>'3','ç™¸å·³æˆŒ'=>'1','ç™¸å·³äº¥'=>'5','ç™¸å¯å­'=>'6','ç™¸å¯ä¸‘'=>'4','ç™¸å¯å¯…'=>'1','ç™¸å¯å¯'=>'5','ç™¸å¯è¾°'=>'3','ç™¸å¯å·³'=>'1','ç™¸å¯åˆ'=>'5','ç™¸å¯æœª'=>'2','ç™¸å¯ç”³'=>'6','ç™¸å¯é…‰'=>'4','ç™¸å¯æˆŒ'=>'2','ç™¸å¯äº¥'=>'6','ç™¸ä¸‘å­'=>'2','ç™¸ä¸‘ä¸‘'=>'6','ç™¸ä¸‘å¯…'=>'3','ç™¸ä¸‘å¯'=>'1','ç™¸ä¸‘è¾°'=>'5','ç™¸ä¸‘å·³'=>'3','ç™¸ä¸‘åˆ'=>'1','ç™¸ä¸‘æœª'=>'4','ç™¸ä¸‘ç”³'=>'2','ç™¸ä¸‘é…‰'=>'6','ç™¸ä¸‘æˆŒ'=>'4','ç™¸ä¸‘äº¥'=>'2','ç™¸äº¥å­'=>'5','ç™¸äº¥ä¸‘'=>'3','ç™¸äº¥å¯…'=>'6','ç™¸äº¥å¯'=>'4','ç™¸äº¥è¾°'=>'2','ç™¸äº¥å·³'=>'6','ç™¸äº¥åˆ'=>'4','ç™¸äº¥æœª'=>'1','ç™¸äº¥ç”³'=>'5','ç™¸äº¥é…‰'=>'3','ç™¸äº¥æˆŒ'=>'1','ç™¸äº¥äº¥'=>'5'];
  
  //æœ¬å‘½æ˜Ÿå®¿27ä¸ªæ˜Ÿæ—¶é—´ä¿®æ”¹æˆå†œåŽ†çš„ (ä¸­æ–‡)æœˆä»½(æ•°å­—)æ—¥ â†“
  public static $XIU_BMXX=['æ­£1'=>'å®¤','æ­£2'=>'å£','æ­£3'=>'å¥Ž','æ­£4'=>'å¨„','æ­£5'=>'èƒƒ','æ­£6'=>'æ˜´','æ­£7'=>'æ¯•','æ­£8'=>'è§œ','æ­£9'=>'å‚','æ­£10'=>'äº•','æ­£11'=>'é¬¼','æ­£12'=>'æŸ³','æ­£13'=>'æ˜Ÿ','æ­£14'=>'å¼ ','æ­£15'=>'ç¿¼','æ­£16'=>'è½¸','æ­£17'=>'è§’','æ­£18'=>'äº¢','æ­£19'=>'æ°','æ­£20'=>'æˆ¿','æ­£21'=>'å¿ƒ','æ­£22'=>'å°¾','æ­£23'=>'ç®•','æ­£24'=>'æ–—','æ­£25'=>'å¥³','æ­£26'=>'è™š','æ­£27'=>'å±','æ­£28'=>'å®¤','æ­£29'=>'å£','æ­£30'=>'å¥Ž',		 'äºŒ1'=>'å¥Ž','äºŒ2'=>'å¨„','äºŒ3'=>'èƒƒ','äºŒ4'=>'æ˜´','äºŒ5'=>'æ¯•','äºŒ6'=>'è§œ','äºŒ7'=>'å‚','äºŒ8'=>'äº•','äºŒ9'=>'é¬¼','äºŒ10'=>'æŸ³','äºŒ11'=>'æ˜Ÿ','äºŒ12'=>'å¼ ','äºŒ13'=>'ç¿¼','äºŒ14'=>'è½¸','äºŒ15'=>'è§’','äºŒ16'=>'äº¢','äºŒ17'=>'æ°','äºŒ18'=>'æˆ¿','äºŒ19'=>'å¿ƒ','äºŒ20'=>'å°¾','äºŒ21'=>'ç®•','äºŒ22'=>'æ–—','äºŒ23'=>'å¥³','äºŒ24'=>'è™š','äºŒ25'=>'å±','äºŒ26'=>'å®¤','äºŒ27'=>'å£','äºŒ28'=>'å¥Ž','äºŒ29'=>'å¨„','äºŒ30'=>'èƒƒ',		 'ä¸‰1'=>'èƒƒ','ä¸‰2'=>'æ˜´','ä¸‰3'=>'æ¯•','ä¸‰4'=>'è§œ','ä¸‰5'=>'å‚','ä¸‰6'=>'äº•','ä¸‰7'=>'é¬¼','ä¸‰8'=>'æŸ³','ä¸‰9'=>'æ˜Ÿ','ä¸‰10'=>'å¼ ','ä¸‰11'=>'ç¿¼','ä¸‰12'=>'è½¸','ä¸‰13'=>'è§’','ä¸‰14'=>'äº¢','ä¸‰15'=>'æ°','ä¸‰16'=>'æˆ¿','ä¸‰17'=>'å¿ƒ','ä¸‰18'=>'å°¾','ä¸‰19'=>'ç®•','ä¸‰20'=>'æ–—','ä¸‰21'=>'å¥³','ä¸‰22'=>'è™š','ä¸‰23'=>'å±','ä¸‰24'=>'å®¤','ä¸‰25'=>'å£','ä¸‰26'=>'å¥Ž','ä¸‰27'=>'å¨„','ä¸‰28'=>'èƒƒ','ä¸‰29'=>'æ˜´','ä¸‰30'=>'æ¯•',		 'å››1'=>'æ¯•','å››2'=>'è§œ','å››3'=>'å‚','å››4'=>'äº•','å››5'=>'é¬¼','å››6'=>'æŸ³','å››7'=>'æ˜Ÿ','å››8'=>'å¼ ','å››9'=>'ç¿¼','å››10'=>'è½¸','å››11'=>'è§’','å››12'=>'äº¢','å››13'=>'æ°','å››14'=>'æˆ¿','å››15'=>'å¿ƒ','å››16'=>'å°¾','å››17'=>'ç®•','å››18'=>'æ–—','å››19'=>'å¥³','å››20'=>'è™š','å››21'=>'å±','å››22'=>'å®¤','å››23'=>'å£','å››24'=>'å¥Ž','å››25'=>'å¨„','å››26'=>'èƒƒ','å››27'=>'æ˜´','å››28'=>'æ¯•','å››29'=>'è§œ','å››30'=>'å‚',		 'äº”1'=>'å‚','äº”2'=>'äº•','äº”3'=>'é¬¼','äº”4'=>'æŸ³','äº”5'=>'æ˜Ÿ','äº”6'=>'å¼ ','äº”7'=>'ç¿¼','äº”8'=>'è½¸','äº”9'=>'è§’','äº”10'=>'äº¢','äº”11'=>'æ°','äº”12'=>'æˆ¿','äº”13'=>'å¿ƒ','äº”14'=>'å°¾','äº”15'=>'ç®•','äº”16'=>'æ–—','äº”17'=>'å¥³','äº”18'=>'è™š','äº”19'=>'å±','äº”20'=>'å®¤','äº”21'=>'å£','äº”22'=>'å¥Ž','äº”23'=>'å¨„','äº”24'=>'èƒƒ','äº”25'=>'æ˜´','äº”26'=>'æ¯•','äº”27'=>'è§œ','äº”28'=>'å‚','äº”29'=>'äº•','äº”30'=>'é¬¼',		 'å…­1'=>'é¬¼','å…­2'=>'æŸ³','å…­3'=>'æ˜Ÿ','å…­4'=>'å¼ ','å…­5'=>'ç¿¼','å…­6'=>'è½¸','å…­7'=>'è§’','å…­8'=>'äº¢','å…­9'=>'æ°','å…­10'=>'æˆ¿','å…­11'=>'å¿ƒ','å…­12'=>'å°¾','å…­13'=>'ç®•','å…­14'=>'æ–—','å…­15'=>'å¥³','å…­16'=>'è™š','å…­17'=>'å±','å…­18'=>'å®¤','å…­19'=>'å£','å…­20'=>'å¥Ž','å…­21'=>'å¨„','å…­22'=>'èƒƒ','å…­23'=>'æ˜´','å…­24'=>'æ¯•','å…­25'=>'è§œ','å…­26'=>'å‚','å…­27'=>'äº•','å…­28'=>'é¬¼','å…­29'=>'æŸ³','å…­30'=>'æ˜Ÿ',		 'ä¸ƒ1'=>'å¼ ','ä¸ƒ2'=>'ç¿¼','ä¸ƒ3'=>'è½¸','ä¸ƒ4'=>'è§’','ä¸ƒ5'=>'äº¢','ä¸ƒ6'=>'æ°','ä¸ƒ7'=>'æˆ¿','ä¸ƒ8'=>'å¿ƒ','ä¸ƒ9'=>'å°¾','ä¸ƒ10'=>'ç®•','ä¸ƒ11'=>'æ–—','ä¸ƒ12'=>'å¥³','ä¸ƒ13'=>'è™š','ä¸ƒ14'=>'å±','ä¸ƒ15'=>'å®¤','ä¸ƒ16'=>'å£','ä¸ƒ17'=>'å¥Ž','ä¸ƒ18'=>'å¨„','ä¸ƒ19'=>'èƒƒ','ä¸ƒ20'=>'æ˜´','ä¸ƒ21'=>'æ¯•','ä¸ƒ22'=>'è§œ','ä¸ƒ23'=>'å‚','ä¸ƒ24'=>'äº•','ä¸ƒ25'=>'é¬¼','ä¸ƒ26'=>'æŸ³','ä¸ƒ27'=>'æ˜Ÿ','ä¸ƒ28'=>'å¼ ','ä¸ƒ29'=>'ç¿¼','ä¸ƒ30'=>'è½¸',		 'å…«1'=>'è§’','å…«2'=>'äº¢','å…«3'=>'æ°','å…«4'=>'æˆ¿','å…«5'=>'å¿ƒ','å…«6'=>'å°¾','å…«7'=>'ç®•','å…«8'=>'æ–—','å…«9'=>'å¥³','å…«10'=>'è™š','å…«11'=>'å±','å…«12'=>'å®¤','å…«13'=>'å£','å…«14'=>'å¥Ž','å…«15'=>'å¨„','å…«16'=>'èƒƒ','å…«17'=>'æ˜´','å…«18'=>'æ¯•','å…«19'=>'è§œ','å…«20'=>'å‚','å…«21'=>'äº•','å…«22'=>'é¬¼','å…«23'=>'æŸ³','å…«24'=>'æ˜Ÿ','å…«25'=>'å¼ ','å…«26'=>'ç¿¼','å…«27'=>'è½¸','å…«28'=>'è§’','å…«29'=>'äº¢','å…«30'=>'æ°',		 'ä¹1'=>'æ°','ä¹2'=>'æˆ¿','ä¹3'=>'å¿ƒ','ä¹4'=>'å°¾','ä¹5'=>'ç®•','ä¹6'=>'æ–—','ä¹7'=>'å¥³','ä¹8'=>'è™š','ä¹9'=>'å±','ä¹10'=>'å®¤','ä¹11'=>'å£','ä¹12'=>'å¥Ž','ä¹13'=>'å¨„','ä¹14'=>'èƒƒ','ä¹15'=>'æ˜´','ä¹16'=>'æ¯•','ä¹17'=>'è§œ','ä¹18'=>'å‚','ä¹19'=>'äº•','ä¹20'=>'é¬¼','ä¹21'=>'æŸ³','ä¹22'=>'æ˜Ÿ','ä¹23'=>'å¼ ','ä¹24'=>'ç¿¼','ä¹25'=>'è½¸','ä¹26'=>'è§’','ä¹27'=>'äº¢','ä¹28'=>'æ°','ä¹29'=>'æˆ¿','ä¹30'=>'å¿ƒ',		 'å1'=>'å¿ƒ','å2'=>'å°¾','å3'=>'ç®•','å4'=>'æ–—','å5'=>'å¥³','å6'=>'è™š','å7'=>'å±','å8'=>'å®¤','å9'=>'å£','å10'=>'å¥Ž','å11'=>'å¨„','å12'=>'èƒƒ','å13'=>'æ˜´','å14'=>'æ¯•','å15'=>'è§œ','å16'=>'å‚','å17'=>'äº•','å18'=>'é¬¼','å19'=>'æŸ³','å20'=>'æ˜Ÿ','å21'=>'å¼ ','å22'=>'ç¿¼','å23'=>'è½¸','å24'=>'è§’','å25'=>'äº¢','å26'=>'æ°','å27'=>'æˆ¿','å28'=>'å¿ƒ','å29'=>'å°¾','å30'=>'ç®•',		 'å†¬1'=>'æ–—','å†¬2'=>'å¥³','å†¬3'=>'è™š','å†¬4'=>'å±','å†¬5'=>'å®¤','å†¬6'=>'å£','å†¬7'=>'å¥Ž','å†¬8'=>'å¨„','å†¬9'=>'èƒƒ','å†¬10'=>'æ˜´','å†¬11'=>'æ¯•','å†¬12'=>'è§œ','å†¬13'=>'å‚','å†¬14'=>'äº•','å†¬15'=>'é¬¼','å†¬16'=>'æŸ³','å†¬17'=>'æ˜Ÿ','å†¬18'=>'å¼ ','å†¬19'=>'ç¿¼','å†¬20'=>'è½¸','å†¬21'=>'è§’','å†¬22'=>'äº¢','å†¬23'=>'æ°','å†¬24'=>'æˆ¿','å†¬25'=>'å¿ƒ','å†¬26'=>'å°¾','å†¬27'=>'ç®•','å†¬28'=>'æ–—','å†¬29'=>'å¥³','å†¬30'=>'è™š',		 'è…Š1'=>'è™š','è…Š2'=>'å±','è…Š3'=>'å®¤','è…Š4'=>'å£','è…Š5'=>'å¥Ž','è…Š6'=>'å¨„','è…Š7'=>'èƒƒ','è…Š8'=>'æ˜´','è…Š9'=>'æ¯•','è…Š10'=>'è§œ','è…Š11'=>'å‚','è…Š12'=>'äº•','è…Š13'=>'é¬¼','è…Š14'=>'æŸ³','è…Š15'=>'æ˜Ÿ','è…Š16'=>'å¼ ','è…Š17'=>'ç¿¼','è…Š18'=>'è½¸','è…Š19'=>'è§’','è…Š20'=>'äº¢','è…Š21'=>'æ°','è…Š22'=>'æˆ¿','è…Š23'=>'å¿ƒ','è…Š24'=>'å°¾','è…Š25'=>'ç®•','è…Š26'=>'æ–—','è…Š27'=>'å¥³','è…Š28'=>'è™š','è…Š29'=>'å±','è…Š30'=>'å®¤',																				'é—°æ­£1'=>'å®¤','é—°æ­£2'=>'å£','é—°æ­£3'=>'å¥Ž','é—°æ­£4'=>'å¨„','é—°æ­£5'=>'èƒƒ','é—°æ­£6'=>'æ˜´','é—°æ­£7'=>'æ¯•','é—°æ­£8'=>'è§œ','é—°æ­£9'=>'å‚','é—°æ­£10'=>'äº•','é—°æ­£11'=>'é¬¼','é—°æ­£12'=>'æŸ³','é—°æ­£13'=>'æ˜Ÿ','é—°æ­£14'=>'å¼ ','é—°æ­£15'=>'ç¿¼','é—°æ­£16'=>'è½¸','é—°æ­£17'=>'è§’','é—°æ­£18'=>'äº¢','é—°æ­£19'=>'æ°','é—°æ­£20'=>'æˆ¿','é—°æ­£21'=>'å¿ƒ','é—°æ­£22'=>'å°¾','é—°æ­£23'=>'ç®•','é—°æ­£24'=>'æ–—','é—°æ­£25'=>'å¥³','é—°æ­£26'=>'è™š','é—°æ­£27'=>'å±','é—°æ­£28'=>'å®¤','é—°æ­£29'=>'å£','é—°æ­£30'=>'å¥Ž',		 'é—°äºŒ1'=>'å¥Ž','é—°äºŒ2'=>'å¨„','é—°äºŒ3'=>'èƒƒ','é—°äºŒ4'=>'æ˜´','é—°äºŒ5'=>'æ¯•','é—°äºŒ6'=>'è§œ','é—°äºŒ7'=>'å‚','é—°äºŒ8'=>'äº•','é—°äºŒ9'=>'é¬¼','é—°äºŒ10'=>'æŸ³','é—°äºŒ11'=>'æ˜Ÿ','é—°äºŒ12'=>'å¼ ','é—°äºŒ13'=>'ç¿¼','é—°äºŒ14'=>'è½¸','é—°äºŒ15'=>'è§’','é—°äºŒ16'=>'äº¢','é—°äºŒ17'=>'æ°','é—°äºŒ18'=>'æˆ¿','é—°äºŒ19'=>'å¿ƒ','é—°äºŒ20'=>'å°¾','é—°äºŒ21'=>'ç®•','é—°äºŒ22'=>'æ–—','é—°äºŒ23'=>'å¥³','é—°äºŒ24'=>'è™š','é—°äºŒ25'=>'å±','é—°äºŒ26'=>'å®¤','é—°äºŒ27'=>'å£','é—°äºŒ28'=>'å¥Ž','é—°äºŒ29'=>'å¨„','é—°äºŒ30'=>'èƒƒ',		 'é—°ä¸‰1'=>'èƒƒ','é—°ä¸‰2'=>'æ˜´','é—°ä¸‰3'=>'æ¯•','é—°ä¸‰4'=>'è§œ','é—°ä¸‰5'=>'å‚','é—°ä¸‰6'=>'äº•','é—°ä¸‰7'=>'é¬¼','é—°ä¸‰8'=>'æŸ³','é—°ä¸‰9'=>'æ˜Ÿ','é—°ä¸‰10'=>'å¼ ','é—°ä¸‰11'=>'ç¿¼','é—°ä¸‰12'=>'è½¸','é—°ä¸‰13'=>'è§’','é—°ä¸‰14'=>'äº¢','é—°ä¸‰15'=>'æ°','é—°ä¸‰16'=>'æˆ¿','é—°ä¸‰17'=>'å¿ƒ','é—°ä¸‰18'=>'å°¾','é—°ä¸‰19'=>'ç®•','é—°ä¸‰20'=>'æ–—','é—°ä¸‰21'=>'å¥³','é—°ä¸‰22'=>'è™š','é—°ä¸‰23'=>'å±','é—°ä¸‰24'=>'å®¤','é—°ä¸‰25'=>'å£','é—°ä¸‰26'=>'å¥Ž','é—°ä¸‰27'=>'å¨„','é—°ä¸‰28'=>'èƒƒ','é—°ä¸‰29'=>'æ˜´','é—°ä¸‰30'=>'æ¯•',		 'é—°å››1'=>'æ¯•','é—°å››2'=>'è§œ','é—°å››3'=>'å‚','é—°å››4'=>'äº•','é—°å››5'=>'é¬¼','é—°å››6'=>'æŸ³','é—°å››7'=>'æ˜Ÿ','é—°å››8'=>'å¼ ','é—°å››9'=>'ç¿¼','é—°å››10'=>'è½¸','é—°å››11'=>'è§’','é—°å››12'=>'äº¢','é—°å››13'=>'æ°','é—°å››14'=>'æˆ¿','é—°å››15'=>'å¿ƒ','é—°å››16'=>'å°¾','é—°å››17'=>'ç®•','é—°å››18'=>'æ–—','é—°å››19'=>'å¥³','é—°å››20'=>'è™š','é—°å››21'=>'å±','é—°å››22'=>'å®¤','é—°å››23'=>'å£','é—°å››24'=>'å¥Ž','é—°å››25'=>'å¨„','é—°å››26'=>'èƒƒ','é—°å››27'=>'æ˜´','é—°å››28'=>'æ¯•','é—°å››29'=>'è§œ','é—°å››30'=>'å‚',		 'é—°äº”1'=>'å‚','é—°äº”2'=>'äº•','é—°äº”3'=>'é¬¼','é—°äº”4'=>'æŸ³','é—°äº”5'=>'æ˜Ÿ','é—°äº”6'=>'å¼ ','é—°äº”7'=>'ç¿¼','é—°äº”8'=>'è½¸','é—°äº”9'=>'è§’','é—°äº”10'=>'äº¢','é—°äº”11'=>'æ°','é—°äº”12'=>'æˆ¿','é—°äº”13'=>'å¿ƒ','é—°äº”14'=>'å°¾','é—°äº”15'=>'ç®•','é—°äº”16'=>'æ–—','é—°äº”17'=>'å¥³','é—°äº”18'=>'è™š','é—°äº”19'=>'å±','é—°äº”20'=>'å®¤','é—°äº”21'=>'å£','é—°äº”22'=>'å¥Ž','é—°äº”23'=>'å¨„','é—°äº”24'=>'èƒƒ','é—°äº”25'=>'æ˜´','é—°äº”26'=>'æ¯•','é—°äº”27'=>'è§œ','é—°äº”28'=>'å‚','é—°äº”29'=>'äº•','é—°äº”30'=>'é¬¼',		 'é—°å…­1'=>'é¬¼','é—°å…­2'=>'æŸ³','é—°å…­3'=>'æ˜Ÿ','é—°å…­4'=>'å¼ ','é—°å…­5'=>'ç¿¼','é—°å…­6'=>'è½¸','é—°å…­7'=>'è§’','é—°å…­8'=>'äº¢','é—°å…­9'=>'æ°','é—°å…­10'=>'æˆ¿','é—°å…­11'=>'å¿ƒ','é—°å…­12'=>'å°¾','é—°å…­13'=>'ç®•','é—°å…­14'=>'æ–—','é—°å…­15'=>'å¥³','é—°å…­16'=>'è™š','é—°å…­17'=>'å±','é—°å…­18'=>'å®¤','é—°å…­19'=>'å£','é—°å…­20'=>'å¥Ž','é—°å…­21'=>'å¨„','é—°å…­22'=>'èƒƒ','é—°å…­23'=>'æ˜´','é—°å…­24'=>'æ¯•','é—°å…­25'=>'è§œ','é—°å…­26'=>'å‚','é—°å…­27'=>'äº•','é—°å…­28'=>'é¬¼','é—°å…­29'=>'æŸ³','é—°å…­30'=>'æ˜Ÿ',		 'é—°ä¸ƒ1'=>'å¼ ','é—°ä¸ƒ2'=>'ç¿¼','é—°ä¸ƒ3'=>'è½¸','é—°ä¸ƒ4'=>'è§’','é—°ä¸ƒ5'=>'äº¢','é—°ä¸ƒ6'=>'æ°','é—°ä¸ƒ7'=>'æˆ¿','é—°ä¸ƒ8'=>'å¿ƒ','é—°ä¸ƒ9'=>'å°¾','é—°ä¸ƒ10'=>'ç®•','é—°ä¸ƒ11'=>'æ–—','é—°ä¸ƒ12'=>'å¥³','é—°ä¸ƒ13'=>'è™š','é—°ä¸ƒ14'=>'å±','é—°ä¸ƒ15'=>'å®¤','é—°ä¸ƒ16'=>'å£','é—°ä¸ƒ17'=>'å¥Ž','é—°ä¸ƒ18'=>'å¨„','é—°ä¸ƒ19'=>'èƒƒ','é—°ä¸ƒ20'=>'æ˜´','é—°ä¸ƒ21'=>'æ¯•','é—°ä¸ƒ22'=>'è§œ','é—°ä¸ƒ23'=>'å‚','é—°ä¸ƒ24'=>'äº•','é—°ä¸ƒ25'=>'é¬¼','é—°ä¸ƒ26'=>'æŸ³','é—°ä¸ƒ27'=>'æ˜Ÿ','é—°ä¸ƒ28'=>'å¼ ','é—°ä¸ƒ29'=>'ç¿¼','é—°ä¸ƒ30'=>'è½¸',		 'é—°å…«1'=>'è§’','é—°å…«2'=>'äº¢','é—°å…«3'=>'æ°','é—°å…«4'=>'æˆ¿','é—°å…«5'=>'å¿ƒ','é—°å…«6'=>'å°¾','é—°å…«7'=>'ç®•','é—°å…«8'=>'æ–—','é—°å…«9'=>'å¥³','é—°å…«10'=>'è™š','é—°å…«11'=>'å±','é—°å…«12'=>'å®¤','é—°å…«13'=>'å£','é—°å…«14'=>'å¥Ž','é—°å…«15'=>'å¨„','é—°å…«16'=>'èƒƒ','é—°å…«17'=>'æ˜´','é—°å…«18'=>'æ¯•','é—°å…«19'=>'è§œ','é—°å…«20'=>'å‚','é—°å…«21'=>'äº•','é—°å…«22'=>'é¬¼','é—°å…«23'=>'æŸ³','é—°å…«24'=>'æ˜Ÿ','é—°å…«25'=>'å¼ ','é—°å…«26'=>'ç¿¼','é—°å…«27'=>'è½¸','é—°å…«28'=>'è§’','é—°å…«29'=>'äº¢','é—°å…«30'=>'æ°',		 'é—°ä¹1'=>'æ°','é—°ä¹2'=>'æˆ¿','é—°ä¹3'=>'å¿ƒ','é—°ä¹4'=>'å°¾','é—°ä¹5'=>'ç®•','é—°ä¹6'=>'æ–—','é—°ä¹7'=>'å¥³','é—°ä¹8'=>'è™š','é—°ä¹9'=>'å±','é—°ä¹10'=>'å®¤','é—°ä¹11'=>'å£','é—°ä¹12'=>'å¥Ž','é—°ä¹13'=>'å¨„','é—°ä¹14'=>'èƒƒ','é—°ä¹15'=>'æ˜´','é—°ä¹16'=>'æ¯•','é—°ä¹17'=>'è§œ','é—°ä¹18'=>'å‚','é—°ä¹19'=>'äº•','é—°ä¹20'=>'é¬¼','é—°ä¹21'=>'æŸ³','é—°ä¹22'=>'æ˜Ÿ','é—°ä¹23'=>'å¼ ','é—°ä¹24'=>'ç¿¼','é—°ä¹25'=>'è½¸','é—°ä¹26'=>'è§’','é—°ä¹27'=>'äº¢','é—°ä¹28'=>'æ°','é—°ä¹29'=>'æˆ¿','é—°ä¹30'=>'å¿ƒ',		 'é—°å1'=>'å¿ƒ','é—°å2'=>'å°¾','é—°å3'=>'ç®•','é—°å4'=>'æ–—','é—°å5'=>'å¥³','é—°å6'=>'è™š','é—°å7'=>'å±','é—°å8'=>'å®¤','é—°å9'=>'å£','é—°å10'=>'å¥Ž','é—°å11'=>'å¨„','é—°å12'=>'èƒƒ','é—°å13'=>'æ˜´','é—°å14'=>'æ¯•','é—°å15'=>'è§œ','é—°å16'=>'å‚','é—°å17'=>'äº•','é—°å18'=>'é¬¼','é—°å19'=>'æŸ³','é—°å20'=>'æ˜Ÿ','é—°å21'=>'å¼ ','é—°å22'=>'ç¿¼','é—°å23'=>'è½¸','é—°å24'=>'è§’','é—°å25'=>'äº¢','é—°å26'=>'æ°','é—°å27'=>'æˆ¿','é—°å28'=>'å¿ƒ','é—°å29'=>'å°¾','é—°å30'=>'ç®•',		 'é—°å†¬1'=>'æ–—','é—°å†¬2'=>'å¥³','é—°å†¬3'=>'è™š','é—°å†¬4'=>'å±','é—°å†¬5'=>'å®¤','é—°å†¬6'=>'å£','é—°å†¬7'=>'å¥Ž','é—°å†¬8'=>'å¨„','é—°å†¬9'=>'èƒƒ','é—°å†¬10'=>'æ˜´','é—°å†¬11'=>'æ¯•','é—°å†¬12'=>'è§œ','é—°å†¬13'=>'å‚','é—°å†¬14'=>'äº•','é—°å†¬15'=>'é¬¼','é—°å†¬16'=>'æŸ³','é—°å†¬17'=>'æ˜Ÿ','é—°å†¬18'=>'å¼ ','é—°å†¬19'=>'ç¿¼','é—°å†¬20'=>'è½¸','é—°å†¬21'=>'è§’','é—°å†¬22'=>'äº¢','é—°å†¬23'=>'æ°','é—°å†¬24'=>'æˆ¿','é—°å†¬25'=>'å¿ƒ','é—°å†¬26'=>'å°¾','é—°å†¬27'=>'ç®•','é—°å†¬28'=>'æ–—','é—°å†¬29'=>'å¥³','é—°å†¬30'=>'è™š',		 'é—°è…Š1'=>'è™š','é—°è…Š2'=>'å±','é—°è…Š3'=>'å®¤','é—°è…Š4'=>'å£','é—°è…Š5'=>'å¥Ž','é—°è…Š6'=>'å¨„','é—°è…Š7'=>'èƒƒ','é—°è…Š8'=>'æ˜´','é—°è…Š9'=>'æ¯•','é—°è…Š10'=>'è§œ','é—°è…Š11'=>'å‚','é—°è…Š12'=>'äº•','é—°è…Š13'=>'é¬¼','é—°è…Š14'=>'æŸ³','é—°è…Š15'=>'æ˜Ÿ','é—°è…Š16'=>'å¼ ','é—°è…Š17'=>'ç¿¼','é—°è…Š18'=>'è½¸','é—°è…Š19'=>'è§’','é—°è…Š20'=>'äº¢','é—°è…Š21'=>'æ°','é—°è…Š22'=>'æˆ¿','é—°è…Š23'=>'å¿ƒ','é—°è…Š24'=>'å°¾','é—°è…Š25'=>'ç®•','é—°è…Š26'=>'æ–—','é—°è…Š27'=>'å¥³','é—°è…Š28'=>'è™š','é—°è…Š29'=>'å±','é—°è…Š30'=>'å®¤'];
  public static $XIU_LUCK=['è§’'=>'å‰','äº¢'=>'å‡¶','æ°'=>'å‡¶','æˆ¿'=>'å‰','å¿ƒ'=>'å‡¶','å°¾'=>'å‰','ç®•'=>'å‰','æ–—'=>'å‰','ç‰›'=>'å‡¶','å¥³'=>'å‡¶','è™š'=>'å‡¶','å±'=>'å‡¶','å®¤'=>'å‰','å£'=>'å‰','å¥Ž'=>'å‡¶','å¨„'=>'å‰','èƒƒ'=>'å‰','æ˜´'=>'å‡¶','æ¯•'=>'å‰','è§œ'=>'å‡¶','å‚'=>'å‰','äº•'=>'å‰','é¬¼'=>'å‡¶','æŸ³'=>'å‡¶','æ˜Ÿ'=>'å‡¶','å¼ '=>'å‰','ç¿¼'=>'å‡¶','è½¸'=>'å‰'];
  public static $XIU_SONG=['è§’'=>'è§’æ˜Ÿé€ ä½œä¸»è£æ˜Œï¼Œå¤–è¿›ç”°è´¢åŠå¥³éƒŽï¼Œå«å¨¶å©šå§»å‡ºè´µå­ï¼Œæ–‡äººåŠç¬¬è§å›çŽ‹ï¼ŒæƒŸæœ‰åŸ‹è‘¬ä¸å¯ç”¨ï¼Œä¸‰å¹´ä¹‹åŽä¸»ç˜Ÿç–«ï¼Œèµ·å·¥ä¿®ç­‘åŸåŸºåœ°ï¼Œå ‚å‰ç«‹è§ä¸»äººå‡¶ã€‚','äº¢'=>'äº¢æ˜Ÿé€ ä½œé•¿æˆ¿å½“ï¼Œåæ—¥ä¹‹ä¸­ä¸»æœ‰æ®ƒï¼Œç”°åœ°æ¶ˆç£¨å®˜å¤±èŒï¼ŒæŽ¥è¿å®šæ˜¯è™Žç‹¼ä¼¤ï¼Œå«å¨¶å©šå§»ç”¨æ­¤æ—¥ï¼Œå„¿å­™æ–°å¦‡å®ˆç©ºæˆ¿ï¼ŒåŸ‹è‘¬è‹¥è¿˜ç”¨æ­¤æ—¥ï¼Œå½“æ—¶å®³ç¥¸ä¸»é‡ä¼¤ã€‚','æ°'=>'æ°æ˜Ÿé€ ä½œä¸»ç¾å‡¶ï¼Œè´¹å°½ç”°å›­ä»“åº“ç©ºï¼ŒåŸ‹è‘¬ä¸å¯ç”¨æ­¤æ—¥ï¼Œæ‚¬ç»³åŠé¢ˆç¥¸é‡é‡ï¼Œè‹¥æ˜¯å©šå§»ç¦»åˆ«æ•£ï¼Œå¤œæ‹›æµªå­å…¥æˆ¿ä¸­ï¼Œè¡Œèˆ¹å¿…å®šé­æ²‰æ²¡ï¼Œæ›´ç”Ÿè‹å“‘å­å­™ç©·ã€‚','æˆ¿'=>'æˆ¿æ˜Ÿé€ ä½œç”°å›­è¿›ï¼Œé’±è´¢ç‰›é©¬éå±±å²—ï¼Œæ›´æ‹›å¤–å¤„ç”°åº„å®…ï¼Œè£åŽå¯Œè´µç¦ç¦„åº·ï¼ŒåŸ‹è‘¬è‹¥ç„¶ç”¨æ­¤æ—¥ï¼Œé«˜å®˜è¿›èŒæ‹œå›çŽ‹ï¼Œå«å¨¶å«¦å¨¥è‡³æœˆæ®¿ï¼Œä¸‰å¹´æŠ±å­è‡³æœå ‚ã€‚','å¿ƒ'=>'å¿ƒæ˜Ÿé€ ä½œå¤§ä¸ºå‡¶ï¼Œæ›´é­åˆ‘è®¼ç‹±å›šä¸­ï¼Œå¿¤é€†å®˜éžå®…äº§é€€ï¼ŒåŸ‹è‘¬å’æš´æ­»ç›¸ä»Žï¼Œå©šå§»è‹¥æ˜¯ç”¨æ­¤æ—¥ï¼Œå­æ­»å„¿äº¡æ³ªæ»¡èƒ¸ï¼Œä¸‰å¹´ä¹‹å†…è¿žé­ç¥¸ï¼Œäº‹äº‹æ•™å›æ²¡å§‹ç»ˆã€‚','å°¾'=>'å°¾æ˜Ÿé€ ä½œä¸»å¤©æ©ï¼Œå¯Œè´µè£åŽç¦ç¦„å¢žï¼Œæ‹›è´¢è¿›å®å…´å®¶å®…ï¼Œå’Œåˆå©šå§»è´µå­å­™ï¼ŒåŸ‹è‘¬è‹¥èƒ½ä¾æ­¤æ—¥ï¼Œç”·æ¸…å¥³æ­£å­å­™å…´ï¼Œå¼€é—¨æ”¾æ°´æ‹›ç”°å®…ï¼Œä»£ä»£å…¬ä¾¯è¿œæ’­åã€‚','ç®•'=>'ç®•æ˜Ÿé€ ä½œä¸»é«˜å¼ºï¼Œå²å²å¹´å¹´å¤§å‰æ˜Œï¼ŒåŸ‹è‘¬ä¿®åŸå¤§å‰åˆ©ï¼Œç”°èš•ç‰›é©¬éå±±å²—ï¼Œå¼€é—¨æ”¾æ°´æ‹›ç”°å®…ï¼Œç®§æ»¡é‡‘é“¶è°·æ»¡ä»“ï¼Œç¦è«é«˜å®˜åŠ ç¦„ä½ï¼Œå…­äº²ä¸°ç¦„ä¹å®‰åº·ã€‚','æ–—'=>'æ–—æ˜Ÿé€ ä½œä¸»æ‹›è´¢ï¼Œæ–‡æ­¦å®˜å‘˜ä½é¼Žå°ï¼Œç”°å®…å®¶è´¢åƒä¸‡è¿›ï¼ŒåŸå ‚ä¿®ç­‘è´µå¯Œæ¥ï¼Œå¼€é—¨æ”¾æ°´æ‹›ç‰›é©¬ï¼Œæ—ºèš•ç”·å¥³ä¸»å’Œè°ï¼Œé‡æ­¤å‰å®¿æ¥ç…§æŠ¤ï¼Œæ—¶æ”¯ç¦åº†æ°¸æ— ç¾ã€‚','ç‰›'=>'ç‰›æ˜Ÿé€ ä½œä¸»ç¾å±ï¼Œä¹æ¨ªä¸‰ç¾ä¸å¯æŽ¨ï¼Œå®¶å®…ä¸å®‰äººå£é€€ï¼Œç”°èš•ä¸åˆ©ä¸»äººè¡°ï¼Œå«å¨¶å©šå§»çš†è‡ªæŸï¼Œé‡‘é“¶è´¢è°·æ¸æ— ä¹‹ï¼Œè‹¥æ˜¯å¼€é—¨å¹¶æ”¾æ°´ï¼Œç‰›çŒªç¾Šé©¬äº¦ä¼¤æ‚²ã€‚','å¥³'=>'å¥³æ˜Ÿé€ ä½œæŸå©†å¨˜ï¼Œå…„å¼Ÿç›¸å«Œä¼¼è™Žç‹¼ï¼ŒåŸ‹è‘¬ç”Ÿç¾é€¢é¬¼æ€ªï¼Œé¢ é‚ªç–¾ç—…ä¸»ç˜Ÿæƒ¶ï¼Œä¸ºäº‹é­å®˜è´¢å¤±æ•£ï¼Œæ³»åˆ©ç•™è¿žä¸å¯å½“ï¼Œå¼€é—¨æ”¾æ°´ç”¨æ­¤æ—¥ï¼Œå…¨å®¶è´¢æ•£ä¸»ç¦»ä¹¡ã€‚','è™š'=>'è™šæ˜Ÿé€ ä½œä¸»ç¾æ®ƒï¼Œç”·å¥³å­¤çœ ä¸ä¸€åŒï¼Œå†…ä¹±é£Žå£°æ— ç¤¼èŠ‚ï¼Œå„¿å­™åª³å¦‡ä¼´äººåºŠï¼Œå¼€é—¨æ”¾æ°´é­ç¾ç¥¸ï¼Œè™Žå’¬è›‡ä¼¤åˆå’äº¡ï¼Œä¸‰ä¸‰äº”äº”è¿žå¹´ç—…ï¼Œå®¶ç ´äººäº¡ä¸å¯å½“ã€‚','å±'=>'å±æ˜Ÿä¸å¯é€ é«˜æ¥¼ï¼Œè‡ªé­åˆ‘åŠè§è¡€å…‰ï¼Œä¸‰å¹´å­©å­é­æ°´åŽ„ï¼ŒåŽç”Ÿå‡ºå¤–æ°¸ä¸è¿˜ï¼ŒåŸ‹è‘¬è‹¥è¿˜é€¢æ­¤æ—¥ï¼Œå‘¨å¹´ç™¾æ—¥å–é«˜å ‚ï¼Œä¸‰å¹´ä¸¤è½½ä¸€æ‚²ä¼¤ï¼Œå¼€é—¨æ”¾æ°´åˆ°å®˜å ‚ã€‚','å®¤'=>'å®¤æ˜Ÿä¿®é€ è¿›ç”°ç‰›ï¼Œå„¿å­™ä»£ä»£è¿‘çŽ‹ä¾¯ï¼Œå®¶è´µè£åŽå¤©ä¸Šè‡³ï¼Œå¯¿å¦‚å½­ç¥–å…«åƒç§‹ï¼Œå¼€é—¨æ”¾æ°´æ‹›è´¢å¸›ï¼Œå’Œåˆå©šå§»ç”Ÿè´µå„¿ï¼ŒåŸ‹è‘¬è‹¥èƒ½ä¾æ­¤æ—¥ï¼Œé—¨åº­å…´æ—ºç¦æ— ä¼‘ã€‚','å£'=>'å£æ˜Ÿé€ ä½œä¸»å¢žè´¢ï¼Œä¸èš•å¤§ç†Ÿç¦æ»”å¤©ï¼Œå¥´å©¢è‡ªæ¥äººå£è¿›ï¼Œå¼€é—¨æ”¾æ°´å‡ºè‹±è´¤ï¼ŒåŸ‹è‘¬æ‹›è´¢å®˜å“è¿›ï¼Œå®¶ä¸­è¯¸äº‹ä¹é™¶ç„¶ï¼Œå©šå§»å‰åˆ©ä¸»è´µå­ï¼Œæ—©æ’­åèª‰è‘—ç¥–éž­ã€‚','å¥Ž'=>'å¥Žæ˜Ÿé€ ä½œå¾—ç¥¯ç¥¥ï¼Œå®¶å†…è£å’Œå¤§å‰æ˜Œï¼Œè‹¥æ˜¯åŸ‹è‘¬é˜´å’æ­»ï¼Œå½“å¹´å®šä¸»ä¸¤ä¸‰ä¼¤ï¼Œçœ‹çœ‹å†›ä»¤åˆ‘ä¼¤åˆ°ï¼Œé‡é‡å®˜äº‹ä¸»ç˜Ÿæƒ¶ï¼Œå¼€é—¨æ”¾æ°´é­ç¾ç¥¸ï¼Œä¸‰å¹´ä¸¤æ¬¡æŸå„¿éƒŽã€‚','å¨„'=>'å¨„æ˜Ÿä¿®é€ èµ·é—¨åº­ï¼Œè´¢æ—ºå®¶å’Œäº‹äº‹å…´ï¼Œå¤–è¿›é’±è´¢ç™¾æ—¥è¿›ï¼Œä¸€å®¶å…„å¼Ÿæ’­é«˜åï¼Œå©šå§»è¿›ç›Šç”Ÿè´µå­ï¼ŒçŽ‰å¸›é‡‘é“¶ç®±æ»¡ç›ˆï¼Œæ”¾æ°´å¼€é—¨çš†å‰åˆ©ï¼Œç”·è£å¥³è´µå¯¿åº·å®ã€‚','èƒƒ'=>'èƒƒæ˜Ÿé€ ä½œäº‹å¦‚ä½•ï¼Œå®¶è´µè£åŽå–œæ°”å¤šï¼ŒåŸ‹è‘¬è´µä¸´å®˜ç¦„ä½ï¼Œå¤«å¦‡é½çœ‰æ°¸ä¿åº·ï¼Œå©šå§»é‡æ­¤å®¶å¯Œè´µï¼Œä¸‰ç¾ä¹ç¥¸ä¸é€¢ä»–ï¼Œä»Žæ­¤é—¨å‰å¤šå‰åº†ï¼Œå„¿å­™ä»£ä»£æ‹œé‡‘é˜¶ã€‚','æ˜´'=>'æ˜´æ˜Ÿé€ ä½œè¿›ç”°ç‰›ï¼ŒåŸ‹è‘¬å®˜ç¾ä¸å¾—ä¼‘ï¼Œé‡ä¸§äºŒæ—¥ä¸‰äººæ­»ï¼Œå°½å–ç”°å›­ä¸è®°å¢žï¼Œå¼€é—¨æ”¾æ°´æ‹›ç¾ç¥¸ï¼Œä¸‰å²å­©å„¿ç™½äº†å¤´ï¼Œå©šå§»ä¸å¯é€¢æ­¤æ—¥ï¼Œæ­»åˆ«ç”Ÿç¦»æ˜¯å¯æ„ã€‚','æ¯•'=>'æ¯•æ˜Ÿé€ ä½œä¸»å…‰å‰ï¼Œä¹°å¾—ç”°å›­æœ‰ä½™é’±ï¼ŒåŸ‹è‘¬æ­¤æ—¥æ·»å®˜èŒï¼Œç”°èš•å¤§ç†Ÿæ°¸ä¸°å¹´ï¼Œå¼€é—¨æ”¾æ°´å¤šå‰åº†ï¼Œåˆå®¶äººå£å¾—å®‰ç„¶ï¼Œå©šå§»è‹¥å¾—é€¢æ­¤æ—¥ï¼Œç”Ÿå¾—å­©å„¿ç¦å¯¿å…¨ã€‚','è§œ'=>'è§œæ˜Ÿé€ ä½œæœ‰å¾’åˆ‘ï¼Œä¸‰å¹´å¿…å®šä¸»ä¼¶ä¸ï¼ŒåŸ‹è‘¬å’æ­»å¤šå› æ­¤ï¼Œå–å®šå¯…å¹´ä½¿æ€äººï¼Œä¸‰ä¸§ä¸æ­¢çš†ç”±æ­¤ï¼Œä¸€äººè¯æ¯’äºŒäººèº«ï¼Œå®¶é—¨ç”°åœ°çš†é€€è´¥ï¼Œä»“åº“é‡‘é“¶åŒ–ä½œå°˜ã€‚','å‚'=>'å‚æ˜Ÿé€ ä½œæ—ºäººå®¶ï¼Œæ–‡æ˜Ÿç…§è€€å¤§å…‰åŽï¼Œåªå› é€ ä½œç”°è´¢æ—ºï¼ŒåŸ‹è‘¬æ‹›ç–¾å“­é»„æ²™ï¼Œå¼€é—¨æ”¾æ°´åŠ å®˜èŒï¼Œæˆ¿æˆ¿å­å­™è§ç”°åŠ ï¼Œå©šå§»è®¸éé­åˆ‘å…‹ï¼Œç”·å¥³æœå¼€å¹•è½èŠ±ã€‚','äº•'=>'äº•æ˜Ÿé€ ä½œæ—ºèš•ç”°ï¼Œé‡‘æ¦œé¢˜åç¬¬ä¸€å…‰ï¼ŒåŸ‹è‘¬é¡»é˜²æƒŠå’æ­»ï¼Œç‹‚é¢ é£Žç–¾å…¥é»„æ³‰ï¼Œå¼€é—¨æ”¾æ°´æ‹›è´¢å¸›ï¼Œç‰›é©¬çŒªç¾Šæ—ºèŽ«è¨€ï¼Œè´µäººç”°å¡˜æ¥å…¥å®…ï¼Œå„¿å­™å…´æ—ºæœ‰ä½™é’±ã€‚','é¬¼'=>'é¬¼æ˜Ÿèµ·é€ å’äººäº¡ï¼Œå ‚å‰ä¸è§ä¸»äººéƒŽï¼ŒåŸ‹è‘¬æ­¤æ—¥å®˜ç¦„è‡³ï¼Œå„¿å­™ä»£ä»£è¿‘å›çŽ‹ï¼Œå¼€é—¨æ”¾æ°´é¡»ä¼¤æ­»ï¼Œå«å¨¶å¤«å¦»ä¸ä¹…é•¿ï¼Œä¿®åœŸç­‘å¢™ä¼¤äº§å¥³ï¼Œæ‰‹æ‰¶åŒå¥³æ³ªæ±ªæ±ªã€‚','æŸ³'=>'æŸ³æ˜Ÿé€ ä½œä¸»é­å®˜ï¼Œæ˜¼å¤œå·é—­ä¸æš‚å®‰ï¼ŒåŸ‹è‘¬ç˜Ÿæƒ¶å¤šç–¾ç—…ï¼Œç”°å›­é€€å°½å®ˆå†¬å¯’ï¼Œå¼€é—¨æ”¾æ°´é­è‹çžŽï¼Œè…°é©¼èƒŒæ›²ä¼¼å¼“å¼¯ï¼Œæ›´æœ‰æ£’åˆ‘å®œè°¨æ…Žï¼Œå¦‡äººéšå®¢èµ°ç›˜æ¡“ã€‚','æ˜Ÿ'=>'æ˜Ÿå®¿æ—¥å¥½é€ æ–°æˆ¿ï¼Œè¿›èŒåŠ å®˜è¿‘å¸çŽ‹ï¼Œä¸å¯åŸ‹è‘¬å¹¶æ”¾æ°´ï¼Œå‡¶æ˜Ÿä¸´ä½å¥³äººäº¡ï¼Œç”Ÿç¦»æ­»åˆ«æ— å¿ƒæ‹ï¼Œè¦è‡ªå½’ä¼‘åˆ«å«éƒŽï¼Œå­”å­ä¹æ›²æ®Šéš¾åº¦ï¼Œæ”¾æ°´å¼€é—¨å¤©å‘½ä¼¤ã€‚','å¼ '=>'å¼ æ˜Ÿæ—¥å¥½é€ é¾™è½©ï¼Œå¹´å¹´å¹¶è§è¿›åº„ç”°ï¼ŒåŸ‹è‘¬ä¸ä¹…å‡å®˜èŒï¼Œä»£ä»£ä¸ºå®˜è¿‘å¸å‰ï¼Œå¼€é—¨æ”¾æ°´æ‹›è´¢å¸›ï¼Œå©šå§»å’Œåˆç¦ç»µç»µï¼Œç”°èš•äººæ»¡ä»“åº“æ»¡ï¼Œç™¾èˆ¬é¡ºæ„è‡ªå®‰ç„¶ã€‚','ç¿¼'=>'ç¿¼æ˜Ÿä¸åˆ©æž¶é«˜å ‚ï¼Œä¸‰å¹´äºŒè½½è§ç˜Ÿæƒ¶ï¼ŒåŸ‹è‘¬è‹¥è¿˜é€¢æ­¤æ—¥ï¼Œå­å­™å¿…å®šèµ°ä»–ä¹¡ï¼Œå©šå§»æ­¤æ—¥ä¸å®œåˆ©ï¼Œå½’å®¶å®šæ˜¯ä¸ç›¸å½“ï¼Œå¼€é—¨æ”¾æ°´å®¶é¡»ç ´ï¼Œå°‘å¥³æ‹èŠ±è´ªå¤–éƒŽã€‚','è½¸'=>'è½¸æ˜Ÿä¸´æ°´é€ é¾™å®«ï¼Œä»£ä»£ä¸ºå®˜å—çš‡å°ï¼Œå¯Œè´µè£åŽå¢žå¯¿ç¦„ï¼Œåº“æ»¡ä»“ç›ˆè‡ªæ˜Œéš†ï¼ŒåŸ‹è‘¬æ–‡æ˜Œæ¥ç…§åŠ©ï¼Œå®…èˆå®‰å®ä¸è§å‡¶ï¼Œæ›´æœ‰ä¸ºå®˜æ²¾å¸å® ï¼Œå©šå§»é¾™å­å…¥é¾™å®«ã€‚'];
  public static $ZHENG=['è§’'=>'æœ¨','äº•'=>'æœ¨','å¥Ž'=>'æœ¨','æ–—'=>'æœ¨','äº¢'=>'é‡‘','é¬¼'=>'é‡‘','å¨„'=>'é‡‘','ç‰›'=>'é‡‘','æ°'=>'åœŸ','æŸ³'=>'åœŸ','èƒƒ'=>'åœŸ','å¥³'=>'åœŸ','æˆ¿'=>'æ—¥','æ˜Ÿ'=>'æ—¥','æ˜´'=>'æ—¥','è™š'=>'æ—¥','å¿ƒ'=>'æœˆ','å¼ '=>'æœˆ','æ¯•'=>'æœˆ','å±'=>'æœˆ','å°¾'=>'ç«','ç¿¼'=>'ç«','è§œ'=>'ç«','å®¤'=>'ç«','ç®•'=>'æ°´','è½¸'=>'æ°´','å‚'=>'æ°´','å£'=>'æ°´'      ];
  public static $ANIMAL=['è§’'=>'è›Ÿ','æ–—'=>'ç¬','å¥Ž'=>'ç‹¼','äº•'=>'çŠ´','äº¢'=>'é¾™','ç‰›'=>'ç‰›','å¨„'=>'ç‹—','é¬¼'=>'ç¾Š','å¥³'=>'è ','æ°'=>'è²‰','èƒƒ'=>'å½˜','æŸ³'=>'ç','æˆ¿'=>'å…”','è™š'=>'é¼ ','æ˜´'=>'é¸¡','æ˜Ÿ'=>'é©¬','å¿ƒ'=>'ç‹','å±'=>'ç‡•','æ¯•'=>'ä¹Œ','å¼ '=>'é¹¿','å°¾'=>'è™Ž','å®¤'=>'çŒª','è§œ'=>'çŒ´','ç¿¼'=>'è›‡','ç®•'=>'è±¹','å£'=>'ç','å‚'=>'çŒ¿','è½¸'=>'èš“'      ];
  public static $GONG=['è§’'=>'ä¸œ','äº•'=>'å—','å¥Ž'=>'è¥¿','æ–—'=>'åŒ—','äº¢'=>'ä¸œ','é¬¼'=>'å—','å¨„'=>'è¥¿','ç‰›'=>'åŒ—','æ°'=>'ä¸œ','æŸ³'=>'å—','èƒƒ'=>'è¥¿','å¥³'=>'åŒ—','æˆ¿'=>'ä¸œ','æ˜Ÿ'=>'å—','æ˜´'=>'è¥¿','è™š'=>'åŒ—','å¿ƒ'=>'ä¸œ','å¼ '=>'å—','æ¯•'=>'è¥¿','å±'=>'åŒ—','å°¾'=>'ä¸œ','ç¿¼'=>'å—','è§œ'=>'è¥¿','å®¤'=>'åŒ—','ç®•'=>'ä¸œ','è½¸'=>'å—','å‚'=>'è¥¿','å£'=>'åŒ—'      ];
  public static $SHOU=['ä¸œ'=>'é’é¾™','å—'=>'æœ±é›€','è¥¿'=>'ç™½è™Ž','åŒ—'=>'çŽ„æ­¦'];
  public static $FESTIVAL=['1-1'=>'æ˜¥èŠ‚','1-15'=>'å…ƒå®µèŠ‚','2-2'=>'é¾™å¤´èŠ‚','5-5'=>'ç«¯åˆèŠ‚','7-7'=>'ä¸ƒå¤•èŠ‚','8-15'=>'ä¸­ç§‹èŠ‚','9-9'=>'é‡é˜³èŠ‚','12-8'=>'è…Šå…«èŠ‚'];
  public static $OTHER_FESTIVAL=['1-4'=>['æŽ¥ç¥žæ—¥'],'1-5'=>['éš”å¼€æ—¥'],'1-7'=>['äººæ—¥'],'1-8'=>['è°·æ—¥','é¡ºæ˜ŸèŠ‚'],'1-9'=>['å¤©æ—¥'],'1-10'=>['åœ°æ—¥'],'1-20'=>['å¤©ç©¿èŠ‚'],'1-25'=>['å¡«ä»“èŠ‚'],'1-30'=>['æ­£æœˆæ™¦'],'2-1'=>['ä¸­å’ŒèŠ‚'],'2-2'=>['ç¤¾æ—¥èŠ‚'],'3-3'=>['ä¸Šå·³èŠ‚'],'5-20'=>['åˆ†é¾™èŠ‚'],'5-25'=>['ä¼šé¾™èŠ‚'],'6-6'=>['å¤©è´¶èŠ‚'],'6-24'=>['è§‚èŽ²èŠ‚'],'6-25'=>['äº”è°·æ¯èŠ‚'],'7-14'=>['ä¸­å…ƒèŠ‚'],'7-22'=>['è´¢ç¥žèŠ‚'],'7-29'=>['åœ°è—èŠ‚'],'8-1'=>['å¤©ç¸æ—¥'],'10-1'=>['å¯’è¡£èŠ‚'],'10-10'=>['åæˆèŠ‚'],'10-15'=>['ä¸‹å…ƒèŠ‚'],'12-7'=>['é©±å‚©æ—¥'],'12-16'=>['å°¾ç‰™'],'12-24'=>['ç¥­ç¶æ—¥']];
  public static $CHONG=['åˆ','æœª','ç”³','é…‰','æˆŒ','äº¥','å­','ä¸‘','å¯…','å¯','è¾°','å·³'];
  public static $CHONG_GAN=['æˆŠ','å·±','åºš','è¾›','å£¬','ç™¸','ç”²','ä¹™','ä¸™','ä¸'];
  public static $CHONG_GAN_TIE=['å·±','æˆŠ','è¾›','åºš','ç™¸','å£¬','ä¹™','ç”²','ä¸','ä¸™'];
  public static $CHONG_GAN_4=['åºš','è¾›','å£¬','ç™¸','','','ç”²','ä¹™','ä¸™','ä¸'];
  public static $HE_GAN_5=['å·±','åºš','è¾›','å£¬','ç™¸','ç”²','ä¹™','ä¸™','ä¸','æˆŠ'];
  public static $HE_ZHI_6=['ä¸‘','å­','äº¥','æˆŒ','é…‰','ç”³','æœª','åˆ','å·³','è¾°','å¯','å¯…'];
  public static $SHA=['å­'=>'å—','ä¸‘'=>'ä¸œ','å¯…'=>'åŒ—','å¯'=>'è¥¿','è¾°'=>'å—','å·³'=>'ä¸œ','åˆ'=>'åŒ—','æœª'=>'è¥¿','ç”³'=>'å—','é…‰'=>'ä¸œ','æˆŒ'=>'åŒ—','äº¥'=>'è¥¿'];
  public static $POSITION_DESC=['åŽ'=>'æ­£åŒ—','è‰®'=>'ä¸œåŒ—','éœ‡'=>'æ­£ä¸œ','å·½'=>'ä¸œå—','ç¦»'=>'æ­£å—','å¤'=>'è¥¿å—','å…‘'=>'æ­£è¥¿','ä¹¾'=>'è¥¿åŒ—','ä¸­'=>'ä¸­å®«'];
  public static $NAYIN=['ç”²å­'=>'æµ·ä¸­é‡‘','ç”²åˆ'=>'æ²™ä¸­é‡‘','ä¸™å¯…'=>'ç‚‰ä¸­ç«','ä¸™ç”³'=>'å±±ä¸‹ç«','æˆŠè¾°'=>'å¤§æž—æœ¨','æˆŠæˆŒ'=>'å¹³åœ°æœ¨','åºšåˆ'=>'è·¯æ—åœŸ','åºšå­'=>'å£ä¸ŠåœŸ','å£¬ç”³'=>'å‰‘é”‹é‡‘','å£¬å¯…'=>'é‡‘ç®”é‡‘','ç”²æˆŒ'=>'å±±å¤´ç«','ç”²è¾°'=>'è¦†ç¯ç«','ä¸™å­'=>'æ¶§ä¸‹æ°´','ä¸™åˆ'=>'å¤©æ²³æ°´','æˆŠå¯…'=>'åŸŽå¤´åœŸ','æˆŠç”³'=>'å¤§é©¿åœŸ','åºšè¾°'=>'ç™½èœ¡é‡‘','åºšæˆŒ'=>'é’—é’é‡‘','å£¬åˆ'=>'æ¨æŸ³æœ¨','å£¬å­'=>'æ¡‘æŸ˜æœ¨','ç”²ç”³'=>'æ³‰ä¸­æ°´','ç”²å¯…'=>'å¤§æºªæ°´','ä¸™æˆŒ'=>'å±‹ä¸ŠåœŸ','ä¸™è¾°'=>'æ²™ä¸­åœŸ','æˆŠå­'=>'éœ¹é›³ç«','æˆŠåˆ'=>'å¤©ä¸Šç«','åºšå¯…'=>'æ¾æŸæœ¨','åºšç”³'=>'çŸ³æ¦´æœ¨','å£¬è¾°'=>'é•¿æµæ°´','å£¬æˆŒ'=>'å¤§æµ·æ°´','ä¹™ä¸‘'=>'æµ·ä¸­é‡‘','ä¹™æœª'=>'æ²™ä¸­é‡‘','ä¸å¯'=>'ç‚‰ä¸­ç«','ä¸é…‰'=>'å±±ä¸‹ç«','å·±å·³'=>'å¤§æž—æœ¨','å·±äº¥'=>'å¹³åœ°æœ¨','è¾›æœª'=>'è·¯æ—åœŸ','è¾›ä¸‘'=>'å£ä¸ŠåœŸ','ç™¸é…‰'=>'å‰‘é”‹é‡‘','ç™¸å¯'=>'é‡‘ç®”é‡‘','ä¹™äº¥'=>'å±±å¤´ç«','ä¹™å·³'=>'è¦†ç¯ç«','ä¸ä¸‘'=>'æ¶§ä¸‹æ°´','ä¸æœª'=>'å¤©æ²³æ°´','å·±å¯'=>'åŸŽå¤´åœŸ','å·±é…‰'=>'å¤§é©¿åœŸ','è¾›å·³'=>'ç™½èœ¡é‡‘','è¾›äº¥'=>'é’—é’é‡‘','ç™¸æœª'=>'æ¨æŸ³æœ¨','ç™¸ä¸‘'=>'æ¡‘æŸ˜æœ¨','ä¹™é…‰'=>'æ³‰ä¸­æ°´','ä¹™å¯'=>'å¤§æºªæ°´','ä¸äº¥'=>'å±‹ä¸ŠåœŸ','ä¸å·³'=>'æ²™ä¸­åœŸ','å·±ä¸‘'=>'éœ¹é›³ç«','å·±æœª'=>'å¤©ä¸Šç«','è¾›å¯'=>'æ¾æŸæœ¨','è¾›é…‰'=>'çŸ³æ¦´æœ¨','ç™¸å·³'=>'é•¿æµæ°´','ç™¸äº¥'=>'å¤§æµ·æ°´'];
  public static $GZGC=['ç”²å­'=>'ç¦»','ç”²æˆŒ'=>'å¤','ç”²ç”³'=>'ä¹¾','ç”²åˆ'=>'åŽ','ç”²è¾°'=>'éœ‡','ç”²å¯…'=>'å…‘','ä¹™ä¸‘'=>'è‰®','ä¹™äº¥'=>'ä¹¾','ä¹™é…‰'=>'å…‘','ä¹™æœª'=>'å¤','ä¹™å·³'=>'å·½','ä¹™å¯'=>'éœ‡','ä¸™å¯…'=>'å¤','ä¸™å­'=>'å·½','ä¸™æˆŒ'=>'å…‘','ä¸™ç”³'=>'è‰®','ä¸™åˆ'=>'éœ‡','ä¸™è¾°'=>'åŽ','ä¸å¯'=>'åŽ','ä¸ä¸‘'=>'ä¹¾','ä¸äº¥'=>'è‰®','ä¸é…‰'=>'å¤','ä¸æœª'=>'å…‘','ä¸å·³'=>'ç¦»','æˆŠè¾°'=>'è‰®','æˆŠå¯…'=>'å·½','æˆŠå­'=>'å¤','æˆŠæˆŒ'=>'ç¦»','æˆŠç”³'=>'åŽ','æˆŠåˆ'=>'ä¹¾','å·±å·³'=>'å…‘','å·±å¯'=>'è‰®','å·±ä¸‘'=>'éœ‡','å·±äº¥'=>'åŽ','å·±é…‰'=>'å·½','å·±æœª'=>'ç¦»','åºšåˆ'=>'è‰®','åºšè¾°'=>'ä¹¾','åºšå¯…'=>'ç¦»','åºšå­'=>'å…‘','åºšæˆŒ'=>'å·½','åºšç”³'=>'éœ‡','è¾›æœª'=>'å·½','è¾›å·³'=>'å¤','è¾›å¯'=>'ä¹¾','è¾›ä¸‘'=>'åŽ','è¾›äº¥'=>'éœ‡','è¾›é…‰'=>'ç¦»','å£¬ç”³'=>'ä¹¾','å£¬åˆ'=>'åŽ','å£¬è¾°'=>'éœ‡','å£¬å¯…'=>'å…‘','å£¬å­'=>'ç¦»','å£¬æˆŒ'=>'å¤','ç™¸é…‰'=>'å…‘','ç™¸æœª'=>'å¤','ç™¸å·³'=>'å·½','ç™¸å¯'=>'éœ‡','ç™¸ä¸‘'=>'è‰®','ç™¸äº¥'=>'ä¹¾'];
  public static $GCNY=['ä¹¾ä¹¾'=>'å¤','ä¹¾åŽ'=>'ç¦»','ä¹¾è‰®'=>'å…‘','ä¹¾éœ‡'=>'å·½','ä¹¾å·½'=>'éœ‡','ä¹¾ç¦»'=>'åŽ','ä¹¾å¤'=>'ä¹¾','ä¹¾å…‘'=>'è‰®','åŽä¹¾'=>'ç¦»','åŽåŽ'=>'å¤','åŽè‰®'=>'å·½','åŽéœ‡'=>'å…‘','åŽå·½'=>'è‰®','åŽç¦»'=>'ä¹¾','åŽå¤'=>'åŽ','åŽå…‘'=>'éœ‡','è‰®ä¹¾'=>'å…‘','è‰®åŽ'=>'å·½','è‰®è‰®'=>'å¤','è‰®éœ‡'=>'ç¦»','è‰®å·½'=>'åŽ','è‰®ç¦»'=>'éœ‡','è‰®å¤'=>'è‰®','è‰®å…‘'=>'ä¹¾','éœ‡ä¹¾'=>'å·½','éœ‡åŽ'=>'å…‘','éœ‡è‰®'=>'ç¦»','éœ‡éœ‡'=>'å¤','éœ‡å·½'=>'ä¹¾','éœ‡ç¦»'=>'è‰®','éœ‡å¤'=>'éœ‡','éœ‡å…‘'=>'åŽ','å·½ä¹¾'=>'éœ‡','å·½åŽ'=>'è‰®','å·½è‰®'=>'åŽ','å·½éœ‡'=>'ä¹¾','å·½å·½'=>'å¤','å·½ç¦»'=>'å…‘','å·½å¤'=>'å·½','å·½å…‘'=>'ç¦»','ç¦»ä¹¾'=>'åŽ','ç¦»åŽ'=>'ä¹¾','ç¦»è‰®'=>'éœ‡','ç¦»éœ‡'=>'è‰®','ç¦»å·½'=>'å…‘','ç¦»ç¦»'=>'å¤','ç¦»å¤'=>'ç¦»','ç¦»å…‘'=>'å·½','å¤ä¹¾'=>'ä¹¾','å¤åŽ'=>'åŽ','å¤è‰®'=>'è‰®','å¤éœ‡'=>'éœ‡','å¤å·½'=>'å·½','å¤ç¦»'=>'ç¦»','å¤å¤'=>'å¤','å¤å…‘'=>'å…‘','å…‘ä¹¾'=>'è‰®','å…‘åŽ'=>'éœ‡','å…‘è‰®'=>'ä¹¾','å…‘éœ‡'=>'åŽ','å…‘å·½'=>'ç¦»','å…‘ç¦»'=>'å·½','å…‘å¤'=>'å…‘','å…‘å…‘'=>'å¤'];
  public static $GCRS=['ä¹¾ä¹¾'=>'å¤','ä¹¾åŽ'=>'ç¦»','ä¹¾è‰®'=>'å…‘','ä¹¾éœ‡'=>'å·½','ä¹¾å·½'=>'éœ‡','ä¹¾ç¦»'=>'åŽ','ä¹¾å¤'=>'ä¹¾','ä¹¾å…‘'=>'è‰®','åŽä¹¾'=>'ç¦»','åŽåŽ'=>'å¤','åŽè‰®'=>'å·½','åŽéœ‡'=>'å…‘','åŽå·½'=>'è‰®','åŽç¦»'=>'ä¹¾','åŽå¤'=>'åŽ','åŽå…‘'=>'éœ‡','è‰®ä¹¾'=>'å…‘','è‰®åŽ'=>'å·½','è‰®è‰®'=>'å¤','è‰®éœ‡'=>'ç¦»','è‰®å·½'=>'åŽ','è‰®ç¦»'=>'éœ‡','è‰®å¤'=>'è‰®','è‰®å…‘'=>'ä¹¾','éœ‡ä¹¾'=>'å·½','éœ‡åŽ'=>'å…‘','éœ‡è‰®'=>'ç¦»','éœ‡éœ‡'=>'å¤','éœ‡å·½'=>'ä¹¾','éœ‡ç¦»'=>'è‰®','éœ‡å¤'=>'éœ‡','éœ‡å…‘'=>'åŽ','å·½ä¹¾'=>'éœ‡','å·½åŽ'=>'è‰®','å·½è‰®'=>'åŽ','å·½éœ‡'=>'ä¹¾','å·½å·½'=>'å¤','å·½ç¦»'=>'å…‘','å·½å¤'=>'å·½','å·½å…‘'=>'ç¦»','ç¦»ä¹¾'=>'åŽ','ç¦»åŽ'=>'ä¹¾','ç¦»è‰®'=>'éœ‡','ç¦»éœ‡'=>'è‰®','ç¦»å·½'=>'å…‘','ç¦»ç¦»'=>'å¤','ç¦»å¤'=>'ç¦»','ç¦»å…‘'=>'å·½','å¤ä¹¾'=>'ä¹¾','å¤åŽ'=>'åŽ','å¤è‰®'=>'è‰®','å¤éœ‡'=>'éœ‡','å¤å·½'=>'å·½','å¤ç¦»'=>'ç¦»','å¤å¤'=>'å¤','å¤å…‘'=>'å…‘','å…‘ä¹¾'=>'è‰®','å…‘åŽ'=>'éœ‡','å…‘è‰®'=>'ä¹¾','å…‘éœ‡'=>'åŽ','å…‘å·½'=>'ç¦»','å…‘ç¦»'=>'å·½','å…‘å¤'=>'å…‘','å…‘å…‘'=>'å¤'];
  public static $WU_XING_GAN=['ç”²'=>'æœ¨','ä¹™'=>'æœ¨','ä¸™'=>'ç«','ä¸'=>'ç«','æˆŠ'=>'åœŸ','å·±'=>'åœŸ','åºš'=>'é‡‘','è¾›'=>'é‡‘','å£¬'=>'æ°´','ç™¸'=>'æ°´'];
  public static $WU_XING_ZHI=['å¯…'=>'æœ¨','å¯'=>'æœ¨','å·³'=>'ç«','åˆ'=>'ç«','è¾°'=>'åœŸ','ä¸‘'=>'åœŸ','æˆŒ'=>'åœŸ','æœª'=>'åœŸ','ç”³'=>'é‡‘','é…‰'=>'é‡‘','äº¥'=>'æ°´','å­'=>'æ°´'];
  public static $SHI_SHEN_GAN=['ç”²ç”²'=>'æ¯”è‚©','ç”²ä¹™'=>'åŠ«è´¢','ç”²ä¸™'=>'é£Ÿç¥ž','ç”²ä¸'=>'ä¼¤å®˜','ç”²æˆŠ'=>'åè´¢','ç”²å·±'=>'æ­£è´¢','ç”²åºš'=>'ä¸ƒæ€','ç”²è¾›'=>'æ­£å®˜','ç”²å£¬'=>'åå°','ç”²ç™¸'=>'æ­£å°','ä¹™ä¹™'=>'æ¯”è‚©','ä¹™ç”²'=>'åŠ«è´¢','ä¹™ä¸'=>'é£Ÿç¥ž','ä¹™ä¸™'=>'ä¼¤å®˜','ä¹™å·±'=>'åè´¢','ä¹™æˆŠ'=>'æ­£è´¢','ä¹™è¾›'=>'ä¸ƒæ€','ä¹™åºš'=>'æ­£å®˜','ä¹™ç™¸'=>'åå°','ä¹™å£¬'=>'æ­£å°','ä¸™ä¸™'=>'æ¯”è‚©','ä¸™ä¸'=>'åŠ«è´¢','ä¸™æˆŠ'=>'é£Ÿç¥ž','ä¸™å·±'=>'ä¼¤å®˜','ä¸™åºš'=>'åè´¢','ä¸™è¾›'=>'æ­£è´¢','ä¸™å£¬'=>'ä¸ƒæ€','ä¸™ç™¸'=>'æ­£å®˜','ä¸™ç”²'=>'åå°','ä¸™ä¹™'=>'æ­£å°','ä¸ä¸'=>'æ¯”è‚©','ä¸ä¸™'=>'åŠ«è´¢','ä¸å·±'=>'é£Ÿç¥ž','ä¸æˆŠ'=>'ä¼¤å®˜','ä¸è¾›'=>'åè´¢','ä¸åºš'=>'æ­£è´¢','ä¸ç™¸'=>'ä¸ƒæ€','ä¸å£¬'=>'æ­£å®˜','ä¸ä¹™'=>'åå°','ä¸ç”²'=>'æ­£å°','æˆŠæˆŠ'=>'æ¯”è‚©','æˆŠå·±'=>'åŠ«è´¢','æˆŠåºš'=>'é£Ÿç¥ž','æˆŠè¾›'=>'ä¼¤å®˜','æˆŠå£¬'=>'åè´¢','æˆŠç™¸'=>'æ­£è´¢','æˆŠç”²'=>'ä¸ƒæ€','æˆŠä¹™'=>'æ­£å®˜','æˆŠä¸™'=>'åå°','æˆŠä¸'=>'æ­£å°','å·±å·±'=>'æ¯”è‚©','å·±æˆŠ'=>'åŠ«è´¢','å·±è¾›'=>'é£Ÿç¥ž','å·±åºš'=>'ä¼¤å®˜','å·±ç™¸'=>'åè´¢','å·±å£¬'=>'æ­£è´¢','å·±ä¹™'=>'ä¸ƒæ€','å·±ç”²'=>'æ­£å®˜','å·±ä¸'=>'åå°','å·±ä¸™'=>'æ­£å°','åºšåºš'=>'æ¯”è‚©','åºšè¾›'=>'åŠ«è´¢','åºšå£¬'=>'é£Ÿç¥ž','åºšç™¸'=>'ä¼¤å®˜','åºšç”²'=>'åè´¢','åºšä¹™'=>'æ­£è´¢','åºšä¸™'=>'ä¸ƒæ€','åºšä¸'=>'æ­£å®˜','åºšæˆŠ'=>'åå°','åºšå·±'=>'æ­£å°','è¾›è¾›'=>'æ¯”è‚©','è¾›åºš'=>'åŠ«è´¢','è¾›ç™¸'=>'é£Ÿç¥ž','è¾›å£¬'=>'ä¼¤å®˜','è¾›ä¹™'=>'åè´¢','è¾›ç”²'=>'æ­£è´¢','è¾›ä¸'=>'ä¸ƒæ€','è¾›ä¸™'=>'æ­£å®˜','è¾›å·±'=>'åå°','è¾›æˆŠ'=>'æ­£å°','å£¬å£¬'=>'æ¯”è‚©','å£¬ç™¸'=>'åŠ«è´¢','å£¬ç”²'=>'é£Ÿç¥ž','å£¬ä¹™'=>'ä¼¤å®˜','å£¬ä¸™'=>'åè´¢','å£¬ä¸'=>'æ­£è´¢','å£¬æˆŠ'=>'ä¸ƒæ€','å£¬å·±'=>'æ­£å®˜','å£¬åºš'=>'åå°','å£¬è¾›'=>'æ­£å°','ç™¸ç™¸'=>'æ¯”è‚©','ç™¸å£¬'=>'åŠ«è´¢','ç™¸ä¹™'=>'é£Ÿç¥ž','ç™¸ç”²'=>'ä¼¤å®˜','ç™¸ä¸'=>'åè´¢','ç™¸ä¸™'=>'æ­£è´¢','ç™¸å·±'=>'ä¸ƒæ€','ç™¸æˆŠ'=>'æ­£å®˜','ç™¸è¾›'=>'åå°','ç™¸åºš'=>'æ­£å°'];
  public static $SHI_SHEN_ZHI=['ç”²å­ç™¸'=>'</span>æ­£å°<br><span style="display=>none;">','ç”²ä¸‘ç™¸'=>'</span>æ­£å°<br><span style="display=>none;">','ç”²ä¸‘å·±'=>'</span>æ­£è´¢<br><span style="display=>none;">','ç”²ä¸‘è¾›'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç”²å¯…ä¸™'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ç”²å¯…ç”²'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ç”²å¯…æˆŠ'=>'</span>åè´¢<br><span style="display=>none;">','ç”²å¯ä¹™'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ç”²è¾°ä¹™'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ç”²è¾°æˆŠ'=>'</span>åè´¢<br><span style="display=>none;">','ç”²è¾°ç™¸'=>'</span>æ­£å°<br><span style="display=>none;">','ç”²å·³æˆŠ'=>'</span>åè´¢<br><span style="display=>none;">','ç”²å·³ä¸™'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ç”²å·³åºš'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ç”²åˆä¸'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ç”²åˆå·±'=>'</span>æ­£è´¢<br><span style="display=>none;">','ç”²æœªä¹™'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ç”²æœªå·±'=>'</span>æ­£è´¢<br><span style="display=>none;">','ç”²æœªä¸'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ç”²ç”³æˆŠ'=>'</span>åè´¢<br><span style="display=>none;">','ç”²ç”³åºš'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ç”²ç”³å£¬'=>'</span>åå°<br><span style="display=>none;">','ç”²é…‰è¾›'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç”²æˆŒè¾›'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç”²æˆŒæˆŠ'=>'</span>åè´¢<br><span style="display=>none;">','ç”²æˆŒä¸'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ç”²äº¥å£¬'=>'</span>åå°<br><span style="display=>none;">','ç”²äº¥ç”²'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¹™å­ç™¸'=>'</span>åå°<br><span style="display=>none;">','ä¹™ä¸‘ç™¸'=>'</span>åå°<br><span style="display=>none;">','ä¹™ä¸‘å·±'=>'</span>åè´¢<br><span style="display=>none;">','ä¹™ä¸‘è¾›'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¹™å¯…ä¸™'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¹™å¯…ç”²'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ä¹™å¯…æˆŠ'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¹™å¯ä¹™'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¹™è¾°ä¹™'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¹™è¾°æˆŠ'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¹™è¾°ç™¸'=>'</span>åå°<br><span style="display=>none;">','ä¹™å·³æˆŠ'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¹™å·³ä¸™'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¹™å·³åºš'=>'</span>æ­£å®˜<br><span style="display=>none;">','ä¹™åˆä¸'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¹™åˆå·±'=>'</span>åè´¢<br><span style="display=>none;">','ä¹™æœªä¹™'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¹™æœªå·±'=>'</span>åè´¢<br><span style="display=>none;">','ä¹™æœªä¸'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¹™ç”³æˆŠ'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¹™ç”³åºš'=>'</span>æ­£å®˜<br><span style="display=>none;">','ä¹™ç”³å£¬'=>'</span>æ­£å°<br><span style="display=>none;">','ä¹™é…‰è¾›'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¹™æˆŒè¾›'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¹™æˆŒæˆŠ'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¹™æˆŒä¸'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¹™äº¥å£¬'=>'</span>æ­£å°<br><span style="display=>none;">','ä¹™äº¥ç”²'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ä¸™å­ç™¸'=>'</span>æ­£å®˜<br><span style="display=>none;">','ä¸™ä¸‘ç™¸'=>'</span>æ­£å®˜<br><span style="display=>none;">','ä¸™ä¸‘å·±'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸™ä¸‘è¾›'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¸™å¯…ä¸™'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¸™å¯…ç”²'=>'</span>åå°<br><span style="display=>none;">','ä¸™å¯…æˆŠ'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸™å¯ä¹™'=>'</span>æ­£å°<br><span style="display=>none;">','ä¸™è¾°ä¹™'=>'</span>æ­£å°<br><span style="display=>none;">','ä¸™è¾°æˆŠ'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸™è¾°ç™¸'=>'</span>æ­£å®˜<br><span style="display=>none;">','ä¸™å·³æˆŠ'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸™å·³ä¸™'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¸™å·³åºš'=>'</span>åè´¢<br><span style="display=>none;">','ä¸™åˆä¸'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ä¸™åˆå·±'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸™æœªä¹™'=>'</span>æ­£å°<br><span style="display=>none;">','ä¸™æœªå·±'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸™æœªä¸'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ä¸™ç”³æˆŠ'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸™ç”³åºš'=>'</span>åè´¢<br><span style="display=>none;">','ä¸™ç”³å£¬'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¸™é…‰è¾›'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¸™æˆŒè¾›'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¸™æˆŒæˆŠ'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸™æˆŒä¸'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ä¸™äº¥å£¬'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¸™äº¥ç”²'=>'</span>åå°<br><span style="display=>none;">','ä¸å­ç™¸'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¸ä¸‘ç™¸'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¸ä¸‘å·±'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸ä¸‘è¾›'=>'</span>åè´¢<br><span style="display=>none;">','ä¸å¯…ä¸™'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ä¸å¯…ç”²'=>'</span>æ­£å°<br><span style="display=>none;">','ä¸å¯…æˆŠ'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸å¯ä¹™'=>'</span>åå°<br><span style="display=>none;">','ä¸è¾°ä¹™'=>'</span>åå°<br><span style="display=>none;">','ä¸è¾°æˆŠ'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸è¾°ç™¸'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ä¸å·³æˆŠ'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸å·³ä¸™'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ä¸å·³åºš'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¸åˆä¸'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¸åˆå·±'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸æœªä¹™'=>'</span>åå°<br><span style="display=>none;">','ä¸æœªå·±'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ä¸æœªä¸'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¸ç”³æˆŠ'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸ç”³åºš'=>'</span>æ­£è´¢<br><span style="display=>none;">','ä¸ç”³å£¬'=>'</span>æ­£å®˜<br><span style="display=>none;">','ä¸é…‰è¾›'=>'</span>åè´¢<br><span style="display=>none;">','ä¸æˆŒè¾›'=>'</span>åè´¢<br><span style="display=>none;">','ä¸æˆŒæˆŠ'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ä¸æˆŒä¸'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ä¸äº¥å£¬'=>'</span>æ­£å®˜<br><span style="display=>none;">','ä¸äº¥ç”²'=>'</span>æ­£å°<br><span style="display=>none;">','æˆŠå­ç™¸'=>'</span>æ­£è´¢<br><span style="display=>none;">','æˆŠä¸‘ç™¸'=>'</span>æ­£è´¢<br><span style="display=>none;">','æˆŠä¸‘å·±'=>'</span>åŠ«è´¢<br><span style="display=>none;">','æˆŠä¸‘è¾›'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','æˆŠå¯…ä¸™'=>'</span>åå°<br><span style="display=>none;">','æˆŠå¯…ç”²'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','æˆŠå¯…æˆŠ'=>'</span>æ¯”è‚©<br><span style="display=>none;">','æˆŠå¯ä¹™'=>'</span>æ­£å®˜<br><span style="display=>none;">','æˆŠè¾°ä¹™'=>'</span>æ­£å®˜<br><span style="display=>none;">','æˆŠè¾°æˆŠ'=>'</span>æ¯”è‚©<br><span style="display=>none;">','æˆŠè¾°ç™¸'=>'</span>æ­£è´¢<br><span style="display=>none;">','æˆŠå·³æˆŠ'=>'</span>æ¯”è‚©<br><span style="display=>none;">','æˆŠå·³ä¸™'=>'</span>åå°<br><span style="display=>none;">','æˆŠå·³åºš'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','æˆŠåˆä¸'=>'</span>æ­£å°<br><span style="display=>none;">','æˆŠåˆå·±'=>'</span>åŠ«è´¢<br><span style="display=>none;">','æˆŠæœªä¹™'=>'</span>æ­£å®˜<br><span style="display=>none;">','æˆŠæœªå·±'=>'</span>åŠ«è´¢<br><span style="display=>none;">','æˆŠæœªä¸'=>'</span>æ­£å°<br><span style="display=>none;">','æˆŠç”³æˆŠ'=>'</span>æ¯”è‚©<br><span style="display=>none;">','æˆŠç”³åºš'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','æˆŠç”³å£¬'=>'</span>åè´¢<br><span style="display=>none;">','æˆŠé…‰è¾›'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','æˆŠæˆŒè¾›'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','æˆŠæˆŒæˆŠ'=>'</span>æ¯”è‚©<br><span style="display=>none;">','æˆŠæˆŒä¸'=>'</span>æ­£å°<br><span style="display=>none;">','æˆŠäº¥å£¬'=>'</span>åè´¢<br><span style="display=>none;">','æˆŠäº¥ç”²'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å·±å­ç™¸'=>'</span>åè´¢<br><span style="display=>none;">','å·±ä¸‘ç™¸'=>'</span>åè´¢<br><span style="display=>none;">','å·±ä¸‘å·±'=>'</span>æ¯”è‚©<br><span style="display=>none;">','å·±ä¸‘è¾›'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','å·±å¯…ä¸™'=>'</span>æ­£å°<br><span style="display=>none;">','å·±å¯…ç”²'=>'</span>æ­£å®˜<br><span style="display=>none;">','å·±å¯…æˆŠ'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å·±å¯ä¹™'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å·±è¾°ä¹™'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å·±è¾°æˆŠ'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å·±è¾°ç™¸'=>'</span>åè´¢<br><span style="display=>none;">','å·±å·³æˆŠ'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å·±å·³ä¸™'=>'</span>æ­£å°<br><span style="display=>none;">','å·±å·³åºš'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','å·±åˆä¸'=>'</span>åå°<br><span style="display=>none;">','å·±åˆå·±'=>'</span>æ¯”è‚©<br><span style="display=>none;">','å·±æœªä¹™'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å·±æœªå·±'=>'</span>æ¯”è‚©<br><span style="display=>none;">','å·±æœªä¸'=>'</span>åå°<br><span style="display=>none;">','å·±ç”³æˆŠ'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å·±ç”³åºš'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','å·±ç”³å£¬'=>'</span>æ­£è´¢<br><span style="display=>none;">','å·±é…‰è¾›'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','å·±æˆŒè¾›'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','å·±æˆŒæˆŠ'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å·±æˆŒä¸'=>'</span>åå°<br><span style="display=>none;">','å·±äº¥å£¬'=>'</span>æ­£è´¢<br><span style="display=>none;">','å·±äº¥ç”²'=>'</span>æ­£å®˜<br><span style="display=>none;">','åºšå­ç™¸'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','åºšä¸‘ç™¸'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','åºšä¸‘å·±'=>'</span>æ­£å°<br><span style="display=>none;">','åºšä¸‘è¾›'=>'</span>åŠ«è´¢<br><span style="display=>none;">','åºšå¯…ä¸™'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','åºšå¯…ç”²'=>'</span>åè´¢<br><span style="display=>none;">','åºšå¯…æˆŠ'=>'</span>åå°<br><span style="display=>none;">','åºšå¯ä¹™'=>'</span>æ­£è´¢<br><span style="display=>none;">','åºšè¾°ä¹™'=>'</span>æ­£è´¢<br><span style="display=>none;">','åºšè¾°æˆŠ'=>'</span>åå°<br><span style="display=>none;">','åºšè¾°ç™¸'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','åºšå·³æˆŠ'=>'</span>åå°<br><span style="display=>none;">','åºšå·³ä¸™'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','åºšå·³åºš'=>'</span>æ¯”è‚©<br><span style="display=>none;">','åºšåˆä¸'=>'</span>æ­£å®˜<br><span style="display=>none;">','åºšåˆå·±'=>'</span>æ­£å°<br><span style="display=>none;">','åºšæœªä¹™'=>'</span>æ­£è´¢<br><span style="display=>none;">','åºšæœªå·±'=>'</span>æ­£å°<br><span style="display=>none;">','åºšæœªä¸'=>'</span>æ­£å®˜<br><span style="display=>none;">','åºšç”³æˆŠ'=>'</span>åå°<br><span style="display=>none;">','åºšç”³åºš'=>'</span>æ¯”è‚©<br><span style="display=>none;">','åºšç”³å£¬'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','åºšé…‰è¾›'=>'</span>åŠ«è´¢<br><span style="display=>none;">','åºšæˆŒè¾›'=>'</span>åŠ«è´¢<br><span style="display=>none;">','åºšæˆŒæˆŠ'=>'</span>åå°<br><span style="display=>none;">','åºšæˆŒä¸'=>'</span>æ­£å®˜<br><span style="display=>none;">','åºšäº¥å£¬'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','åºšäº¥ç”²'=>'</span>åè´¢<br><span style="display=>none;">','è¾›å­ç™¸'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','è¾›ä¸‘ç™¸'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','è¾›ä¸‘å·±'=>'</span>åå°<br><span style="display=>none;">','è¾›ä¸‘è¾›'=>'</span>æ¯”è‚©<br><span style="display=>none;">','è¾›å¯…ä¸™'=>'</span>æ­£å®˜<br><span style="display=>none;">','è¾›å¯…ç”²'=>'</span>æ­£è´¢<br><span style="display=>none;">','è¾›å¯…æˆŠ'=>'</span>æ­£å°<br><span style="display=>none;">','è¾›å¯ä¹™'=>'</span>åè´¢<br><span style="display=>none;">','è¾›è¾°ä¹™'=>'</span>åè´¢<br><span style="display=>none;">','è¾›è¾°æˆŠ'=>'</span>æ­£å°<br><span style="display=>none;">','è¾›è¾°ç™¸'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','è¾›å·³æˆŠ'=>'</span>æ­£å°<br><span style="display=>none;">','è¾›å·³ä¸™'=>'</span>æ­£å®˜<br><span style="display=>none;">','è¾›å·³åºš'=>'</span>åŠ«è´¢<br><span style="display=>none;">','è¾›åˆä¸'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','è¾›åˆå·±'=>'</span>åå°<br><span style="display=>none;">','è¾›æœªä¹™'=>'</span>åè´¢<br><span style="display=>none;">','è¾›æœªå·±'=>'</span>åå°<br><span style="display=>none;">','è¾›æœªä¸'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','è¾›ç”³æˆŠ'=>'</span>æ­£å°<br><span style="display=>none;">','è¾›ç”³åºš'=>'</span>åŠ«è´¢<br><span style="display=>none;">','è¾›ç”³å£¬'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','è¾›é…‰è¾›'=>'</span>æ¯”è‚©<br><span style="display=>none;">','è¾›æˆŒè¾›'=>'</span>æ¯”è‚©<br><span style="display=>none;">','è¾›æˆŒæˆŠ'=>'</span>æ­£å°<br><span style="display=>none;">','è¾›æˆŒä¸'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','è¾›äº¥å£¬'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','è¾›äº¥ç”²'=>'</span>æ­£è´¢<br><span style="display=>none;">','å£¬å­ç™¸'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å£¬ä¸‘ç™¸'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å£¬ä¸‘å·±'=>'</span>æ­£å®˜<br><span style="display=>none;">','å£¬ä¸‘è¾›'=>'</span>æ­£å°<br><span style="display=>none;">','å£¬å¯…ä¸™'=>'</span>åè´¢<br><span style="display=>none;">','å£¬å¯…ç”²'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','å£¬å¯…æˆŠ'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å£¬å¯ä¹™'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','å£¬è¾°ä¹™'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','å£¬è¾°æˆŠ'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å£¬è¾°ç™¸'=>'</span>åŠ«è´¢<br><span style="display=>none;">','å£¬å·³æˆŠ'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å£¬å·³ä¸™'=>'</span>åè´¢<br><span style="display=>none;">','å£¬å·³åºš'=>'</span>åå°<br><span style="display=>none;">','å£¬åˆä¸'=>'</span>æ­£è´¢<br><span style="display=>none;">','å£¬åˆå·±'=>'</span>æ­£å®˜<br><span style="display=>none;">','å£¬æœªä¹™'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','å£¬æœªå·±'=>'</span>æ­£å®˜<br><span style="display=>none;">','å£¬æœªä¸'=>'</span>æ­£è´¢<br><span style="display=>none;">','å£¬ç”³æˆŠ'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å£¬ç”³åºš'=>'</span>åå°<br><span style="display=>none;">','å£¬ç”³å£¬'=>'</span>æ¯”è‚©<br><span style="display=>none;">','å£¬é…‰è¾›'=>'</span>æ­£å°<br><span style="display=>none;">','å£¬æˆŒè¾›'=>'</span>æ­£å°<br><span style="display=>none;">','å£¬æˆŒæˆŠ'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','å£¬æˆŒä¸'=>'</span>æ­£è´¢<br><span style="display=>none;">','å£¬äº¥å£¬'=>'</span>æ¯”è‚©<br><span style="display=>none;">','å£¬äº¥ç”²'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ç™¸å­ç™¸'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ç™¸ä¸‘ç™¸'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ç™¸ä¸‘å·±'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ç™¸ä¸‘è¾›'=>'</span>åå°<br><span style="display=>none;">','ç™¸å¯…ä¸™'=>'</span>æ­£è´¢<br><span style="display=>none;">','ç™¸å¯…ç”²'=>'</span>ä¼¤å®˜<br><span style="display=>none;">','ç™¸å¯…æˆŠ'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç™¸å¯ä¹™'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ç™¸è¾°ä¹™'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ç™¸è¾°æˆŠ'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç™¸è¾°ç™¸'=>'</span>æ¯”è‚©<br><span style="display=>none;">','ç™¸å·³æˆŠ'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç™¸å·³ä¸™'=>'</span>æ­£è´¢<br><span style="display=>none;">','ç™¸å·³åºš'=>'</span>æ­£å°<br><span style="display=>none;">','ç™¸åˆä¸'=>'</span>åè´¢<br><span style="display=>none;">','ç™¸åˆå·±'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ç™¸æœªä¹™'=>'</span>é£Ÿç¥ž<br><span style="display=>none;">','ç™¸æœªå·±'=>'</span>ä¸ƒæ€<br><span style="display=>none;">','ç™¸æœªä¸'=>'</span>åè´¢<br><span style="display=>none;">','ç™¸ç”³æˆŠ'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç™¸ç”³åºš'=>'</span>æ­£å°<br><span style="display=>none;">','ç™¸ç”³å£¬'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ç™¸é…‰è¾›'=>'</span>åå°<br><span style="display=>none;">','ç™¸æˆŒè¾›'=>'</span>åå°<br><span style="display=>none;">','ç™¸æˆŒæˆŠ'=>'</span>æ­£å®˜<br><span style="display=>none;">','ç™¸æˆŒä¸'=>'</span>åè´¢<br><span style="display=>none;">','ç™¸äº¥å£¬'=>'</span>åŠ«è´¢<br><span style="display=>none;">','ç™¸äº¥ç”²'=>'</span>ä¼¤å®˜<br><span style="display=>none;">'];
  public static $ZHI_HIDE_GAN=['å­'=>['ç™¸'],'ä¸‘'=>['å·±','ç™¸','è¾›'],'å¯…'=>['ç”²','ä¸™','æˆŠ'],'å¯'=>['ä¹™'],'è¾°'=>['æˆŠ','ä¹™','ç™¸'],'å·³'=>['ä¸™','åºš','æˆŠ'],'åˆ'=>['ä¸','å·±'],'æœª'=>['å·±','ä¸','ä¹™'],'ç”³'=>['åºš','å£¬','æˆŠ'],'é…‰'=>['è¾›'],'æˆŒ'=>['æˆŠ','è¾›','ä¸'],'äº¥'=>['å£¬','ç”²']];
  public static $ZHI_HIDE_GANS=['å­'=>['</span>ç™¸<br><span style="display=>none;">'],'ä¸‘'=>['</span>å·±<br><span style="display=>none;">','</span>ç™¸<br><span style="display=>none;">','</span>è¾›<br><span style="display=>none;">'],'å¯…'=>['</span>ç”²<br><span style="display=>none;">','</span>ä¸™<br><span style="display=>none;">','</span>æˆŠ<br><span style="display=>none;">'],'å¯'=>['</span>ä¹™<br><span style="display=>none;">'],'è¾°'=>['</span>æˆŠ<br><span style="display=>none;">','</span>ä¹™<br><span style="display=>none;">','</span>ç™¸<br><span style="display=>none;">'],'å·³'=>['</span>ä¸™<br><span style="display=>none;">','</span>åºš<br><span style="display=>none;">','</span>æˆŠ<br><span style="display=>none;">'],'åˆ'=>['</span>ä¸<br><span style="display=>none;">','</span>å·±<br><span style="display=>none;">'],'æœª'=>['</span>å·±<br><span style="display=>none;">','</span>ä¸<br><span style="display=>none;">','</span>ä¹™<br><span style="display=>none;">'],'ç”³'=>['</span>åºš<br><span style="display=>none;">','</span>å£¬<br><span style="display=>none;">','</span>æˆŠ<br><span style="display=>none;">'],'é…‰'=>['</span>è¾›<br><span style="display=>none;">'],'æˆŒ'=>['</span>æˆŠ<br><span style="display=>none;">','</span>è¾›<br><span style="display=>none;">','</span>ä¸<br><span style="display=>none;">'],'äº¥'=>['</span>å£¬<br><span style="display=>none;">','</span>ç”²<br><span style="display=>none;">']];
  public static $YI_JI=['ç¥­ç¥€','ç¥ˆç¦','æ±‚å—£','å¼€å…‰','å¡‘ç»˜','é½é†®','æ–‹é†®','æ²æµ´','é…¬ç¥ž','é€ åº™','ç¥€ç¶','ç„šé¦™','è°¢åœŸ','å‡ºç«','é›•åˆ»','å«å¨¶','è®¢å©š','çº³é‡‡','é—®å','çº³å©¿','å½’å®','å®‰åºŠ','åˆå¸','å† ç¬„','è®¢ç›Ÿ','è¿›äººå£','è£è¡£','æŒ½é¢','å¼€å®¹','ä¿®åŸ','å¯é’»','ç ´åœŸ','å®‰è‘¬','ç«‹ç¢‘','æˆæœ','é™¤æœ','å¼€ç”ŸåŸ','åˆå¯¿æœ¨','å…¥æ®“','ç§»æŸ©','æ™®æ¸¡','å…¥å®…','å®‰é¦™','å®‰é—¨','ä¿®é€ ','èµ·åŸº','åŠ¨åœŸ','ä¸Šæ¢','ç«–æŸ±','å¼€äº•å¼€æ± ','ä½œé™‚æ”¾æ°´','æ‹†å¸','ç ´å±‹','ååž£','è¡¥åž£','ä¼æœ¨åšæ¢','ä½œç¶','è§£é™¤','å¼€æŸ±çœ¼','ç©¿å±æ‰‡æž¶','ç›–å±‹åˆè„Š','å¼€åŽ•','é€ ä»“','å¡žç©´','å¹³æ²»é“æ¶‚','é€ æ¡¥','ä½œåŽ•','ç­‘å ¤','å¼€æ± ','ä¼æœ¨','å¼€æ¸ ','æŽ˜äº•','æ‰«èˆ','æ”¾æ°´','é€ å±‹','åˆè„Š','é€ ç•œç¨ ','ä¿®é—¨','å®šç£‰','ä½œæ¢','ä¿®é¥°åž£å¢™','æž¶é©¬','å¼€å¸‚','æŒ‚åŒ¾','çº³è´¢','æ±‚è´¢','å¼€ä»“','ä¹°è½¦','ç½®äº§','é›‡åº¸','å‡ºè´§è´¢','å®‰æœºæ¢°','é€ è½¦å™¨','ç»ç»œ','é…é…¿','ä½œæŸ“','é¼“é“¸','é€ èˆ¹','å‰²èœœ','æ ½ç§','å–æ¸”','ç»“ç½‘','ç‰§å…»','å®‰ç¢“ç£‘','ä¹ è‰º','å…¥å­¦','ç†å‘','æŽ¢ç—…','è§è´µ','ä¹˜èˆ¹','æ¸¡æ°´','é’ˆç¸','å‡ºè¡Œ','ç§»å¾™','åˆ†å±…','å‰ƒå¤´','æ•´æ‰‹è¶³ç”²','çº³ç•œ','æ•æ‰','ç•‹çŒŽ','æ•™ç‰›é©¬','ä¼šäº²å‹','èµ´ä»»','æ±‚åŒ»','æ²»ç—…','è¯è®¼','èµ·åŸºåŠ¨åœŸ','ç ´å±‹ååž£','ç›–å±‹','é€ ä»“åº“','ç«‹åˆ¸äº¤æ˜“','äº¤æ˜“','ç«‹åˆ¸','å®‰æœº','ä¼šå‹','æ±‚åŒ»ç–—ç—…','è¯¸äº‹ä¸å®œ','é¦€äº‹å‹¿å–','è¡Œä¸§','æ–­èš','å½’å²«','æ— '];
  public static $LU=['ç”²'=>'å¯…','ä¹™'=>'å¯','ä¸™'=>'å·³','ä¸'=>'åˆ','æˆŠ'=>'å·³','å·±'=>'åˆ','åºš'=>'ç”³','è¾›'=>'é…‰','å£¬'=>'äº¥','ç™¸'=>'å­','å¯…'=>'ç”²','å¯'=>'ä¹™','å·³'=>'ä¸™,æˆŠ','åˆ'=>'ä¸,å·±','ç”³'=>'åºš','é…‰'=>'è¾›','äº¥'=>'å£¬','å­'=>'ç™¸'];
  public static $DAY_YI_JI='30=192531010D=>838454151A4C200C1E23221D212726,030F522E1F00=2430000C18=>8319000776262322200C1E1D,06292C2E1F04=32020E1A26=>791715795B0001025D,0F522E38201D=162E3A0A22=>790F181113332C2E2D302F157954,7001203810=0E1A263202=>79026A176576036A,522E201F05=0D19250131=>7911192C2E302F00030401060F1571292A75,707C20522F=0C18243000=>4F2C2E2B383F443D433663,0F01478A20151D=0E1A320226=>3840,0001202B892F=14202C3808=>3807504089,8829=0E1A263202=>383940,6370018A75202B454F6605=32020E1A26=>38394089,0001202B22=16223A0A2E=>384C,8A2020=2B3707131F=>2C2E5B000739337C38802D44484C2425201F1E272621,5229701535=121E2A3606=>2C2E2D2B156343364C,0F4729710D708A20036A1904=0D19250131=>5040262789,0F7129033B=202C380814=>5040000738,0F7D7C584F012063452B35=1A2632020E=>50400089,8813=1A2632020E=>69687011180F791966762627201E,0352292E8034=182430000C=>291503000D332E53261F2075,0F5238584F450B=000C182430=>297170192C2E2D2F2B3E363F4C,0F52156320010347200B=131F2B3707=>297115030102195283840D332C2E,0F1F5863201D8A02=222E3A0A16=>261F1E20232289,52290058363F32=16222E3A0A=>261F201E232289,8D39=0D19310125=>262322271E201D21,52450F4F09=0D19253101=>262322271E202189,1F4526=16222E3A0A=>262322271F1E20,712906=0F1B273303=>17262322274050,80387C6B2C=0915212D39=>1707702C2E71291F20,0F52000106111D15=16222E3A0A=>170007386A7448363F261F1E,030F79636F2026=030F1B2733=>1784832C2E5B26201F,0F010D2913=182430000C=>175447440D15838477656A49,2B2E1F8A202228=101C283404=>70504C7889,8803=0D19250131=>700F181126151E20001A7919,8D2F=0915212D39=>705283845B0D2F71,0F202E4106=3606121E2A=>70786289,06802E1F23=1824000C30=>70076A363F,292017=202C380814=>700718111A302F717566,0F2B2E2026=3B0B17232F=>70545283842E71291A7933192A5D5A5040,090C384F45208A1D6B38=212D390915=>7039170F45513A2C2E7129242526271F201D,00010352153A=15212D3909=>703911170E2C2E2D2F4B15712952633D,092B8A2027=010D192531=>702D155483840F63262720,53292F017D4F38442B2E1F4717=16222E3A0A=>705C4C39171A4F0E7971295B4C5248,0F2E1F1D37=1A2632020E=>2E260F27201F,523815292F1A22=0E1A260232=>64262322271F2021,0F2F293822=2F3B0B1723=>161A0F1526271F4C,586103473818=2430000C18=>161A7889,292E1F0F386131=17232F3B0B=>04795B3F651A5D,0F5201062016=14202C3808=>04170F79195D1A637566363F76,01522E8A2039=132B37071F=>0470170F191A134C8384662426232227201E,8D08=0D19253101=>040370181123220F1326271E2021,29153B=0D19310125=>040307177938494C,0F26207017=0E2632021A=>0403010218111A17332C2E2D2B15713E6575,45382064291D=142C380820=>04033918110F0D2C2E7129332D2B72528384547566,8D1C=1830000C24=>040318111A17332C15290D200C7A,4745063835=0F2733031B=>040318111A16175B795452848315302F6563395D,387029202E=14202C3808=>04031975363F6366,0F5401202C5283842E2F1E=0E1A320226=>0403080618111A16332E2F152A09537919702C5445490D75072B,8063203820=182430000C=>04067033392C7161262322271E1D210C,8D2F=101C283404=>3F4889,881C=2733030F1B=>3F74397677658988,0F3847201D=293505111D=>3F8B657789,0F2029702E7D35=111D293505=>3F8B6589,1F200A=020E1A2632=>3F656477,0F2B71292005=111D290535=>3F6589,8810=0F1B273303=>3F88,2B38200F1C=293505111D=>0F83843D363F776424,15462F2C52032971152A=0F1B273303=>0F17795B54838458,52807C3811=121E2A3606=>0F172C2E387129363F7566512C2E2D4E4461,01034752203A=172F3B0B23=>0F171511793F76584C,0347200C1D20=2D39091521=>0F175B3975660745514F2B4825201E211D,010352292E2E=0F1B273303=>0F170070792C2E261F,040341232228=05111D2935=>0F1700707129385C363F3D1F1E232226,80412B202F14=14202C3808=>0F17000728705448757A,522E1F15562F05=30000C1824=>0F17000102061979454F3A15477677,241F8A2021=2F3B0B1723=>0F17000102060370392E52838453331F,452F2C266A79292B203810=0C18243000=>0F170001020E032A70692C2E302F802D2B0D7129474C201F2322,5211183809615D34=1A2632020E=>0F171170792F5B1566770001032C2B802D,29387C207134=14202C3808=>0F0D33000103452E528384297115752620,63386F7014=15212D3909=>0F7045332C2E71201F1D21,4701155229530327=101C283404=>0F70161715232238838426271F20,7D035219=121E2A3606=>0F705B0004037C5D15653F1F26,522B473809=131F2B0737=>0F705215261E20,012E1F25=182430000C=>0F707B7C00012F75,52201B=2531010D19=>0F706A151E201D528384544466,47010C2E292F2C3820=14202C3808=>0F707500261E20,382E1F05=3606121E2A=>0F161A17452F0D33712C2E2B5443633F,150170208A0327=0E1A263202=>0F150370002E0D3979528384532971331F1E20,477D0D=06121E2A36=>0F5B8370000102060403161A494447,386A418A201A=17232F3B0B=>0F03700D332C2E2971152F52838463,01004547380C26=101C283404=>0F03700D33195284835329711563,01260038206B0E=131F2B3707=>0F03706A4F0D332C528384532E29711563,450075000F=131F2B3707=>0F0370010239332E2C19528384532971156375262720,8D18=17232F3B0B=>0F0370390D332C192E2971637547202322,581528=0E1A263202=>0F0302791566046F,29710D722A38528384202E4530=0E1A263202=>0F030102392E15634447001F1E,293845200D707538=1E2A360612=>0F0300017039712952542D2C302F80380D2A363F3349483E616320,1118150C1F2E20=33030F1B27=>0F03000102700D29713963451F0C20,528338542F15806128=121E2A3606=>0F030001027039452971150D332C2F6327,2052838403=2C38081420=>0F030001022A0D3945297115528384630D7020,476A382E1F4426=010D192531=>0F03390D332C1929711563261D2E2322,382000521118750C706B15=131F2B3707=>0F033915666A52261E272048,382E2F6329712C0114=0D19253101=>0F52838403700D332C29712E1F27201E2322,1545017505=131F2B3707=>0F528400012E7129,092026=3707131F2B=>0F528471295B795D2B155333565A446375661F201E272621,00016B0C4113=14202C3808=>0F280001363F8B4326232220,2E1F47032F7D35=16222E3A0A=>0F0211195465756679,2F384570202B6A10=15212D3909=>0F0102700D332C2E2F0319528384531529716345261F2322,8D32=101C283404=>0F0102037039330D5284832971152E1F0C,0026206B37=16222E3A0A=>0F003854,20521D2106=020E1A2632=>0F00175058,5D6B80382E16=1B2733030F=>0F00701784831952712C2E1526271F,033806201F=2B3707131F=>0F00701A17830E544C5C0E78,7129632E1F38208A452F16=15212D3909=>0F00040370396A742E15444948,458A384F2021=16222E3A0A=>0F005B261F20,2E2F1D=2531010D19=>0F0003450D3329712C2E2F1575,528A63705A20587D7C12=17232F3B0B=>0F00030D70332C2E3952838453542971156375,6B2019=1B2733030F=>0F000301020D297115332E1F0C,165220262E=121E2A3606=>0F00030102700D332E2C192971155383846375261F1E20,8D1F=33030F1B27=>0F00030102700D19297115332C2B535448,2E45208A00=2632020E1A=>0F00030102705283842E544779,2920454F754C3836=16222E3A0A=>0F0052037029710D332C15,7545584F8A201D2121=121E2A3606=>0F00074850,8A2036=0D25310119=>0F00071A706A717677492923221E202726,80522E1F39=1E2A360612=>0F006A385040740717,1F70631E=212D390915=>0F006A1938271779,565A4575522F801F1E632B=121E2A3606=>0F00010D0302703352838453297115632E,208A454F2B=0E1A263202=>0F000170390D332E2971152F63751F1E20,52846A381F=14202C3808=>0F000106387129,2E1F24=14202C3808=>0F0001062E7129,522010=0814202C38=>0F0001062871292E7C528384032C5C2A15767765,11185D8A206B08=131F2B0737=>0F0001067C1F20,522900=202C380814=>0F0001020D700339332C192A83842971152E1F0C20262322,065256386110=111D293505=>0F000102700D332C2E297115383F631F20,0347562B=14202C3808=>0F000102700D332C712E15261F201E,80036A61473831=0C18243000=>0F000102700D335283845329711563,38048A7D45202A=14202C3808=>0F000102702E15471F1E,294F2B452C2F268011=0D19253101=>0F0001022E792D3E75663D19,472063703852292B39=222E3A0A16=>0F0001022E154826271F1E203874362322,036312=0D19253101=>0F000102032971152C2E19,4720637038522B15=111D293505=>0F000102030D70332E3919528384532971152B2F201F0C,8D1B=232F3B0B17=>0F000102030D7033528384534529711520,63475814=131F2B3707=>0F000102030D332C2E195283845329716375261E2322,8D19=15212D3909=>0F00010203700D332C2E1929711552838453637526202322,8D09=111D293505=>0F00010203700D332E2F192971152B52838453631F20,8D33=1A2632020E=>0F00010203700D332E2F1929711552838453261F201E2322,8D03=2E3A0A1622=>0F0001020370332C2E2F1575261F,2971476A458352380C=111D293505=>0F0001020370332E2F0D19297115637566302B2C3979,8D08=000C182430=>0F000102037039297175261F1D21,454F2E1563410F=17232F3B0B=>0F0001020370390D3319297115632E2C752620212322,8D07=3606121E2A=>0F0001020370390D332C1929712E157563548384534C,20248A38=16222E3A0A=>0F0001020370390D1952838453542971631F0C,152036=14202C3808=>0F00010203703915632719792322,80262045297158750F=111D293505=>0F00010203528384157033,752971206B452F2B262E05=3404101C28=>0F00010206030D7129302F79802D7C7C2B5C4744,11701D2052843833=111D293505=>0F00010206181139702E1F686F6A792D2C2E304E15337566491F23221D21,52296B0D800D=15212D3909=>0F000102070D70332C2E19528384297115637526201E2322,8D05=2C38081420=>0F0001021A175D2C19152E302F7183846379,8A20704F7545410A=131F2B3707=>0F001A651707,565A58202E1F476320=121E36062A=>0F11707B7C5271291E20,2E1F39=111D293505=>0F11700001522E71291F20,2B07=131F2B0737=>0F11700001397129,2E2002=111D293505=>0F11707129,2E1F2002=131F37072B=>0F1152702E2F71291F20,000103=131F37072B=>0F1152702E2F71291F20,7A3A=111D293505=>0F117B7C2C2E71291F20,520300=111D350529=>0F110001702E2F71291F20,0621=101C280434=>0F11000170717B,522E1F0A=06121E2A36=>0F110001708471292E1F20,03388051561C=121E2A3606=>0F1100017B7C702E7129,522B22=2D39091521=>0F110039702C2E522F1574487B7C2D4E804B,098A204538612B=05111D2935=>0F1118795B65170002195D,52382E8A201E=2531010D19=>0F111829711500010370390D332E750C201F,4552832F382B8004=2A3606121E=>0F1118175C000301027039450D29332C2E2F15631F,8A582020=31010D1925=>0F1118032A0D545283841A802D2C2E2B71296366774744201F26232221,010900150C06=2C38081420=>0F11180300706A2E1549466319,292F26806B382B20754506=2E3A0A1622=>0F1118528384530001035C53702971152B332C2E63201F1E23222621,6B75452D4F802E=111D293505=>0F1118060300017B7C792E39767566261F20,7129805136=232F3B0B17=>0F111800171A454F514E3A3871157765443D23221E262720,80612E1F1C=212D390915=>0F11180003706A4F0D332C2E1929711571335363751F20262322,524746416128=3B0B17232F=>0F111800037039450D2971332C632026,1F2E2B38528327=3B0B17232F=>0F11180006032A0D700D332E011954838471152C202322,58477D630C=0814202C38=>0F1118000106287129705B032C2E302F802D4E2B201F,528458384108=380814202C=>0F11180001027039302971542F7526201E,63472E151F583A=1E2A360612=>0F1118000102030D70332C2E192971158384535426201E2322,471F1B=1F2B370713=>0F1118000102030D70332C2E195283845329711563261F0C20,4745752522=3505111D29=>0F1118000102030D70332E2C192971153953631F0C262720,5284612528=390915212D=>0F111800010203700D332C2E192971152F4B49471F270C2322,52562B2029=390915212D=>0F111800010203391929710D1552838453,2075708A456309410F=0A16222E3A=>0F111800010206032A0D09717029092D302F1575761320,521F47251D=1F2B370713=>0F1118000102111A1703154F2C2E382D2F807566,7163708A1F207D2A=05111D2935=>0F111800017C5C2C2E7129,527015382021=2B3707131F=>0F11185C0370332D152322528384636626271E,2F292C2E1F00010601=2430000C18=>0F11185C0001092A0D7014692983847B7C2C2E302F802D2B,06454F208A2E=0D19253101=>0F11181200171A7919547638,5215201D09=3A0A16222E=>0F1A1716007015713F261F2720,5263587D2B470304=111D293505=>0F1A0070153871291F20,7A7629=010D192531=>0F181179005B712980152D4E2A0D533358,5270208A11=0814202C38=>0F181138171A7975665B52845415,47701F8A2013=121E2A3606=>0F181117795B5C007054292A0D690403332D2C2E66632B3D,8A454F3822=121E2A3606=>0F1811705200012E71291F20,382A=16222E0A3A=>0F1811705200012E71291F20,062B27=14202C0838=>0F18117052000171291E20,2E1F27=16222E0A3A=>0F18117000012E71291F20,527A06=111D290535=>0F1811700001062E2F1F20,712912=14202C3808=>0F181100062839707952542C2E302F03565A7566441F1E,0D29802B2029=1824300C00=>0F181100012C2E7129,522025=121E2A0636=>0F18110001261F20,03522E=0915212D39=>0F18110001702C2E7129,6F454F098A2025=030F1B2733=>0F18110001702C2E71291F0D2B152F2127,5283162014=16222E3A0A=>0F18110001707B7C0D7129,52565A152B2034=17232F3B0B=>0F1811000104037115454F7677657B7C392023222726210C,52092E1F27=3707131F2B=>0F181100010603797B7C802D302F2B6743441F202322,2952477D2528=14202C0838=>0F181100017B7C2E71291F20,036F33=0D19253101=>0F18110001027939706954528384685D15565A75201E1D26,29032E11=182430000C=>0F1811000102062A0D2C2D804B2B672E2F7129,70471F8A2030=17232F3B0B=>0F5C707971292C2E0E032A0D6A79804B2D8C2B3348634C,52110915462031=15212D3909=>0F5C5B0001032A0D7052842C2E71291F20,1118517D462B=0F1B273303=>0F5C111800015B712952841F20,756A251A=2733030F1B=>1545332C2E2F84836375662620,0F0003700D71292B1C=0E1A320226=>1516291211020056,06382007=000C182430=>1551000403706A454F3A3D771F262322271E1D21,382B41522016=17232F3B0B=>1500443626271F1E,29710F47380D19520337=182430000C=>150001021745512E443D65262322,2B63387C18=192531010D=>151A83842627202322,580F7003632E1F297C26=0E1A263202=>15391A302F83845475662627201E,0F702E4629004708=3606121E2A=>5B000102073911522C302F3A678C363F33490D482425200C1E2322,0F15382E1F6116=1E2A360612=>5B71297000010611182A0D39792C2E332D4E712980152C1F202621,52454F3804=2C38081420=>5B11180001020328700D332C2E195283847115632F751F2720,290F476630=0C18243000=>201E27262322,8902=3404101C28=>2A0D11180F52848353037039156358332C2E,3820002628=010D192531=>4089,030F565A61206B27=1824300C00=>4089,8836=1C28340410=>0370833F0F6A5215,010D582E1F202C2F582938=112935051D=>03700F,79192C2E2D715275262322271F201D217936=112935051D=>0370110F45510D3371290941614C522623222720,8D3B=152D390921=>03047039171A533852443D363F,8D11=0F1B273303=>030402111A16175B4F3A2B153E0079015D5452848369026A51,7006200F05=0F1B270333=>03041A174533302F56795B3E808339528454,700F292026=121E2A3606=>037B7C2E2F261F20,0F14=1E2A360612=>030270170F45513A2C7129528384702A0D532D2C24252623222720,155A382E1F2F=1B2733030F=>03027011170D332D2C2E2F716152838454,010F201F2C=121E2A3606=>03027039450D332C2F2D2971528384636626202322,581535=212D390915=>03020E0F18110D332C2E2D2F4971293E615244756653,8A202531=1B2733030F=>030102703945802D2C512B7129092322270C7566,112E528325=2D39091521=>030102062C2E543E3D636679,380D19462971001F=293505111D=>03111A171538193E3F,0F632C2E70454F200C19=17232F3B0B=>031A2B7915656A,0F177001204529710D632E2F02=32020E1A26=>033945302F838475262720,297071000F2E1F3810=17232F3B0B=>0339332C2E1575201E26,0F520D631F29712A72473826=390915212D=>0339332C2E302B66201D1F27,0D2971010015520F6B0E=15212D3909=>03392D2E332F211D201F1E27,0F7015380029710D195824=16223A0A2E=>036F791E20,522E1F31=1D29350511=>5283845B79037B7C802D2C2E4E302F2B38493D4463664C1F2021,0F0D712917=15212D3909=>5283845303702971150D2F,388A6A6D0F2012=111D293505=>528384530370331929272E2B2F631F1D20,0F156B380E=0D19253101=>528384530339454F0D297115332E2F637520,0F00705802=2A3606121E=>528384530339332E152C2F58631F20,380D000F2900=283404101C=>528384530003010215392C20,1112180F29560D2E1F754511=15212D3909=>5283845300031929150D332C2E63,0F217045208A717521=3505111D29=>5283845300010670528384802D2C2E4E155B201F1E232221,380F71296A0E=17232F3B0B=>5283845354037029711575262720,631F58000F2E38010D=111D293505=>528384000103451915332C2E631F2720,29716A0D0F7019=1D29350511=>5283840001032E1570637566302F391F,0F4729712030=16222E3A0A=>5283845479036A2627201E,0F380D70297115012F1A=1F2B370713=>528384542E03700F1118705469565A7566631F1E2021,297138000C31=121E2A3606=>52838454443D65002C2E15495D1F,0F417D712B38630F=0D19253101=>5283845444360F11756415,2C2F29016B472E2B20381D=212D390915=>528384545363000103332E15,0F1F197029710D757D2032=121E2A3606=>528384546315332C2E2F26201F2322,0F0D45002971756B17=192531010D=>52838454754C2971150301022E,0F63206A0938268A4117=1B2733030F=>52848353000103297115332E2F19,0F8A514F6A6620754526=1824300C00=>528403395B2F1E20,0F012D=0B17232F3B=>5254700001020612692D4E584647336375662E1F1E,71290D262037=131F2B3707=>525400045B17791A565D754C7866,2E1F207C34=0F2733031B=>483F89,8838=232F3B0B17=>767779392623222789,152B1F1D200E=0A16222E3A=>767789,528300292025=14202C3808=>7665261F20,0F291A=222E3A0A16=>7665262322271F201E21,0F0029807124=1824000C30=>7889,292E1F24=101C283404=>8D,8832=1D29350511=>63767789,522E0006206B31=131F2B3707=>7B7C343589,0F7038=2632020E1A=>7B7C343589,520F20=0E1A260232=>7B34,8812=1C28340410=>02703918110F7919155283756626232227201E,012C2E1F0C29=121E2A3606=>020F11161A17454F2C2E2D302F2B38434C,2070016328=1824300C00=>02060418110D332C2E415B637566262322271F20,520F23=142038082C=>07504089,0F010C=15212D3909=>07262723221F40,0F7129523B=2430000C18=>0717363F1A2C4F3A67433D8B,71290F0103471A=2531010D19=>0704031118528384542D2E4E49201F1E1D2127,292B000C3B=283404101C=>073F7765644889,012014=111D293505=>074048261F202322,0F71454F1500018008=111D293505=>07404826271F1E2089,882C=0D19253101=>07565A5283845463756677261F20,010F15296120=2F3B0B1723=>07487677393F89,0F2952151F1D30=111D293505=>074889,06520F3808=17232F3B0B=>074889,883B=131F2B3707=>074889,8832=15212D3909=>07762623221F1E20,000F1552296B2F2A=0D19253101=>0776776A742623221F200C211D1E,11180F2F5206802B0B=04101C2834=>0776776564,000F29382011=101C283404=>0706397B7C794C636A48,520F7129472026=14202C3808=>077C343589,880A=380814202C=>076A79040363660F5D363F,52292E1F20382F15560123=16223A0A2E=>076A696819,0F2918=222E3A0A16=>076A171552847983546578,712970010F2D=182430000C=>076A48,45752F29384C0F204F612B30=131F2B3707=>076A7626271F1E20,0D0F29382F2E0E=0814202C38=>07343589,065238=1C28340410=>070039201F0C2789,06030F292F23=101C280434=>076564,0F292002=0D19253101=>073918111A17332C2E71292322271F1E20481D45548384,38002F702A=1824300C00=>7C343589,8801=172F3B0B23=>6A79363F65,0F292B7118=1B2733030F=>6A170F19,5845754C201F4F382430=1B2733030F=>6A170F1963766F,5452201F32=0C18243000=>6A0339332C20528384531563,29713801000F0C47806B3B=2A3606121E=>77766564000789,0F52201E8A01=202C380814=>1F2027260076232289,0F29528339=0F1B330327=>3435,8809=0F1B273303=>34357B7C,8818=121E2A3606=>34357B7C7789,0F291D=232F3B0B17=>34357B7C89,0F2021=33030F1B27=>34357B7C89,030F27=390915212D=>34357B7C89,712917=1D29350511=>3435073989,8802=2C38081420=>34357C89,0111180F292006=30000C1824=>34357C89,71291A=14202C3808=>34357C89,8A2036=182430000C=>3435000789,8835=232F3B0B17=>34350089,0F2025=3707131F2B=>34353989,0F2037=0D25310119=>343589,0F52202D=0F1B273303=>343589,0F7152290D=131F2B3707=>343589,8830=121E2A3606=>343589,881C=16222E3A0A=>343589,8819=131F2B3707=>343589,880F=15212D3909=>343589,8832=14202C3808=>343589,8813=0D19253101=>343589,8811=17232F3B0B=>343589,881E=142C380820=>017018110F1A2E15495247838463462322271F,8D03=0F1B270333=>0103040818111A155284262322271E20217A79708330,38472E631B=14202C3808=>010670170F0E3A294152838454262322271F201E,2E1815442C=0F1B273303=>01067071292C2E1F20,1103150F520A=17232F0B3B=>010670181126271F202165,293816=182430000C=>0106111839513A2C2E2D2F8C804B4723221F63,7152292037=0F2733031B=>010203040618110F3315292A271D200C6339171A712C2E30491E21,7A21=0E1A260232=>010206040318110F2E292A27200C70072C302F541F392B49,381512=1A2632020E=>010206110F452C2E7129095B5226232227201F0C,58804B036B2B381C=142C380820=>01023918112E2D493E52756624262322271F20,8D12=121E2A3606=>008354,06462F2E1F27=030F1B2733=>00797084831754,0F2E472D4E1F06=0D19250131=>0079701811072C2E01060F33152627200C7A1A302F4576631F2B,8052382900=172F3B0B23=>00790F072C2E0103047018111A262322271E7A302F5448637545,293815561E=101C340428=>007952151E20,0F2E1F33=0F1B273303=>007984831A160F1719,632E20471D6B01=152D390921=>0079110F0304062A528423222627207A19701A2C2E2F5D83,294513=0F1B273303=>0079181A165B332F2B262322271E2021030469702D4E49712930845D,454F05=152139092D=>0079192E2F030417332D1552847A5D,4E201F=162E3A0A22=>003826232277,632E20523A=0D19310125=>0038262389,521513=1C28340410=>00384089,0F202E157C07=04101C2834=>00384089,152967631F=101C283404=>00384740,0F2037=1C28340410=>00387765504089,0F157C04=131F37072B=>00385476,521F13=16222E3A0A=>003854767789,2E1F522010=131F2B3707=>003854637519,205D1D1F52151E210F=121E2A3606=>003889,52201F1D4733=121E2A3606=>003889,881F=212D390915=>001D23221E2789,52290F2E1F202B=07131F2B37=>002C7080305C784C62,2E1F472001=283404101C=>004D64547589,0F292E=131F2B3707=>005040,522E1F0F2C2004=3404101C28=>005089,032C2E1F33=182430000C=>005089,8815=192531010D=>00261F23221E201D2189,8D12=131F2B3707=>00261F2322271E200C89,8D1E=121E2A3606=>0026271E20,2F2E1F33=16222E3A0A=>002627241F1E20232289,8D33=14202C3808=>002627651E2027232289,881B=182430000C=>00262789,292C2E1F2B2F2A=07131F2B37=>00262322271F1E203F8B65,52290F038002=15212D3909=>001779332D2322271E2007760304,38290F1C=1F2B370713=>00173883546365756619,466115201F701D47522434=0D25310119=>00170F79191A6540,712909387C2015=0E1A263202=>00170F332C2E2D2F802952443F26232227201F,15637C383A=132B37071F=>00170F7665776489,8D2A=390915212D=>00177689,0F52804F2507=2E3A0A1622=>00177179546A76,0F52443D1F2D=0915212D39=>0070,0F292C2E791F13=131F2B3707=>007083624C,0F38202E7D4F45471F7107=380814202C=>00704F0D332C2E2D15363F261F20274C,0F2906036F4703=3404101C28=>00702C2E164C157126271F1E202425363F,29386A032B0F=0F1B273303=>00700F1715262720,472E386309=15212D0939=>007022230726,2E17712952302F15=15212D3909=>00704889,8834=1C28340410=>0070784889,0345201F21=2D39091521=>007007482089,2E1F58470B=0D19253101=>0070071A010618110F5B52846775,6326202E=16222E3A0A=>00701A17794C0F302F715475,2E454F8A20243A=0F1B330327=>007018111A1617192E15382627201F656477,4F090A=0F1B273303=>002E2F18110F5B3315292A26271F20210C7A70710102393E19,035A37=14202C3808=>002E4344793F26271F20,03702C2F292B381A31=0E1A263202=>00161A5D454F153826201E27,7D0D2904=152139092D=>0004037039180F332D152952262322271F0C533A83,4117804735=1F2B370713=>0004037B7C0F79494766754667,80293869208A1E=162E3A0A22=>00040301067018111A0F332C15292A261E200C7A791970712F5D52838454,5617454F06=3404101C28=>000403110F527079156523221E2027,0129802E1F6B1D=1830000C24=>0004031A170F11332C2E302F1571292A657677451949,70201D5218=102834041C=>0004031811171A5B332C2E155D52,0D29204504=17233B0B2F=>00040318110F1519262322271E2021,52831F3825=3B0B17232F=>00046A7966444C7765,010C202F38520F70292E31=14202C3808=>003F261F202789,8836=131F2B3707=>003F657789,7152290F032B3A=2632020E1A=>003F651F0C2027232289,0F292B=16222E3A0A=>003F89,8836=212D390915=>000F76,032E1F522C292B22=2B3707131F=>000F7765,2E1F7C4607=0F1B273303=>000F01111A1615292A2627200C2C670279538384543E49,634512=0F1B273303=>000F1320,6380382936=0F2733031B=>000F1323222627,2E3829031535=0D25310119=>00676589,0F200F=0C18243000=>00401D232289,71290F47202B=101C283404=>0040395089,8803=30000C1824=>004023222089,0F291118470D=0A16222E3A=>004089,0F5211=1A2632020E=>004089,0F0147200B=3A0A16222E=>00037039454F0D332971152C4C48,090F476341382E0A=111D293505=>00037039041A26271F1E202322,0F2F2C335129452E0D3A3B=222E3A0A16=>000370396A450D332F4B154C,0F208A7D41381F2E14=0F1B273303=>00030401061A16170F332E71292627200C02696A45514F0D2C2D4E497A,2B0B=0F1B273303=>000304111A33152D2E302F71292A5284530770022B,0F6345203B=0F1B330327=>00030418111617332E2D2F292A52845407020D302B,090F452001=0F1B273303=>000304080618110F1A2E2D0D3371292A2C302F7566010239454E802B,632039=2430000C18=>00036A7415384878,45751F20240F522E834F2E=182430000C=>000301394F2E154763751F27,0F707A802629710D192035=14202C3808=>0003391983845475,2E1F0F6A702971722A0D04=0F1B270333=>00483F,6338200F2A=3B0B17232F=>00481F2023221E27262189,0F292C2E1B=122A36061E=>0076645089,8819=202C380814=>0076777566262322271F201E,0F111852290D=101C283404=>00763989,0F2036=1E2A360612=>00788B89,0671292E25=010D192531=>00784C00793989,0F29702E1F208A21=31010D1925=>0006261F1E201D212322,0F2938111801=2A3606121E=>00060403702C2E4C154947443D651F,0D2920=101C283404=>0006522E261F20,0F712939=2632020E1A=>00060724232227261F2025,520F157929382F22=31010D1925=>0006547677,0F5229151F201B=0E1A320226=>00061A161718110F292A0C26271F212A79700102212F49,470D=0814202C38=>002876396577261F20,5283290F37=212D390915=>0028397976771E232227,0F522E47442027=121E2A3606=>006389,8822=101C280434=>007B7C3989,881E=1830000C24=>007B343589,8805=2E3A0A1622=>00021719792B155D5466774962,010611180F292030=14202C3808=>00020370454F0D3933192C2E2D156375261F202322,0F7123=0E1A260232=>0002070818111A16175B153E445D5452848365647576,2038454F15=182430000C=>0007385476771548,52061F2024=2D39091521=>0007504089,0F29157030=15212D3909=>0007504089,060F71702F2918=15212D3909=>0007504089,880B=17232F0B3B=>000770171989,0F2E20382F=0B17232F3B=>00077089,522E1F8A202C=07131F2B37=>000704036939487C4466,0F7011293821=1824000C30=>000715547776,521F18=0E2632021A=>0007030401021811171A0F2E2322271F1E706749528483,202F293800=0F1B330327=>00077663,0F297138202C=0B17232F3B=>000776776548,0F1118152E1F2017=121E2A3606=>00077665776489,52830F208A14=1A2632020E=>00077B7C4834353989,2952203B=2632020E1A=>00076A386563,0F7D8A2066454F52754C15=1E2A360612=>00076A0F3874485040,06707C2509=3606121E2A=>00076A74504089,5229702C7D15=14202C3808=>00076A74173926271F1E20,0F7029522B09=000C182430=>00076A54196348767765,7920297115528A0D382B16=101C283404=>000734357B7C3989,0F528329200C=06121E2A36=>0007343589,290F7104=2E3A0A1622=>0007343589,0F292F702012=182430000C=>0007343589,0F71296B708003=15212D3909=>0007343589,7129706300=0D19310125=>0007010618111A332D302F15262322271E530270164C,560F712924=0E1A263202=>000701020618111A175284835407230C7027,262038292C=111D293505=>0007711F204840,010F29153814=17232F3B0B=>00076527262322,1552835A201D0F382D=0D19253101=>0007363F8B3989,09292C208A0F28=030F1B2733=>000739483F66,0F208A2B0A=04101C2834=>0007397B7C343589,0106522008=020E1A2632=>0007396A48343589,0F203A=283404101C=>00073934357B7C89,0F5223=3505111D29=>000739343589,032010=0A16222E3A=>000739343589,520F2F=111D293505=>000739343589,8A200A=15212D0939=>00077A7089,8817=17232F3B0B=>000789,8D3B=172F3B0B23=>000789,8815=1B2733030F=>007C343589,881B=212D390915=>007C343589,8812=15212D3909=>006A79190F6F2627,6B46204538290B=380814202C=>006A38075040,0F630141202B454F2D=121E2A3606=>006A5040077448,702B2C0F2F292E=0B17232F3B=>006A583F232227261F20,0F291547031C=232F3B0B17=>006A6F391974,0F2E614447702C292F71201F38521F=31010D1925=>0034353989,522E1F2B=0D19253101=>00343589,060F5200=2A3606121E=>00343589,7129565A01=131F2B3707=>00343589,883B=111D350529=>00343589,8800=152D390921=>000150402627,0F292F2B1E=2733030F1B=>00010F17505840,565A80385283846315=101C283404=>000103020611187B7C2D4E616439201E0C26,522E474429=101C283404=>0001030239450D297115332C2E4C,0F542070528438632C=101C283404=>000103392E54837548,19700F58157A20381F=1830000C24=>00010670175B71292A152322271E,03637C2B380F=0E1A263202=>0001067052842E71291F20,030F38477533=131F2B3707=>0001067011185B0D332C2E2D712909262322271F200C,0F5263250C=17232F0B3B=>000106040318111A170F33292A26276A201D0C7A71077C1F1E74694F,520A=0D19253101=>0001060403232226380F767754,568020152D=111D293505=>000106025B7571295B04032D302F382B2A0D801E20,2E1F0F0F0C=0D19253101=>00010607155B5C26271E2021165D83,38470F2920=16222E3A0A=>000106073018110F3329271E0C7A0D75,3826201508=0F1B273303=>00010618111A16332C2E2F2D27200C07483A450D,1552843825=0E1A263202=>000102261E2027,03476F700F2971382E39=15212D3909=>0001027007834878,2E388A201D17=131F2B3707=>00010203450D3329152C2E2F5375,0F638A6A1D8A382D=0E1A263202=>000102030D70332C2E29712F534426201F1E,0F38152F=121E2A3606=>0001020370450D332C2E2D152971,0F52838A201D1B=1D29350511=>0001020370528384631575712D2E4E3E581F1E1D,292C2B452620803A=222E3A0A16=>0001020370392F2971152B54754C,458A1F0F20462C=14202C3808=>0001020370392F80712B546675201E26,1F58472E152F=16222E3A0A=>000102037039714515750D33,201D381F092E0F1103=32020E1A26=>000102030F7039453319152E2D2F63751F0C1E20,71290D38472C=16222E3A0A=>000102035270392E2D5863,0F381D2B2921201511=131F2B3707=>0001020352666A,0F7020262938172F3A=2430000C18=>00010203332C2E2F1558631F,0F1920707A2971264627=05111D2935=>0001020311180F702E1F7952838468332D6749443E46630C1E1D21,292B2035=1C28340410=>000102031118396375664819,1D4138702080291F=232F3B0B17=>000102033945332C6375201D21,0F1929710D702D=101C283404=>00010203390D3329152C2B751E20,2E1F54475352458316=111D293505=>0001020339161745514F2C190F1A16152E2D2F304979,8D13=17232F3B0B=>00010203396A79637566201D211E,29387D71707A30=101C283404=>000102033911170D3319152E2F0947442627201F,8D25=3505111D29=>000102031811392E2D19528384543E4463751F20,152F1A290F0D=0E1A263202=>0001020626232227201E,0F2E03801F0F=101C283404=>0001020617385483,030F47202B6B1B=2733030F1B=>000102060F17705283797823221E2027,2E712910=121E2A3606=>000102062A397129797B7C2E1F2425,162F5D20262B=182430000C=>0001020603691817452C2E2D498344,412B6A09633808=3A0A16222E=>0001020603700F7B7C2E1F692D48302F565A586366240C21,2B151A292039=17232F3B0B=>000102060717706A33392D2E4E674447482322271E210C,71292B4F2023=33030F1B27=>0001020607036A5D397C7C2163664744,0F4E25208A08=04101C2834=>000102060775261F20,71290F70150C=101C283404=>00010206111803302F565A802D4E2B881F261E0C,0D0F521B=16222E3A0A=>00010206090D5B7952838454685D7B7C443D77656366201F1E,030F47454F24=010D192531=>000102071283542627201D210C4C78,29580F2E6352032E1F01=32020E1A26=>00010275261E0C2322,6303706F0F292E1F19=0E2632021A=>000102081A158483262322270C1E,700F292E1B=101C283404=>00011A1615262322271F1E200C214C,472B0F1124=3707131F2B=>00013974150726271F1E200C,0F06520D297170382B4507=17233B0B2F=>000118111A16175B154C26271E200C232279302F5D528384547543,0F297C7A03=17232F3B0B=>000118111A332C2E2D1571292A2627200C7A1979,387C02=172F3B0B23=>000118111A332C2E2D1571292A23222627200C7A791970302F5D5283845456,387C454F1F=0E1A263202=>0001081811171A160F1571292A26271E20396476452B0D,632E523813=15212D3909=>00211D1E232289,8D16=0E2632021A=>006526232227201F,8926=05111D2935=>00657689,6B0F5225=16223A0A2E=>00654C89,8D03=2A3606121E=>006589,2970472008=15212D3909=>001A170F5B332E2D7129261E203E5D,1503528306=152139092D=>001A170F1379232227761926,71293833=1C28340410=>001A1715838444363F261F1E200C2322,0F476B52036338=14202C3808=>001A2B5448701938754C,152E20242510=0D19253101=>0039504089,8D39=283404101C=>003926271E20747677642322480C06,2E1F38=0F1B273303=>0039262322271E201D210C0748766465776A,150F382939=202C380814=>0039332C2E2D2F152B4644261F1E,0F7019382971637A31=192531010D=>0039787989,1F2E2010=101C283404=>0039787089,2E1F8A034F206B29=05111D2935=>00398B7989,0F200C=131F2B3707=>0039077426271F1E20,0F29713852832B632D=14202C3808=>0039076A7426271F2048,0F79197029717A382C=0E1A263202=>00397C343548,8929=3B0B17232F=>003934357B7C89,0F2028=16222E0A3A=>0039343589,8D34=16222E3A0A=>0039343589,880B=111D293505=>0039343589,8805=17233B0B2F=>0039343589,882E=101C283404=>0039343589,8806=17233B0B2F=>00390103040618111A17332C2E262322271E157A7071302F45631F2075,807C2B=0915212D39=>00396577647969271E2322,52012E1F2620612D=16222E3A0A=>00391A6A15384C4943363F7448,0F0379472B6319=192531010D=>00394C786F89,0F2E442035=182430000C=>003989,882A=121E2A3606=>003989,8816=13191F252B313701070D=>003989,8801=0D19310125=>003989,880D=0F1B273303=>0018112C2E01040607332D292A09270C2322696870302F47023945,382052801C=101C340428=>00190F153917701A48,472E1F200334=1F2B370713=>00195475667689,5229152E2019=222E3A0A16=>004C504089,0F5215470A=3A0A16222E=>005C702C2F802B154C78,5A562E1F208A45466319=102834041C=>0089,090F1538=131F2B3707=>71297C790001062A710F802D,5215705D2F=0E1A263202=>7100030170391959152E2D2F2B39,0F201F4F75668A3824=030F1B2733=>5483846376656419786A,298030201A=2430000C18=>5452838479195D00012A0D7B7C2C2E3348156366242526201E,0F71292D=07131F2B37=>54528384700001020339482D301571565A363F637566,06292B201F8A29=030F1B2733=>54528384036F796A153E65,7129631D=2733030F1B=>5452848303152F802C2D,2E1F208A7A700F29710C7D22=33030F1B27=>118384155B20272E1F21,0F03380E=0E1A263202=>1179302F842627201E,0071292E1F0E=06121E2A36=>11177B7C52842C2E5B1F20,060071292F0F0E=101C283404=>110F70528475660D7129,012E1F20262A=101C283404=>110F03706A795215636626271E,0C012F38062C292B07=020E1A2632=>110F0001702C2E7129201F,52060C=0E1A263202=>110F00017052792E1F1E,71290D2B2020=293505111D=>110F1A6A702C2E1952838453712F6375,45201500011D=101C340428=>11037B7C2E2F7129,0F52200B=0E1A263202=>11000170792C2E7129,0F52201F01=111D350529=>110001527B7C2E75,0F2009=04101C2834=>1100010206702D804E2B2620,0F52540D00=131F2B3707=>110001392E1F20,0F712932=17232F3B0B=>11715452838454292C2E302D4E092A0D50407970443D,5680410023=2B3707131F=>111879690001020370396A2E2D528384543E637566,0F380D580F292000=222E3A0A16=>111879076A1A171523221E27207924,5229700F1D012E292B0C2F0B=06121E2A36=>111817000106702C2E71292A0D33802D302F4E2B44,0F52252029=07131F2B37=>11180F000704030D7C684580302F153867534775,70204119=2430000C18=>11180F00012A0D70795D7B7C39332D2C2E4E4863664C,064F478A2037=1E2A360612=>11180F000152548471702C2E2D4E303348492A156144474C63,8A201F38450618=202C380814=>11180F000128032A0D7129302C2E302F2D802B09411F1E20,5284543824=2F3B0B1723=>11180F0001020370391952845329712B632E7B7C792D2C8020,385D151E=293505111D=>11180F0001020339700D29716375662E1F2620,3815568016=16222E3A0A=>11180F000102587B7C5283847971302F804B2B497675,09612E1F201E=232F3B0B17=>11180F00010E715229702E79692C2E2D2B15093954444C6666,2F565A806132=131F2B3707=>11180F71297052838454792A0D33802D153853201F1E212627,012F56476628=3707131F2B=>11180F71297000010604032A0D793969302F33802D636675,201F52565A1E18=1D29350511=>11180F5C000102030D332C2E195329711563261F202322,52843A=202C380814=>11180370392A0D3329712C2F156375795B5D,450C8A00382E1F20010C=3A0A16222E=>11185283847975661271393D692D15565A201E262322,292F060D0C02=30000C1824=>111852838470795B302F404533802D152B39201E23221D212726,0F2E1F010D2923=2D39091521=>111852838453546319297115030D332B2C,060F8A2E38201F38=0D19253101=>111800020D041A796933483E5347446563751F1D212026,010F09150C17=2430000C18=>1118000717161A2C2E3371292B56433D6375363F,0F010347208A09=020E1A2632=>111800012A0D2C705271292E201F,1538617904=30000C1824=>11180001032A0D70795B2C2E302F802D4E152B33714161201F26,520958470A=000C182430=>11180001020439332C2E302F2B5844477515634C1F2721,0F520D19267A2971702037=232F3B0B17=>111800010206037939695483845D2D2E4E446375661F262120,0F52290D7123=31010D1925=>111800010206071979697C67474475664C,0F16298A2014=182430000C=>11187129705B79000106032A0D397B6F7C802D2C2B61756627261E0C1D21,0F2E15414732=192531010D=>111871545283842979397B7C69152B2A0D3348295324251F1D1E26,6B00702F800C201E=1F2B370713=>5D0007363F232227261E21,037C0F471F202E=0E1A263202=>6526232227201F,880E=111D293505=>653989,8806=131F2B3707=>363F6526232227201E89,8832=1A2632020E=>1A454F548384,881D=121E2A3606=>1A38712975,0F201A=0E1A263202=>1A162623227954,0001710F290C=0F1B273303=>1A16170F13152654,3852204F32=0F1B273303=>1A5D453A332C2E2F4B25262322271F201E1D21,000F704723=2F3B0B1723=>3950177089,522E1F0F201A=1D29350511=>39701117302F713819297566,004551152C2E201D1F34=121E2A3606=>393589,881A=15212D3909=>393589,882C=182430000C=>393589,8825=101C283404=>393589,881C=2531010D19=>394089,71294709636F7C440D=0D19253101=>3948007889,8D38=2430000C18=>394889,8811=111D293505=>394889,882A=0E1A263202=>3907,8807=0D19253101=>39343589,8831=101C283404=>393489,8801=222E3A0A16=>390050404C89,0F528329692018=131F2B3707=>39006A26201F,0F520D38580629712B09=380814202C=>390001022C2E302F1575804B2D261F20,0D0F0319707D5229717A15=17232F3B0B=>3989,8D11=0A16222E3A=>181179838454637566,0F5229012007=111D293505=>18117915384C,52200E=0C18243000=>1811795B032C2E302F802D4163754C27261E1D2120,010D0F29521F29=16222E0A3A=>1811795B5466,01202F=192531010D=>181179000607040D03302F5283844F3A45512B1533664C47,090F702E208A2B=0B17232F3B=>18117900012C2E5B1F20,0F710D52291A=122A36061E=>181179190E332C2E2D52637566262322271F20,8D02=0F1B273303=>181117332C2E1526232227201F1E3E,38030F522922=142038082C=>181170792C2F7129,52201F=121E36062A=>18117001061579,71292023=121E2A3606=>18117000012C2E7129,522024=3505111D29=>18110F390001020370390D3329711563752E1F0C201D,38525D1A=101C283404=>18110F197983842E230C271F1E7A70525463,2620291503=111D293505=>1811002E1F8384,0F2022=1824000C30=>181100012C2E2F1F,0F3821=142038082C=>181100012C2E2F1F20,0F5229=14202C3808=>181100015B3875,2E2034=15212D3909=>181100012A0D2C2E2F2B2D302F4E447129841F,0F09416138200F=0814202C38=>181100012A0D52842953411E20,2E1F0F47152F=131F2B3707=>18110001032A0D845B7129302F791533536678,0F208A1F1D33=17232F3B0B=>18115452840001712970802D2C2E302F2B2A0D78791F,0F204758610E=0F1B273303=>18111A16175B3315262322271F1E201D215D838454433E363F754551,00030F290D=0C18243000=>18115C0001702A2C2E2F5283847129795B6375802D154C,1F208A2407=15212D3909=>88,262052830D=17232F3B0B=>88,8D17=102834041C=>88,8D0B=15212D0939=>88,8D24=121E2A0636=>88,8D09=17232F0B3B=>88,8D13=111D293505=>1979,3F2F2E45207D37=112935051D=>1966583F6589,8831=16222E3A0A=>4C4089,880C=0C18243000=>4C78,297172380D2A2E0F47484112=16222E3A0A=>5C0F1811790070528471291F20,2F0380512514=1C28340410=>5C0001020652835B0E03804B2D4E2B752024210C06,292E565A36=1A2632020E=>5C11180001027170520D298483292B15200C,03802E386333=15212D3909=>89,6B34=111D293505=>89,8D';
  public static $TIME_YI_JI='0D28=,2C2E2128=,2C2E0110=,2C2E0C1F=,2C2E7A701B1C=,01022308=,01026D003026=,000106037A702D02=,000106037A702802=,000106037A703131=,000106037A70341B=,000106087A701F0E=,000106087A702E15=,000106087A702C2E0E39=,000106087A702C2E0D2B=,881727=,88032D=,88352F=,882B2F=,882125=,882A22=,880C1E=,880220=,88161A=,882018=,883422=,880113=,880B11=,883315=,882915=,881F17=,88150D=,88122E=,88302A=,88262A=,883A28=,880826=,881C2C=,881905=,882303=,880F09=,88050B=,883701=,882D01=,88060C=,882410=,881A12=,882E0E=,88380E=,881010=,883630=,881834=,880E38=,882232=,882C30=,88043A=,881E0A=,880006=,883208=,880A04=,881400=,882808=,883137=,883B35=,882737=,881D39=,88133B=,880933=,88251D=,882F1B=,881B1F=,88111D=,880719=,88391B=,88212D=,7A702C0B15=,7A70551515=,7A70552D00=,7A7D2C2E1334=382C,000106083528=382C,7A70000106080504=382C7A6C55700F197120,00010608223A=380006082C,01026D0D2C=380006082C,01027A70551D30=380006082C0F71295283,01027A703636=380006082C0F71295283,0102416D1226=380006082C7A706C550F297120,0102251C=380006082C7A6C55700F197120,01026D2300=3800010608,2C2E0324=3800010608,7A702C2E082E=3800010608,7A70552C2E3B34=38000106082C,2F8026330C=38000106082C,2F80267A701622=38000106082C7A70556C0F197120,1904=38000106082C7A6C55700F197120,1514=38000106087A70556C0F197120,2C2E3138=38000106087A70556C0F197120,2C2E0B10=38000106087A6C55700F197120,2C2E2B28=387A6C55700F197120,000106082C2E2E16=38082C,000106037A700E3A=38082C,000106037A703708=38082C6C550F197120,000106037A701B20=38082C6C550F197120,000106037A70111C=38082C6C550F197120,000106037A703A2D=2C38,000106082733=2C38,000106081015=2C38020F71295283,000106083817=2C2920,7A700F03=2C2920,616D1839=2C292070556C100F,00010608161B=2C2920020F7100010608,302B=2C2920556C0F1971,7A701E07=2C2920010F,1B1B=2C2920010670100F00,352B=2C292000010206100F70,082B=2C292000010206100F707A,0C21=2C292000010870556C100F7A,0617=2C29206C0F1971,7A70552807=2C29207A70556C0F197100010206,122F=2C29207A706C55100F1971,1017=2C29207A706C55100F1971,2731=2C20,616D0436=2C2070550F,7A7D01022E12=2C200F71295283,01021831=2C20556C0F1971,7A702912=2C20100F52,01026D1D33=2C807138152952,000106080E31=2C80713815295270556C100F,000106083201=2C80713815295270556C100F7A,000106080327=2C80713815295202100F,000106037A702B2B=2C80713815295202100F,000106037A702801=2C80713815295202100F,000106083639=2C80713815295202100F7A7055,00010608341D=2C807138152952556C100F,000106037A701B23=2C807138152952010F6C55,7A70302D=2C8071381529520102100F7A7055,2231=2C8071381529520102100F7A6C55,1F13=2C80713815295200010206100F20,7A70313B=2C8071381529526C550F,000106037A701A15=2C8071381529527A70550F,000106080219=2C8071381529527A70556C0F19,000106082E0D=2C80713815295208556C100F,000106037A70161F=2C80711529525670556C100F,000106083813=2C80711529525670556C100F,000106082D05=2C807115295256020F7A706C55,2237=2C80711529525602100F,000106081F0D=2C80711529525602100F55,000106037A702627=2C8071152952560102100F7A706C,2C33=2C8071152952560102100F7A706C,0939=2C80711529525601100F7A7055,416D021F=2C80711529525600010206100F70,0E37=2C80711529525600010870556C10,2129=2C8071152952566C550F,7A702519=2C8071152952566C550F19,7A702417=2C8071152952566C55100F19,000106037A70043B=2C8071152952566C55100F19,000106037A700C1B=2C8071152952566C55100F19,7A703B31=2C8071152952566C100F19,7A705500010603172D=2C8071152952567A70550F,416D3A2F=2C8071152952567A70556C100F,1901=2C8071152952567A706C55100F19,1119=2C8071152952567A6C55700F19,1C2B=2C80711529525608556C100F,000106037A701403=2C80711529525608556C100F,000106037A70071D=2C80711529525608100F55,000106037A701908=292C20,7A7D01026D2E0F=292C200102100F7A7055,032C=292C20000608,0102071C=292C206C550F1971,000106037A700E33=292C207A70556C000108,0503=2920550F,7A702C2E0721=2920556C100F,7A702C1225=2920000108556C100F,7A702C2E1F11=2900010870556C100F7A,032C201A11=297A70556C100F,032C200E35=297A70556C100F,032C20000A=70556C0F197120,7A7D3A29=70556C100F2C20,000106081C25=70556C100F2C20,000106082805=70556C100F2C20,000106082F20=70556C100F2C20,00010608150C=70556C100F29522002,7A7D000106033314=70556C100F,00010608032C20122A=70556C08,7A7D000106032415=70100F2C715220,000106081A0D=4B0F2C20,000106037A701902=4B0F2C20,000106080E3B=4B0F20,7A702C000106032E17=0F2C09382920,7A7000010603363B=0F2C093829206C55,000106037A70082C=0F29528320,7A2C71707D01026D0718=0F712952832C20,7A7D01021C26=0F712952832C20,7A7D01026D3918=0F712952832C2038000608,01027A70552126=0F712952832C2010,01021330=0F712952832C207A7055,01021118=0F712952832C207A7055,01023524=0F715220,7A70552C2E3419=20556C0F1971,7A702C2E1D31=2000010206100F,7A702C1E05=0270290F2C207A,00010608212C=0270550F,00010608032C200C23=0270550F,00010608032C203706=0270550F20,000106082C2E2520=0270550F20,7A7D000106032E13=0270550F202C807115295256,000106081620=020F29528320,000106087A2C71707D0112=020F2952832055,7A2C71707D000106030F08=020F20,7A7055000106032A23=020F712952832C20,2521=020F712952832C20,000106082F21=020F712952832C20,000106080003=020F712952832C20,7A700432=020F712952832C2038000106086C,7A701E03=020F712952832C2070556C10,000106081623=020F712952832C2001,2236=020F712952832C2001,000B=020F712952832C2001,7A70552C36=020F712952832C20013800,416D341E=020F712952832C20017055,7A7D0E32=020F712952832C200110,7A7D0329=020F712952832C2001107A706C55,262D=020F712952832C20017A7055,1229=020F712952832C2000010608,122D=020F712952832C2000010608,1011=020F712952832C2000010608,0A0B=020F712952832C2000010608,1F0F=020F712952832C2000010870556C,1A0E=020F712952832C206C55,7A703312=020F712952832C2010,000106037A70172A=020F712952832C2010,7A7055000106033B3B=020F712952832C2010,416D000106037A700B12=020F712952832C20106C55,000106037A700615=020F712952832C207A7055,3203=020F712952832C207A7055,201B=020F712952832C207A706C5510,2023=020F712952832C207A6C7055,2A1B=020F7129528320,000106087A702C2629=020F7129528320,7A702C2E3709=020F7129528320,7A702C000106083A24=020F7129528320,7A70552C2E341A=020F712952832038000106087A70,2C2E1C2D=020F712952832001,7A702C2E0611=020F712952832001,7A702C2E021A=020F712952832001,7A7D2C2E3815=020F71295283200100,7A702C2E3024=020F71295283200110,616D2C2E093B=020F71295283206C55,7A702C2E000106030505=020F71295283206C55,7A702C030C1A=020F71295283207A706C55,000106082C2E3705=020F712952837A706C55,032C201F0C=02550F20,000106037A700508=02550F20,000106037A703029=02550F20,000106087A702C2E3027=02550F202C807115295256,000106037A703526=02100F2C29528320,000106037A70150E=02100F2C29528320,00010608380F=02100F2C29528320,000106083527=02100F2C29528320,7A70000106031C27=02100F2C2955528320,000106081227=02100F2C29555283207A706C,00010608060F=02100F2C29555283207A706C,000106081D34=02100F7020,7A7D000106030F02=02100F7055528315,2F8026000106083920=02100F7055528315,2F802600010608212A=02100F7055528315,000106082A20=02100F7055528315,000106083A26=02100F7055528315,000106080439=02100F7055528315,000106080008=02100F7055528315,000106081B21=02100F7055528315,00010608071B=02100F7055528315,000106080D24=02100F7055528315,000106082C2E2C32=02100F7055528315,000106082C2E2B2C=02100F7055528315,00010608032C201402=02100F7055528315,00010608032C20391C=02100F7055528315,7A7D000106031F10=02100F705552831538,2F8026000106082D06=02100F70555283157A,2F802600010608290D=02100F20,7A702C000106032416=02100F20,616D000106037A702C34=02100F20292C,7A70000106031C2A=02100F528315,7A7055000106032234=02100F528315,7A7055000106032A21=02100F55528315,000106037A703313=02100F55528315,000106037A700509=02100F55528315,000106037A702D03=02100F55528315,000106037A700613=02100F55528315,000106037A702235=02100F55528315,000106037A70391D=02100F55528315,000106037A70100F=02100F55528315,000106087A702C111B=02100F55528315,000106087A702C2E2916=02100F55528315,7A2C71707D000106030430=02100F55528315,7A2C71707D000106033B32=02100F55528315,7A2C71707D000106081903=02100F55528315,7A702C2E000106033A27=02100F55528315,7A702C000106030931=02100F55528315,7A702C000106030C1C=02100F55528315,7A70000106032735=02100F555283152C8071,000106037A700B13=02100F555283152C807138,000106037A701517=02100F555283152C807138,000106037A702917=02100F555283156C,000106037A703136=550F522010,7A2C71707D01022A1E=550F715220,7A702C2E1333=550F715220,7A702C2E000106081405=556C,000106087A702C2E0433=556C,7A70000106083B38=556C0F197120,7A702C2E1E01=556C0F19712001,7A702C2E190B=556C000108,7A70230B=556C000108,7A702C2E1A0F=556C0001082C807115295256,7A701830=556C0008,7A2C71707D01023814=556C100F295220,7A2C71707D03082F=556C100F295220,7A702C0C1D=556C100F295220,7A702C2E00010603021D=556C100F295220,7A70000106031121=556C100F2952202C,7A701835=556C100F2952202C80713815,000106037A703B30=556C100F29522002,000106037A70290C=556C100F29522002,7A70000106030930=556C100F2952200238,000106037A702B27=556C100F2952200102,7A702C2E3812=556C08,000106037A701012=556C08,000106037A701621=556C08,7A702C2E000106033209=556C08,7A702C2E000106032021=556C082C807138152952,000106037A700009=556C082C807138152952,000106037A702A1D=807138152952000170100F,032C200A05=807138152952000170100F,032C20273B=8071381529527A706C550F,032C203423=80711529525600010870556C100F,032C201511=80711529525600010870556C100F,032C20183B=80711529525600010870556C100F,032C203311=010F2C80093829206C55,7A702B29=010F2C80093829206C55,7A70616D3A25=010F2C09382920,7A70550825=010F2C093829207A6C5570,201E=010F09382920,7A702C2E352E=010670100F2C71522000,1C28=010670100F7152207A6C55,2C2E2E11=0106100F7152,7A70032C203205=0106100F71526C,7A70032C202A19=0102290F20,7A702C2E2A1F=010270290F2C207A6C55,2413=010270290F2C207A6C55,0437=010270290F2C207A6C55,0935=010270550F,032C201B18=010270550F20,2B24=010270550F20,2F80261906=010270550F20,2C2E2732=010270550F20,2C2E071A=010270550F20,2C2E3700=010270550F20,7A7D1724=010270550F203800,2F80263921=010270550F202C29,416D290F=010270550F202C807138152952,1619=010270550F202C8071381529527A,3207=010270550F202C80711529525600,0829=010270550F2000,060D=010270550F2000,0001=010270550F2000,2736=010270550F207A,1B1E=010270550F207A,2C2E140B=010270550F207A6C,0114=010270550F7A6C,032C202C3B=010270550F7A6C,032C20201F=0102550F20,7A702C1A13=0102550F20,7A702C3637=0102550F20,7A702C280B=0102550F20,7A702C223B=0102550F20,7A702C032D04=0102100F2C29528320,7A701409=0102100F2C29528320,7A70552307=0102100F2C2952832000,0005=0102100F295283,032C207A700A00=0102100F2955528320,7A2C71707D082D=0102100F2955528320,7A702C2E2809=0102100F295552832000,7A702C2E2B2D=0102100F7055528315,021E=0102100F7055528315,0C20=0102100F7055528315,2F80263420=0102100F7055528315,2F80261510=0102100F7055528315,2F80262E10=0102100F7055528315,2F80262806=0102100F7055528315,2F80263134=0102100F7055528315,2F80261D38=0102100F7055528315,2F8026251A=0102100F7055528315,2F80263A2A=0102100F7055528315,2F80267A7D1120=0102100F7055528315,2F80267A7D0824=0102100F7055528315,2C2E1E00=0102100F7055528315,2C2E7A2F1D=0102100F7055528315,032C200A06=0102100F7055528315,7A7D2C2E1C2E=0102100F70555283153800,2F80261832=0102100F70555283153800,2C2E280A=0102100F70555283153800,2C2E320A=0102100F705552831538007A,2738=0102100F705552831538007A6C,2F80260720=0102100F705552831538007A6C,2F8026032B=0102100F70555283152C292000,1907=0102100F70555283152C292000,3703=0102100F70555283152C292000,2739=0102100F70555283152C29207A,251B=0102100F70555283152C29207A,2B25=0102100F70555283152C29207A6C,1331=0102100F70555283152C207A,0D29=0102100F70555283152C80717A,1B1D=0102100F70555283158071,032C200D2D=0102100F705552831500,1725=0102100F705552831500,352D=0102100F705552831500,0C19=0102100F705552831500,150F=0102100F705552831500,3025=0102100F705552831500,0F07=0102100F705552831500,1E09=0102100F705552831500,251F=0102100F705552831500,010C=0102100F705552831500,2F80261A10=0102100F705552831500,2F80261016=0102100F705552831500,2F80260934=0102100F705552831500,2F80262910=0102100F705552831500,2F80267A7D1A14=0102100F705552831500,2C2E2304=0102100F705552831500,7A7D3421=0102100F7055528315002C2920,212F=0102100F7055528315002C807138,111F=0102100F7055528315002C807138,3135=0102100F7055528315008071,032C200828=0102100F7055528315007A6C,2022=0102100F70555283156C,7A7D140A=0102100F70555283156C,7A7D2C2E2127=0102100F70555283157A,1618=0102100F70555283157A,0B0F=0102100F70555283157A,1836=0102100F70555283157A,172E=0102100F70555283157A,2F8026352A=0102100F70555283157A,2F80262B2E=0102100F70555283157A,2F8026082A=0102100F70555283157A,2F80262306=0102100F70555283157A,2F80263702=0102100F70555283157A,2F80262C38=0102100F70555283157A,2F80261E06=0102100F70555283157A,2F80261B1A=0102100F70555283157A,2F8026032A=0102100F70555283157A,2C2E1F14=0102100F70555283157A,2C2E3810=0102100F70555283157A,2C2E262C=0102100F70555283157A29,032C20201A=0102100F70555283157A00,2F80260A02=0102100F70555283157A00,2F80261838=0102100F70555283157A6C,2F80260E34=0102100F70555283157A6C,2F80260438=0102100F70555283157A6C,2C2E2F1A=0102100F70555283157A6C,2C2E2305=0102100F528315,7A70553525=0102100F5283152C8071,7A70550723=0102100F528315807138,7A7055032C200D2A=0102100F55528315,2F80267A2C71707D3316=0102100F55528315,2F80267A2C71707D1224=0102100F55528315,2F80267A2C71707D212E=0102100F55528315,2F80267A700616=0102100F55528315,2F80267A70380C=0102100F55528315,2F80267A700434=0102100F55528315,2F80267A702A18=0102100F55528315,7A2C71707D2628=0102100F55528315,7A2C71707D100C=0102100F55528315,7A2C71707D2F80261729=0102100F55528315,7A701F15=0102100F55528315,7A70240E=0102100F55528315,7A703632=0102100F55528315,7A701339=0102100F55528315,7A700115=0102100F55528315,7A702C2C37=0102100F55528315,7A702C320B=0102100F55528315,7A702C3206=0102100F55528315,7A702C2E2238=0102100F55528315,616D2F80267A2C71707D3816=0102100F555283153800,2F80267A701406=0102100F555283153800,2F80267A700111=0102100F555283152C8071,7A700501=0102100F555283152C8071,7A70370B=0102100F555283152C807138,7A703B37=0102100F555283152C80713800,7A701C2F=0102100F555283152920,7A702C240F=0102100F555283152920,7A702C0A03=0102100F555283152920,7A702C0221=0102100F55528315292000,7A702C2E3317=0102100F55528315292000,7A702C2E3634=0102100F5552831500,2F80267A2C71707D3028=0102100F5552831500,7A2C71707D111A=0102100F5552831500,7A2C71707D071E=0102100F5552831500,7A2C71707D2913=0102100F5552831500,7A702F19=0102100F5552831500,7A702301=0102100F5552831500,7A702C3919=0102100F5552831500,7A702C3B33=0102100F5552831500,7A702C2E0223=0102100F5552831500,7A702C03032F=0102100F55528315006C,7A702C2E262E=0102100F555283156C,2F80267A70032E=0102100F555283156C,7A2C71707D0F0B=0102100F555283156C,7A701D3B=0102100F555283156C,7A702C2E030116=01100F1571292C20,2F80267A703200=01100F1571292C20,7A7055370A=01100F1571292C2000,7A701B22=01100F1571292C2000,7A701E04=01100F1571292C2000,416D1336=01100F1571292C20007A70556C,391A=01100F1571292C20007A6C7055,1C24=01100F1571292C207A7055,2F80260D2E=01100F15712920,7A702C2E2D0A=01100F15712920,7A702C2E2800=01100F15712920027A7055,2C2E251E=01100F157129207A70556C,2C2E1228=01100F157129207A70556C,416D2C2E050A=01100F5220,7A70550000=01100F5220,616D2624=01100F5220,616D2F80267A702804=01100F5220006C,7A70550F06=01100F52207A70556C,2C2E2F1E=01100F52207A70556C,2C2E1014=01100F527A70556C,032C20161E=01100F712920,7A702C2E0A0A=01100F71522C2920,616D161C=0070100F292C20,01020F04=0006100F7020,7A7D01026D183A=0006100F7020,616D0102201C=0006100F20,7A2C71707D01026D1D37=000170100F292C20,2F18=000170100F292C802038,161D=00014B0F,032C201338=00014B0F2C2002,2F80261728=00014B0F20,2C2E0F0A=00014B0F20,7A2C71707D1833=00014B0F20,7A702C1407=00014B0F20,7A702C1401=0001060838,2C2E1123=0001060838,416D032C202019=000106082C38,2C31=000106082C38,391F=000106082C38,2523=000106082C38,7A70416D1C29=000106082C38020F71295283,3811=000106082C38020F71295283,7A700937=000106082C386C550F197120,7A700117=00010252100F29202C7A706C55,1337=00010206700F202C807138152952,3A2E=00010206100F7020,616D0610=00010206100F20,7A2C71707D0328=00010206100F20,7A700F01=00010206100F20,7A702C3310=00010206100F20,7A702C2E3139=0001100F298020,7A702C2625=00010870556C100F2C20,1909=00010870556C100F2C20,391E=00010870556C100F2C20,2124=00010870556C100F2C20,2F80267A7D0F00=00010870556C100F2C2038,2D09=00010870556C100F2C2002,0500=00010870556C100F2C207A,2C39=00010870556C100F2C207A,2518=00010870556C100F2C207A,0B0C=00010870556C100F2C207A,2F80262911=00010870556C100F7A,032C200007=000108556C100F2C2029,7A700A07=000108556C100F2C2029,7A701332=000108556C100F20,2C2E7A70100D=000108556C100F20,7A702C2E2239=000108556C100F20,7A702C2E0A01=000108556C100F20,7A702C2E380D=0001086C100F2C20,7A70551D36=0001086C100F2C20,7A70552F1F=000108100F70552920,010D=000108100F70552920,616D0507=000108100F705529202C80713815,0B0D=000108100F705529202C8071157A,3133=000108100F7055292002,2309=000108100F7055292002,416D0002=000108100F705529207A,2F80263202=000108100F705529207A,2F80263638=000108100F705529207A,2C2E2A1A=000108100F705529207A38,2F80262414=000108100F705529207A6C,2C2E2E14=000108100F552920,7A2C71707D1404=000108100F552920,7A2C71707D0B17=000108100F552920,7A70330D=000108100F552920,7A702C172F=000108100F552920,7A702C2E3707=000108100F5529206C,616D7A702C2E302E=6C55700F197120,2C2E7A7D0C22=6C55700F197120,7A7D01026D1E02=6C550F297120,000106037A703923=6C550F297120,7A702C2E03230A=6C550F1920,7A2C71707D240C=6C550F19200210,7A2C71707D000106031A16=6C550F197120,000106037A701513=6C550F197120,7A703A2B=6C550F197120,7A701837=6C550F197120,7A702F23=6C550F197120,7A702F22=6C550F197120,7A702D07=6C550F197120,7A702C2E3922=6C550F197120,7A700102093A=6C550F197120,7A70000106031B19=6C550F197120,616D7A70071F=6C550F197120,616D7A702C2E212B=6C550F197120,616D7A702C2E000106032734=6C550F197120292C,000106037A700325=6C550F1971200001020610,7A702C122B=6C550F19712008,000106037A702411=6C100F2952,7A7055032C20010E=100F2C29528320,01023704=100F2C29528320,0102363A=100F292C206C55,000106037A702B26=100F2920,7A2C71707D01026D302C=100F7055528315,01021E08=100F7055528315,01022730=100F7055528315,01021512=100F7055528315,010200352C=100F7055528315,7A7D01026D2F1C=100F7055528315,7A7D01026D0222=100F70555283153800,01026D2412=100F70555283157A,01022230=100F70555283157A,0102060E=100F70555283157A6C,01022C3A=100F70555283157A6C,01026D1F12=100F1571292C20,01026D3B36=100F1571292C20,01026D1516=100F1571292C20,000106037A702302=100F1571292C20,000106037A701D32=100F1571292C20,000106082F8026330E=100F1571292C20,000106086D2A1C=100F1571292C20,7A7001026D313A=100F1571292C20,7A7000010603341C=100F1571292C20,416D7A70000106032B2A=100F1571292C2002,000106037A700326=100F1571292C20556C,000106037A70273A=100F1571292C2000,01026D0722=100F1571292C2000,01026D2E0C=100F1571292C206C55,000106037A701408=100F1571292C207A706C55,01022020=100F1571292C207A706C55,000106081726=100F1571292C207A6C7055,0102290E=100F1571292C207A6C7055,000106080932=100F1571292C207A6C7055,000106080D26=100F52,00010608032C20100E=100F5283153800,01027A70550B16=100F5220,2F8026000106081122=100F5220,6D010200133A=100F5220,01026D1F16=100F5220,000106037A703132=100F5220,000106083B3A=100F5220,000106082522=100F5220,00010608190A=100F5220,000106082C2E021C=100F5220,7A70000106030936=100F52202C,01026D3A2C=100F52206C55,01027A701A0C=100F52206C55,000106037A700E30=100F52206C55,000106037A700A08=100F52207A706C55,000106083204=100F52207A6C5570,01026D0B0E=100F55528315,01027A2C71707D0004=100F55528315,7A2C71707D01026D1D3A=100F55528315,7A2C71707D01026D3418=100F5552831500,7A2C71707D0102201D=100F712920,7A702C2E00010608030E36=100F71522C2920,01023635=100F715229,00010608032C20021B=7A70550F2C715220,1900=7A70550F715220,2C2E0A09=7A70556C,00010608172C=7A70556C,00010608032C200B14=7A70556C,00010608032C202914=7A70556C0F197120,2C2E0938=7A70556C0F197120,000106082C2E111E=7A70556C000108,0502=7A70556C000108,2F80260D2F=7A70556C0001082C807138152952,2D0B=7A70556C0001082C807138152952,3633=7A70556C0001082C807115295256,0C18=7A70556C0008,01020218=7A70556C0008,0102302F=7A70556C100F295220,000106082C35=7A70556C100F295220,000106081E0B=7A70556C100F2952202C807115,3130=7A70556C100F29522002,000106080506=7A70556C100F29522001,2C2E330F=7A70556C100F29522001022C8071,010F=7A70556C100F295220010200,0435=7A70556C100F295280713815,032C200614=7A70556C100F295201,032C20122C=7A70556C100F29520102,032C203B39=7A706C550F297120,0F05=7A706C550F297102,032C200D25=7A706C550F19712001,616D2233=7A706C550F19712000010608,2626=7A6C70550F197120,01021A17=7A6C70550F197120,00010608262F=7A6C70550F1971202C29,000106083529=7A6C70550F19712002,616D000106082D08=7A6C70550F197120103800,0102341F=7A6C55700F197120,2C2E172B=082C38,7A7055000106030D27=082C38,7A70000106030827=08556C100F2C20,000106037A702803=08556C100F2C20,000106037A701013=08556C100F2C20,7A7000010603262B=08556C100F2C20,7A7000010603240D=08556C100F2C20,7A70000106033631=08556C100F2C20,7A70000106030431=08556C100F20,7A702C2E000106031D35=08100F552920,000106037A701335=08100F552920,000106037A700612=08100F55292038,000106037A70';
  public static $SHEN_SHA=['æ— ','å¤©æ©','æ¯ä»“','æ—¶é˜³','ç”Ÿæ°”','ç›ŠåŽ','é’é¾™','ç¾ç…ž','å¤©ç«','å››å¿Œ','å…«é¾™','å¤æ—¥','ç»­ä¸–','æ˜Žå ‚','æœˆç…ž','æœˆè™š','è¡€æ”¯','å¤©è´¼','äº”è™š','åœŸç¬¦','å½’å¿Œ','è¡€å¿Œ','æœˆå¾·','æœˆæ©','å››ç›¸','çŽ‹æ—¥','å¤©ä»“','ä¸å°†','è¦å®‰','äº”åˆ','é¸£å å¯¹','æœˆå»º','å°æ—¶','åœŸåºœ','å¾€äº¡','å¤©åˆ‘','å¤©å¾·','å®˜æ—¥','å‰æœŸ','çŽ‰å®‡','å¤§æ—¶','å¤§è´¥','å’¸æ± ','æœ±é›€','å®ˆæ—¥','å¤©å·«','ç¦å¾·','å…­ä»ª','é‡‘å ‚','é‡‘åŒ®','åŽŒå¯¹','æ‹›æ‘‡','ä¹ç©º','ä¹åŽ','ä¹ç„¦','ç›¸æ—¥','å®å…‰','å¤©ç½¡','æ­»ç¥ž','æœˆåˆ‘','æœˆå®³','æ¸¸ç¥¸','é‡æ—¥','æ—¶å¾·','æ°‘æ—¥','ä¸‰åˆ','ä¸´æ—¥','å¤©é©¬','æ—¶é˜´','é¸£å ','æ­»æ°”','åœ°å›Š','ç™½è™Ž','æœˆå¾·åˆ','æ•¬å®‰','çŽ‰å ‚','æ™®æŠ¤','è§£ç¥ž','å°è€—','å¤©å¾·åˆ','æœˆç©º','é©¿é©¬','å¤©åŽ','é™¤ç¥ž','æœˆç ´','å¤§è€—','äº”ç¦»','å¤©ç‰¢','é˜´å¾·','ç¦ç”Ÿ','å¤©å','è‡´æ­»','å…ƒæ­¦','é˜³å¾·','å¤©å–œ','å¤©åŒ»','å¸å‘½','æœˆåŽŒ','åœ°ç«','å››å‡»','å¤§ç…ž','å¤§ä¼š','å¤©æ„¿','å…­åˆ','äº”å¯Œ','åœ£å¿ƒ','æ²³é­','åŠ«ç…ž','å››ç©·','å‹¾é™ˆ','è§¦æ°´é¾™','å…«é£Ž','å¤©èµ¦','äº”å¢“','å…«ä¸“','é˜´é”™','å››è€—','é˜³é”™','å››åºŸ','ä¸‰é˜´','å°ä¼š','é˜´é“å†²é˜³','å•é˜´','å­¤è¾°','é˜´ä½','è¡Œç‹ ','äº†æˆ¾','ç»é˜´','çº¯é˜³','ä¸ƒé¸Ÿ','å²è–„','é˜´é˜³äº¤ç ´','é˜´é˜³ä¿±é”™','é˜´é˜³å‡»å†²','é€é˜µ','é˜³é”™é˜´å†²','ä¸ƒç¬¦','å¤©ç‹—','ä¹è™Ž','æˆæ—¥','å¤©ç¬¦','å­¤é˜³','ç»é˜³','çº¯é˜´','å…­è›‡','é˜´ç¥ž','è§£é™¤','é˜³ç ´é˜´å†²'];
  public static $DAY_SHEN_SHA='100=010203040506,0708090A0B101=010C0D,0E0F101112131415102=16011718191A1B1C1D1E,1F20212223103=24011825261B271D1E,28292A2B104=012C2D2E2F3031,3233343536105=3738,393A3B3C3D123E106=3F404142434445,464748107=494A4B4C4D,4E108=4F5051524C4D5345,54555657109=58595345,5A5B12565C10A=5D415E5F60,616263640B6510B=0266676869,6A6B6C0A3E6D10C=1602171803041B05061E,07086E10D=24181B0C0D,0E0F1011126F13141510E=70191A1C1D,1F2021222310F=0125261B271D,28292A2B110=012C2D2E2F3031,3233343536111=49013738,393A3B3C3D123E112=4F50013F404142434445,4648113=014A4B,4E6E114=51524C4D5345,54550B5657115=0158595345,5A5B12565C116=1601185D415E5F60,61626364117=24021867681B69,6A6B3E6D118=0203040506,0708119=1B0C0D,0E0F10111213141511A=191A1B1C1D1E,1F2021222311B=4925261B271D1E,28292A11C=4F502C2D2E2F3031,323334353611D=3738,393A3B3C3D123E11E=3F404142434445,460B4811F=4A4B,4E71120=16171851524C4D5345,545556121=241858595345,5A5B12565C122=5D415E5F60,61626364123=0267681B69,6A6B3E6D124=0203041B05061E,070847125=491B0C0D,0E0F101112131415126=4F50191A1C1D1E,1F20212223127=2526271D1E,28292A2B128=2C2D2E2F3031,32333435360B129=3738,393A3B3C3D123E12A=1617183F404142434445,464812B=24184A4B,4E7212C=51524C4D53,5455565712D=0158595345,5A5B12565C12E=015D415E5F60,616263647312F=49010267681B69,6A6B3E6D130=4F500102030405061E,070874131=010C0D,0E0F101112131415726E132=191A1C1D1E,1F2021220B722375133=2526271D1E,28292A2B134=1617182C2D2E2F3031,3233343536135=24183738,393A3B3C3D126F3E136=3F4041424344,4648137=4A4B,4E72138=51524C4D5345,545576567257139=4958595345,5A5B7612565C7713A=4F505D415E5F60,6162636413B=02676869,6A6B3E6D200=1601025D60,393B28292A11090A201=0103041A1B4A,123435360B6D202=011819681B4C1D061E,3D1014203=011718252F591D0D1E,1F20213233204=012C26,3C23205=493751522D2E69,121364223E2B206=503F4005311E,6A3A5A5B207=5841440C38,4615208=431C4D45,6B4E5648209=27534B45,545507086162125620A=16666730,0E0F635720B=0241425E5F1B,6C0A0B3E5C20C=02185D1B601E,393B28292A116E20D=171803041B4A,126F3435366D20E=7019684C1D06,3D101420F=4901252F591D0D,1F2021323378210=50012C26,3C23211=013751522D2E69,121364223E2B212=013F40053145,6A3A5A5B213=015841440C38,46156E214=16431C4D5345,6B4E5648215=27534B45,545507086162120B5648216=18671B30,0E0F6357217=02171841425E5F1B,3E5C218=025D60,393B28292A11219=4903041A1B4A,123435366D21A=5019681B4C1D061E,3D101421B=252F591D0D45,1F2021323321C=2C26,3C2321D=3751522D2E69,121364223E2B21E=163F40053145,6A3A5A5B21F=5841440C38,467147150B220=18431C4D5345,6B4E5648221=171827534B45,5455070861621256222=6730,0E0F6357223=490241425E5F1B,3E5C224=50025D1B601E,393B28292A11225=03041A4A,123435366D226=19684C1D061E,3D1014227=252F591D0D1E,1F20213233228=162C26,3C23229=3751522D2E69,121364220B3E2B22A=183F40053145,6A3A5A5B22B=17185841440C38,46157222C=431C4D53,6B4E564822D=490127534B45,54550708616212567922E=5001671B30,0E0F635722F=010241425E5F,3E5C230=01025D601E,393B28292A1174231=0103041A4A,1234353647726E6D232=1619684C1D061E,3D1014233=252F591D0D1E,1F202132330B75234=182C26,3C23235=17183751522D2E69,126F1364223E2B236=3F400531,6A3A5A5B237=495841440C38,461572238=50431C4D5345,6B4E76567248239=27534B45,5455070861627612567323A=6730,0E0F635723B=0241425E5F,3E5C300=0102415E5F1A1B69,090A471457301=011B05,6A125C302=5001185D19515203042F0C1D601E,323315303=4F490118251C1D1E,3C5A5B106D304=012C2706,1F20213B710B787A305=58372668300D,6B123E306=173F402D2E45,07086423307=00,393A0E2B308=24164142444A533145,61624622567B309=674C533845,28292A4E12135630A=431B594D,5455633435364830B=021B27,3D116C0A3E30C=500218415E5F1A1B691E,146E5730D=4F49181B05,6A126F5C30E=705D19515203042F0C1D60,3233150B30F=01251C1D,3C5A5B106D310=01172C2706,1F20213B7C311=0158372668300D,6B123E312=2416013F402D2E45,0708476423313=01,393A0E0F6E2B314=4142444A533145,61624622567D315=66671B4C533845,28292A4E121356316=5018431B594D,54556334353648317=4F4902181B4B,3D113E318=02415E5F1A69,140B57319=1B05,6A125C31A=175D19515203042F0C1D601E,32331531B=251C1D1E,3C5A5B106D31C=24162C2706,1F20213B31D=58372668300D,6B123E31E=3F402D2E45,0708642331F=00,393A0E0F2B320=50184142444A533145,61624622567E321=4F4918671B4C533845,28292A4E121356322=43594D,5455633435360B48323=021B4B,3D113E324=0217415E5F1A691E,1457325=05,6A125C326=58165D19515203042F0C1D601E,323315327=251C1D1E,3C5A5B106D328=2C2706,1F20213B75329=58372668300D,6B123E32A=50183F402D2E45,0708642332B=4F4918,393A0E0F722B32C=4142444A5331,616246220B567B32D=01671B4C533845,28292A4E12135632E=011743594D,5455633435364832F=01024B,3D113E330=24160102415E5F1A691E,741457331=0105,6A12726E5C332=5D19515203042F0C1D601E,32331572333=251C1D1E,3C5A5B106D334=50182C2706,1F20213B335=4F491858372668300D,6B126F3E336=3F402D2E,0708640B23337=00,393A0E0F722B338=174142444A533145,616246762256727B73339=674C533845,28292A4E7612135633A=241643594D,5455633435364833B=024B,3D113E400=5001431B,5A5B1248401=490141425E5F2F4B,32336314402=4F01024A1D1E,396B3C130B57403=01025803044C1D1E,07085C404=01183F5D5960,0E0F10127F405=171819,1F20213E6D788075406=162526690645,28292A407=242C2D2E050D,6162343536647B408=3767680C5345,6A3A3B3D12155623409=4041441C5345,46562B40A=501B274D31,4E1140B=4951521A1B3038,5455223E40C=4F431B1E,5A5B0981120B6E4840D=41425E5F2F4B,3233631440E=02184A1D,396B3C135740F=010217185803044C1D,0708475C410=16013F585960,0E0F1012411=240119,1F20213E6D412=012526690645,28292A413=012C2D2E050D,6162343536646E7B414=503767681B0C5345,6A3A3B3D126F155623415=494041441B1C5345,46562B416=4F1B274D31,4E11710B417=51521A1B3038,54556C81223E418=18431B,5A5B1248419=171841425E5F2F4B,3233631441A=16024A1D1E,396B3C135741B=24025844044C1D1E,07085C41C=3F5D5960,0E0F101241D=19,1F20213E6D41E=50702526690645,28292A41F=492C2D2E050D,6162343536647D420=4F663767681B0C5345,6A3A3B3D12150B5623421=4041441B1C5345,46562B422=181B274D31,4E11423=171851521A3038,5455223E424=16431E,5A5B1248425=2441425E5F2F4B,32336314426=024A1D1E,396B3C1357427=025803044C1D1E,07085C428=503F5D5960,0E0F10126F429=4919,1F20213E6D42A=4F2526690645,28292A0B8242B=2C2D2E050D,616234353664727E7342C=183767681B0C53,6A3A3B3D1215562342D=0117184041441C5345,4647562B42E=1601274D31,4E1142F=240151521A3038,5455223E430=01431E,5A5B761248431=0141425E5F2F4B,32336314726E432=50024A1D1E,396B3C137257433=49025844044C1D1E,0708745C434=4F3F5D5960,0E0F10120B435=19,1F20213E6D75436=1825266906,28292A82437=17182C2D2E050D,616234353664727B73438=163767680C5345,6A3A3B3D1215567223439=244041441C5345,46562B43A=274D31,4E1143B=51521A3038,545576223E83500=012F4D31,54550708323312501=01586938,0E0F3C63502=16010241435E5F051D1E,641448503=01020C1D4B1E,6A28292A353615220B504=0117183F03041C,123457505=181927,3D103E5C506=5D25306045,1F20213B616213507=492C2667,6D508=503751522D2E530645,1256509=401B4A530D45,393A5A5B115650A=4142441A1B4C,462350B=681B59,6B4E3E2B50C=162F4D311E,5455070832330981126E50D=586938,0E0F3C0B50E=02171841435E5F051D,64144850F=0102180C1D4B,6A28292A35361522510=013F03041C,123457511=49011927,3D103E5C512=50015D25306045,1F20213B616213513=012C26671B,6E6D514=3751522D2E1B530645,126F56515=401B4A530D45,393A5A5B1156516=164142441A1B4C,467123517=6859,6B4E6C810B3E2B518=17182F4D31,54550708323312519=18586938,0E0F3C6351A=0241435E5F051D1E,64144851B=49020C1D4B1E,6A28292A3536152251C=503F03041C,12345751D=1927,3D103E5C51E=705D25306045,1F20213B61621351F=2C26671B,6D520=163751522D2E1B530645,1256521=404A530D45,393A5A5B110B56522=17184142441A1B,4623523=186859,6B4E3E2B524=2F4D311E,54550708323312525=49586938,0E0F3C63526=500241435E5F051D1E,641448527=020C1D4B1E,6A28292A35361522528=3F03041C,126F344757529=1927,3D103E5C52A=165D25306045,1F20213B616213658452B=662C2667,0B726D52C=17183751522D2E1B5306,125652D=0118404A530D45,393A5A5B115652E=014142441A4C,462352F=49016859,6B4E3E2B530=50012F4D311E,545507083233761285531=01586938,0E0F3C63726E532=0241435E5F051D1E,64147248533=020C1D4B1E,6A28292A7435361522534=163F03041C,123457535=1927,3D100B3E5C536=16185D253060,1F20213B61621378537=182C2667,726D538=3751522D2E530645,125672539=49404A530D45,393A5A5B115653A=504142441A4C,46472353B=681B59,6B4E763E2B600=241601304D,3C28292A4E1235361423601=01,54553B63342B602=0102681D311E,3D603=010241425E5F4A1D381E,64604=01183F434C,39127148605=4F49181951520304594B,61620B3E73606=50256745,5A5B102257607=172C69,1F20215C608=5D37261B05536045,6B111256609=402D2E1A1B0C5345,6B11125660A=24161B1C06,6A3A0E0F1360B=5841442F270D,3233463E60C=304D1E,3C28292A4E0981123536146E2360D=00,54553B63342B60E=0218681D31,3D60F=4F4901021841425E5F4A1D38,640B610=50013F434C,391248611=01171951520304594B,61623E612=0125671B45,5A5B102257613=012C1B69,1F20216E5C614=24165D37261B05536045,6B11126F56615=402D2E1A1B0C5345,070815566D616=1C06,6A3A0E0F1347617=5841442F270D,3233466C813E618=18304D,3C28292A4E1235361423619=4F4918,54553B63340B2B61A=5002681D311E,3D61B=021741425E5F4A1D381E,6461C=3F434C,39124861D=1951520304594B,61623E61E=24167025671B45,5A5B10225761F=2C1B69,1F20215C620=5D372605536045,6B111256621=402D2E1A0C5345,070815566D622=181B1C06,6A3A0E0F13623=4F49185841442F270D,3233460B3E624=50304D1E,3C28292A4E1235361423625=17,54553B63342B626=02681D311E,3D627=0241425E5F4A1D381E,64628=24163F434C,39126F48629=1951520304594B,61623E62A=256745,5A5B1022578662B=2C69,1F2021725C7562C=185D37261B055360,6B11125662D=4F490118402D2E1A0C5345,0708150B566D62E=50011C06,6A3A0E0F1362F=01175841442F270D,3233463E630=01304D1E,3C28292A4E761235361423631=01,54553B6334726E2B87632=241602681D311E,3D72633=0241425E5F4A1D381E,7464634=3F434C,39124748635=1951520304594B,61623E6573636=661825671B,5A5B10225786637=4F49182C69,1F20210B725C75638=505D372605536045,6B11125672639=17402D2E1A0C5345,070815566D63A=1B1C06,6A3A0E0F1363B=5841442F270D,323346763E700=0103404142445906,46701=01020D,4E14702=50015152694D1D1E,54553B23703=4901051D1E,5A5B2B1288704=4F0102415E5F0C31,6162636415705=6667681C38,6A6B3E706=4303042745,07080B48707=02304B,0E0F101112708=16171819,1F20135657709=24185825261B5345,28292A353622565C70A=025D2C2D2E2F4A60,3233893470B=374C,393A3C3D3E6D70C=503F4041424459061E,466E70D=49020D,4E1470E=4F5152694D1D,54553B70F=01051D,5A5B12132B710=0102415E5F0C31,61626364150B65711=0167681C38,6A6B3E712=162417184303041B2745,070848713=240102181B304B,0E0F1011126E714=191A1B5345,1F20215657715=5825261B5345,28292A353622565C717=49374C,393A3C3D126F473E6D718=4F3F404142445906,46719=020D,4E1471A=515269,1D1E71B=051D1E,5A5B12132B71C=16021718415E5F0C31,616263641571D=241867681B1C38,6A6B3E71E=4303041B2745,07084871F=021B30,0E0F101112720=50191A5345,1F20215657721=495825265345,28292A353622565C722=4F025D2C2D2E2F4A60,32338934723=374C,393A3C3D123E6D724=3F4041424459061E,46098A0B725=020D,4E7114726=1617185152694D1D1E,54553B23727=2418051D1E,5A5B12132B728=02415E5F0C31,616263641573729=67681B1C38,6A6B3E72A=504303042745,07084872B=4902304B,0E0F1011126F7272C=4F70191A1B,1F2021565772D=015825265345,28292A353622565C72E=01025D2C2D2E2F4A60,323389340B72F=01374C,393A3C3D6C8A123E6D730=160117183F4041424459061E,46731=240102180D,4E14726E732=5152694D1D1E,54553B767223733=051D1E,5A5B7612132B77734=5002415E5F0C31,6162636415735=4967681C38,6A6B473E736=4F4303041B27,7448737=02304B,0E0F10111272738=191A5345,1F20210B56725775739=5825265345,28292A353622565C73A=160217185D2C2D2E2F4A60,3233893473B=2418374C,393A3C3D123E6D800=50013F5D402760,6A3A5A5B22801=490102414430,466D802=014D1D061E,6B4E4714803=011D0D1E,54550708616212804=0102671B4A,0E0F6323805=41425E5F4C,8B2B806=16593145,3928292A113536807=025803041A1B38,1234130B808=181943681B695345,3D105648809=1718252F0553534B45,1F20213B32335680A=50022C260C,3C155780B=493751522D2E1C,12643E5C80C=3F5D4027601E,6A3A5A5B226E80D=02414430,466D80E=4D1D06,6B4E1480F=011D0D,5455070861621279810=16010266674A,0E0F6323811=0141425E5F1B4C,0B3E2B812=01181B593145,3928292A113536813=010217185803041A1B38,1234136E814=501943681B695345,3D105648815=49252F05534B45,1F20213B323356816=022C260C,3C1557817=3751522D2E1C,126F643E5C818=3F5D402760,6A3A5A5B22819=02414430,466D81A=164D1D061E,6B4E1481B=1D0D1E,545507086162120B6581C=0218671B4A,0E0F632381D=171841425E5F1B4C,3E2B81E=501B593145,3928292A11353681F=49025D03041A38,123413820=194368695345,3D10475648821=252F05534B45,1F20213B323356716=50025D2C2D2E2F4A60,32338934822=022C260C,3C1557823=3751522D2E1C,12643E5C824=163F5D4027601E,6A3A5A5B098A22825=02414430,46710B6D826=184D1D061E,6B4E14827=17181D0D1E,54550708616212828=5002671B4A,0E0F6323829=4941425E5F4C,3E2B82A=593145,3928292A11353682B=025803041A38,126F34137282C=701943681B6953,3D10564882D=01252F05534B45,1F2021613233567882E=1601022C260C,3C155782F=013751522D2E1C,6C8A12640B3E5C830=01183F5D4027601E,6A3A5A5B22831=01021718414430,46726E6D832=504D1D061E,6B4E761472833=491D0D1E,545507086162761273834=02674A,0E0F6323835=41425E5F4C,3E2B836=1B5931,3928292A11743536837=025803041A38,12341372838=16194368695345,3D10567248839=252F05534B45,1F20213B32330B567583A=02182C260C,3C155783B=17183751522D2E1C,12643E5C900=013F408C2E4C,0708641457901=010259,393A0E0F5C902=2416015D4142441D601E,61624635367B903=0167691D1E,28292A4E126D904=01021B054D06,5455637134220B905=580C0D,3D11153E906=17415E5F1A1B1C45,23907=4F49021B27,6A3B12472B908=501819515203042F30533145,323356909=1825533845,3C5A5B105690A=022C43,1F2021487C90B=3726684A4B,6B12133E90C=24163F402D2E4C1E,070864146E5790D=0259,393A0E0F5C90E=5D4142441D60,61624635360B7B90F=0167691D,28292A4E126D910=0102171B054D06,5455633422911=4F4901581B0C0D,3D11153E912=500118415E5F1A1B1C45,23913=0102181B27,6A3B126E2B914=19515203042F30533145,323356915=25533845,3C5A5B1056916=2416022C43,1F202148917=3726684A4B,6B126F133E918=3F402D2E4C,070864140B57919=0259,393A0E0F5C91A=175D4142441D601E,61624635367D91B=4F4966671B691D1E,28292A4E126D91C=5002181B054D06,545563342291D=18581B0C0D,3D11153E91E=415E5F1A1C45,2391F=0227,6A3B122B920=241619515203042F305331,323356921=25533845,3C5A5B1056922=022C43,1F20210B48788D923=3726684A4B,6B12133E924=173F402D2E4C1E,0708098A641457925=4F49022E,393A0E0F475C926=50185D4142441D601E,61624635367E927=18671B691D1E,28292A4E126D928=02054D06,5455633422929=580C0D,3D11153E92A=2416415E5F1A1C45,2392B=0227,6A3B126F722B92C=7019515203042F305331,32330B5692D=0125533845,3C5A5B105692E=0102162C43,1F2021487592F=4F49013726684A4B,6B6C8A12133E930=5001183F402D2E4C1E,0708641457931=01021859,393A0E0F726E5C932=5D4142441D601E,616246763536727B73933=67691D1E,28292A4E76126D934=241602054D06,5455633422935=580C0D,3D11153E936=415E5F1A1B1C,740B23937=0227,6A3B12722B938=1719515203042F30533145,32335672939=4F4925533845,3C5A5B105693A=5002182C43,1F20214893B=183726684A4B,6B12133EA00=160170182543261C,28292A48A01=240117182C2D2E274B,61623464147BA02=013F376768301D1E,6A3A3D1257A03=01584041441D1E,465CA04=015D4D60,4E1113A05=4951521A1B4A,54553E6DA06=4F501B4C0645,5A5B12A07=41425E5F2F590D,32336322A08=025345,396B3C0B5623A09=020304695345,0708562BA0A=16180531,0E0F10126FA0B=241618190C38,1F20213B3536103EA0C=2543261C1E,28292A6E48A0D=2C2D2E274B,61623464147BA0E=3F376768301D,6A3A3D124757A0F=4924584041441B1D,465CA10=4F50015D1B4D60,4E1113A11=0151521A1B4A,54553E6DA12=011B4C0645,5A5B120BA13=0141425E5F2F590D,323363226EA14=1602185345,396B3C5623A15=240217180304695345,0708562BA16=0531,0E0F1012A17=190C38,1F20213B3536153EA18=2543261C,28292A4882A19=49503F3767681B301D1E,6A3A3D1257A1A=4F503F3767681B301D1E,6A3A3D1257A1B=584041441B1D1E,465CA1C=5D1B4D60,4E1171130BA1D=51521A1B4A,54553E6DA1E=16184C0645,5A5B12A1F=24171841425E5F2F590D,32336322A20=025345,396B3C5623A21=020304695345,0708562BA22=0531,0E0F10128EA23=49190C38,1F20213B3536153E788FA24=4F502543261C1E,28292A48A25=2C2D2E274B,61623464147DA26=663F3767681B301D1E,6A3A3D120B57A27=584041441B1D1E,465CA28=16185D4D60,4E1113A29=24171851521A4A,54553E6DA2A=4C0645,5A5B7612A2B=41425E5F2F590D,3233632272A2C=0253,396B3C475623A2D=1601020304695345,0708562BA2E=4F50010531,0E0F1012A2F=01190C38,1F20213B3536153EA30=012543261C1E,28292A09900B4882A31=012C2D2E274B,6162346414726E7E73A32=16183F376768301D1E,6A3A3D126F7257A33=2417185D4041441D1E,465CA34=5D4D60,4E1113A35=51521A4A,5455763E6D83A36=4C06,5A5B12A37=4941425E5F2F590D,3233632272A38=4F50029145,396B3C567223A39=020304695345,070874562BA3A=0531,0E0F10120BA3B=190C38,1F20213B6C903536153E75B00=01701718254A31,1F20216162B01=0118582C26,674C38B02=50013F375152432D2E591D1E,121448B03=4901401B1D4B1E,393A5B11B04=014142441A69,4657B05=681B05,6B4E3E5CB06=682F0C4D6045,5455070832331215B07=1C,0E0F3C636DB08=1602415E5F27530645,3536136456B09=0230530D45,6A28292A0B56B0A=17180304,126F342223B0B=1819,3D103E2BB0C=50254A311E,1F202161626EB0D=49582C26,671B4C38B0E=3F375152432D2E591D,121448B0F=01401B1D4B,393A3B5A5B11B10=014142441A1B69,4657B11=01681B05,6B4E3E5CB12=16015D2F0C4D6045,5455070832331215B13=011C,0E0F3C630B6E6DB14=021718415E5F27530645,3536136456B15=021830530D45,6A28292A56B16=500304,12342223B17=4919,3D103E2BB18=254A31,1F4E21616278B19=582C26,671B4C38B1A=3F375152432D2E1B591D1E,121448B1B=401B1D4B1E,393A3B5A5B1147B1C=164142441A1B69,467157B1D=6805,6B4E0B3E5CB1E=17185D2F0C926045,5455070832331215B1F=181C,0E0F3C636DB20=5002415E5F27530645,3536136456B21=490230530D45,6A28292A56B22=0304,12342223B23=19,3D103E2BB24=254A311E,1F20136162B25=582C26671B4C38,00B26=163F375152432D2E1B591D1E,121448B27=401D4B1E,393A3B5A5B110BB28=17184142441A69,4657B29=186805,6B4E3E5CB2A=505D2F0C4D6045,54550708323376121585B2B=491C,0E0F3C63726DB2C=02415E5F275306,3536136456B2D=010230530D45,6A28292A56B2E=010304,12342223B2F=0119,3D103E2BB30=1601254A311E,1F2021616209906584B31=0166582C26674C38,0B726EB32=17183F375152432D2E591D1E,126F147248B33=18401D4B1E,393A3B5A5B11B34=504142441A69,4657B35=49681B05,6B4E763E5CB36=5D2F0C4D60,5455070832331215B37=1C,0E0F3C63726DB38=02415E5F27530645,353613645672B39=0230530D45,6A28292A744756B3A=160304,12342223B3B=19,3D106C900B3E2BC00=500170661825670C,5A5B1013141523C01=4F4901182C1C,1F2021222BC02=011637261B271D311E,6B1112C03=01402D2E1A1B311D381E,0708C04=0143,6A3A0E0F7148C05=41442F4B,32334635360B3EC06=24164A4D45,3C28292A4E1257C07=174C,545563345CC08=025D6859536045,3D56C09=0241425E5F5345,4764566DC0A=50186906,393B126FC0B=4F4918581951520304050D,61623EC0C=25671B0C1E,5A5B101314156E23C0D=2C1B1C,1F2021222BC0E=3F37264B1D31,6B1112C0F=01402D2E1A1B301D38,07080BC10=241601431B,6A3A0E0F48C11=011741442F4B,32334635363EC12=014A4D45,3C28292A4E1257C13=014C,545563346E5CC14=5002185D6804536045,3D56C15=4F49021841425E5F5345,64566DC16=6906,393B12C17=581951524404050D,61623EC18=25670C,5A5B101314152386C19=2C1B1C,1F2021220B2BC1A=24163F37261B271D31,6B1112C1B=17402D2E1A1B301D381E,0708C1C=43,6A3A0E0F48C1D=41582F4B,32334635363EC1E=50184A4D45,3C28292A4E1257C1F=4F49184C,545563345CC20=025D6859536045,3D56C21=0241425E5F5345,64566DC22=6906,393B12C23=581951520304050D,61620B3EC24=241625671B0C1E,5A5B1013141523C25=172C1B1C,1F2021222BC26=3F3726271D311E,6B1112C27=402D2E1A301D381E,0708C28=501843,6A5B0E0F48C29=4F491841442F4B,32334635363EC2A=4A4D45,3C28292A4E761257C2B=4C,54556334725C93C2C=025D68595360,3D56C2D=010241425E5F5345,640B566DC2E=2416016906,393B12C2F=0117581951520304050D,61623EC30=0125670C,5A5B1009901314152386C31=012C1C,1F202122726E2B75C32=50183F3726271D311E,6B11126F72C33=4F4918402D2E1A301D381E,070847C34=431B,6A3A0E0F48C35=41442F4B,3233467635363EC36=4A4D,3C28292A4E1257C37=4C,545563340B725CC38=2416025D6859536045,3D5672C39=021741425E5F5345,7464566DC3A=6906,393B12C3B=581951520304050D,61626C903E6573';
    public static function getTimeZhiIndex($hm) {
        if (!$hm) {
            return 0;
        }
        if (strlen($hm) > 5) {
            $hm = substr($hm, 0, 5);
        }
        $x = 1;
        for ($i = 1; $i < 22; $i += 2) {
            if ($hm >= (($i < 10 ? '0' : '') . $i . ':00') && $hm <= (($i + 1 < 10 ? '0' : '') . ($i + 1) . ':59')) {
                return $x;
            }
            $x++;
        }
        return 0;
    }

    public static function convertTime($hm) {
        return self::$ZHI[self::getTimeZhiIndex($hm) + 1];
    }

    public static function getJiaZiIndex($ganZhi) {
        for ($i = 0, $j = count(self::$JIA_ZI); $i < $j; $i++) {
            if (self::$JIA_ZI[$i] == $ganZhi) {
                return $i;
            }
        }
        return -1;
    }

    public static function hex($n) {
        $hex = dechex($n);
        return strtoupper(str_pad($hex, 2, '0', STR_PAD_LEFT));
    }

    public static function getDayYi($monthGanZhi, $dayGanZhi) {
        $l = [];
        $day = self::hex(self::getJiaZiIndex($dayGanZhi));
        $month = self::hex(self::getJiaZiIndex($monthGanZhi));
        $right = self::$DAY_YI_JI;
        $index = strpos($right, $day . '=');
        while ($index !== false) {
            $right = substr($right, $index + 3);
            $left = $right;
            if (strpos($left, '=') !== false) {
                $left = substr($left, 0, strpos($left, '=') - 2);
            }
            $matched = false;
            $months = substr($left, 0, strpos($left, ':'));
            for ($i = 0, $j = strlen($months); $i < $j; $i += 2) {
                $m = substr($months, $i, 2);
                if ($m == $month) {
                    $matched = true;
                    break;
                }
            }
            if ($matched) {
                $ys = substr($left, strpos($left, ':') + 1);
                $ys = substr($ys, 0, strpos($ys, ','));
                for ($i = 0, $j = strlen($ys); $i < $j; $i += 2) {
                    $m = substr($ys, $i, 2);
                    $l[] = self::$YI_JI[hexdec($m)];
                }
                break;
            }
            $index = strpos($right, $day . '=');
        }
        if (count($l) < 1) {
            $l[] = 'æ— ';
        }
        return $l;
    }

    public static function getDayJi($monthGanZhi, $dayGanZhi) {
        $l = [];
        $day = self::hex(self::getJiaZiIndex($dayGanZhi));
        $month = self::hex(self::getJiaZiIndex($monthGanZhi));
        $right = self::$DAY_YI_JI;
        $index = strpos($right, $day . '=');
        while ($index !== false) {
            $right = substr($right, $index + 3);
            $left = $right;
            if (strpos($left, '=') !== false) {
                $left = substr($left, 0, strpos($left, '=') - 2);
            }
            $matched = false;
            $months = substr($left, 0, strpos($left, ':'));
            for ($i = 0, $j = strlen($months); $i < $j; $i += 2) {
                $m = substr($months, $i, 2);
                if ($m == $month) {
                    $matched = true;
                    break;
                }
            }
            if ($matched) {
                $js = substr($left, strpos($left, ',') + 1);
                for ($i = 0, $j = strlen($js); $i < $j; $i += 2) {
                    $m = substr($js, $i, 2);
                    $l[] = self::$YI_JI[hexdec($m)];
                }
                break;
            }
            $index = strpos($right, $day . '=');
        }
        if (count($l) < 1) {
            $l[] = 'æ— ';
        }
        return $l;
    }

    public static function getDayJiShen($lunarMonth, $dayGanZhi) {
        $l = [];
        $day = self::hex(self::getJiaZiIndex($dayGanZhi));
        $month = strtoupper(dechex(abs($lunarMonth)));
        $index = strpos(self::$DAY_SHEN_SHA, $month . $day . '=');
        if ($index !== false) {
            $left = substr(self::$DAY_SHEN_SHA, $index + 4);
            if (strpos($left, '=') !== false) {
                $left = substr($left, 0, strpos($left, '=') - 3);
            }
            $js = substr($left, 0, strpos($left, ','));
            for ($i = 0, $j = strlen($js); $i < $j; $i += 2) {
                $m = substr($js, $i, 2);
                $l[] = self::$SHEN_SHA[hexdec($m)];
            }
        }
        if (count($l) < 1) {
            $l[] = 'æ— ';
        }
        return $l;
    }

    public static function getDayXiongSha($lunarMonth, $dayGanZhi) {
        $l = [];
        $day = self::hex(self::getJiaZiIndex($dayGanZhi));
        $month = strtoupper(dechex(abs($lunarMonth)));
        $index = strpos(self::$DAY_SHEN_SHA, $month . $day . '=');
        if ($index !== false) {
            $left = substr(self::$DAY_SHEN_SHA, $index + 4);
            if (strpos($left, '=') !== false) {
                $left = substr($left, 0, strpos($left, '=') - 3);
            }
            $xs = substr($left, strpos($left, ',') + 1);
            for ($i = 0, $j = strlen($xs); $i < $j; $i += 2) {
                $m = substr($xs, $i, 2);
                $l[] = self::$SHEN_SHA[hexdec($m)];
            }
        }
        if (count($l) < 1) {
            $l[] = 'æ— ';
        }
        return $l;
    }

    public static function getTimeYi($dayGanZhi, $timeGanZhi) {
        $l = [];
        $day = self::hex(self::getJiaZiIndex($dayGanZhi));
        $time = self::hex(self::getJiaZiIndex($timeGanZhi));
        $index = strpos(self::$TIME_YI_JI, $day . $time . '=');
        if ($index !== false) {
            $left = substr(self::$TIME_YI_JI, $index + 5);
            if (strpos($left, '=') !== false) {
                $left = substr($left, 0, strpos($left, '=') - 4);
            }
            $ys = substr($left, 0, strpos($left, ','));
            for ($i = 0, $j = strlen($ys); $i < $j; $i += 2) {
                $m = substr($ys, $i, 2);
                $l[] = self::$YI_JI[hexdec($m)];
            }
        }
        if (count($l) < 1) {
            $l[] = 'æ— ';
        }
        return $l;
    }

    public static function getTimeJi($dayGanZhi, $timeGanZhi) {
        $l = [];
        $day = self::hex(self::getJiaZiIndex($dayGanZhi));
        $time = self::hex(self::getJiaZiIndex($timeGanZhi));
        $index = strpos(self::$TIME_YI_JI, $day . $time . '=');
        if ($index !== false) {
            $left = substr(self::$TIME_YI_JI, $index + 5);
            if (strpos($left, '=') !== false) {
                $left = substr($left, 0, strpos($left, '=') - 4);
            }
            $js = substr($left, strpos($left, ',') + 1);
            for ($i = 0, $j = strlen($js); $i < $j; $i += 2) {
                $m = substr($js, $i, 2);
                $l[] = self::$YI_JI[hexdec($m)];
            }
        }
        if (count($l) < 1) {
            $l[] = 'æ— ';
        }
        return $l;
    }

    public static function getXunIndex($ganZhi) {
        $gan = substr($ganZhi, 0, 1);
        $zhi = substr($ganZhi, 1);
        $ganIndex = 0;
        $zhiIndex = 0;
        for ($i = 0, $j = count(self::$GAN); $i < $j; $i++) {
            if (self::$GAN[$i] === $gan) {
                $ganIndex = $i;
                break;
            }
        }
        for ($i = 0, $j = count(self::$ZHI); $i < $j; $i++) {
            if (self::$ZHI[$i] === $zhi) {
                $zhiIndex = $i;
                break;
            }
        }
        $diff = $ganIndex - $zhiIndex;
        if ($diff < 0) {
            $diff += 12;
        }
        return $diff / 2;
    }

    public static function getXun($ganZhi) {
        return self::$XUN[self::getXunIndex($ganZhi)];
    }

    public static function getXunKong($ganZhi) {
        return self::$XUN_KONG[self::getXunIndex($ganZhi)];
    }
}
  class Solar {
    
    public static function fromDate($date) {
        return self::fromYmdHms($date->format('Y'), $date->format('m'), $date->format('d'), $date->format('H'), $date->format('i'), $date->format('s'));
    }

    public static function fromJulianDay($julianDay) {
        $d = floor($julianDay + 0.5);
        $f = $julianDay + 0.5 - $d;
        if ($d >= 2299161) {
            $c = floor(($d - 1867216.25) / 36524.25);
            $d += 1 + $c - floor($c / 4);
        }
        $d += 1524;
        $year = floor(($d - 122.1) / 365.25);
        $d -= floor(365.25 * $year);
        $month = floor($d / 30.601);
        $d -= floor(30.601 * $month);
        $day = $d;
        if ($month > 13) {
            $month -= 13;
            $year -= 4715;
        } else {
            $month -= 1;
            $year -= 4716;
        }
        $f *= 24;
        $hour = floor($f);
        $f -= $hour;
        $f *= 60;
        $minute = floor($f);
        $f -= $minute;
        $f *= 60;
        $second = round($f);
        if ($second > 59) {
            $second -= 60;
            $minute++;
        }
        if ($minute > 59) {
            $minute -= 60;
            $hour++;
        }
        return self::fromYmdHms($year, $month, $day, $hour, $minute, $second);
    }

    public static function fromYmdHms($y, $m, $d, $hour, $minute, $second) {
        if ($y === 1582 && $m === 10) {
            if ($d >= 15) {
                $d -= 10;
            }
        }
        return new class($y, $m, $d, $hour, $minute, $second) {
            private $year;
            private $month;
            private $day;
            private $hour;
            private $minute;
            private $second;

            public function __construct($year, $month, $day, $hour, $minute, $second) {
                $this->year = $year;
                $this->month = $month;
                $this->day = $day;
                $this->hour = $hour;
                $this->minute = $minute;
                $this->second = $second;
            }

            public function getYear() { return $this->year; }
            public function getMonth() { return $this->month; }
            public function getDay() { return $this->day; }
            public function getHour() { return $this->hour; }
            public function getMinute() { return $this->minute; }
            public function getSecond() { return $this->second; }
            public function getWeek() { return (int)date('N', mktime($this->hour, $this->minute, $this->second, $this->month, $this->day, $this->year)); }
            public function getWeekInChinese() { return SolarUtil::$WEEK[$this->getWeek()]; }
            public function getSolarWeek($start) { return SolarWeek::fromDate($this->getCalendar(), $start); }
            public function isLeapYear() { return SolarUtil::isLeapYear($this->year); }
            public function getFestivals() {
                $l = [];
                $f = SolarUtil::$FESTIVAL[$this->month.'-'.$this->day];
                if ($f) {
                    $l[] = $f;
                }
                $weeks = ceil($this->day / 7);
                $week = $this->getWeek();
                $f = SolarUtil::$WEEK_FESTIVAL[$this->month.'-'.$weeks.'-'.$week];
                if ($f) {
                    $l[] = $f;
                }
                if ($this->day + 7 > SolarUtil::getDaysOfMonth($this->year, $this->month)) {
                    $f = SolarUtil::$WEEK_FESTIVAL[$this->month.'-0-'.$week];
                    if ($f) {
                        $l[] = $f;
                    }
                }
                return $l;
            }
            public function getOtherFestivals() {
                $l = [];
                $fs = SolarUtil::$OTHER_FESTIVAL[$this->month.'-'.$this->day];
                if ($fs) {
                    $l = array_merge($l, $fs);
                }
                return $l;
            } 
            public function getXingZuo() {
                $index = 11;
                $y = $this->month * 100 + $this->day;
                if ($y >= 321 && $y <= 419) { $index = 0; }
                else if ($y >= 420 && $y <= 520) { $index = 1; }
                else if ($y >= 521 && $y <= 621) { $index = 2; }
                else if ($y >= 622 && $y <= 722) { $index = 3; }
                else if ($y >= 723 && $y <= 822) { $index = 4; }
                else if ($y >= 823 && $y <= 922) { $index = 5; }
                else if ($y >= 923 && $y <= 1023) { $index = 6; }
                else if ($y >= 1024 && $y <= 1122) { $index = 7; }
                else if ($y >= 1123 && $y <= 1221) { $index = 8; }
                else if ($y >= 1222 || $y <= 119) { $index = 9; }
                else if ($y <= 218) { $index = 10; }
                return SolarUtil::$XINGZUO[$index];
            }
            public function toYmd() {
                $d = $this->day;
                if ($this->year === 1582 && $this->month === 10) {
                    if ($d >= 5) {
                        $d += 10;
                    }
                }
                $y = str_pad($this->year, 4, '0', STR_PAD_LEFT);
                return sprintf('%s-%02d-%02d', $y, $this->month, $d);
            }
            public function toYmdHms() {
                return $this->toYmd() . ' ' . sprintf('%02d:%02d:%02d', $this->hour, $this->minute, $this->second);
            }
            public function toString() { return $this->toYmd(); }
            public function toFullString() {
                $s = $this->toYmdHms();
                if ($this->isLeapYear()) {
                    $s .= ' 闰年';
                }
                $s .= ' 星期' . $this->getWeekInChinese();
                $festivals = $this->getFestivals();
                foreach ($festivals as $festival) {
                    $s .= ' (' . $festival . ')';
                }
                $s .= ' ' . $this->getXingZuo() . '座';
                return $s;
            }
            public function next($days, $onlyWorkday=null) {
                $date = new DateTime($this->toYmdHms());
                if ($days != 0) {
                    if (!$onlyWorkday) {
                        $date->modify("+$days days");
                    } else {
                        $rest = abs($days);
                        $add = $days < 1 ? -1 : 1;
                        while ($rest > 0) {
                            $date->modify("+$add days");
                            $week = (int)$date->format('N');
                            if ($week == 6 || $week == 7) {
                                continue;
                            }
                            $holiday = HolidayUtil::getHoliday($date->format('Y'), $date->format('m'), $date->format('d'));
                            if ($holiday && !$holiday->isWork()) {
                                continue;
                            }
                            $rest--;
                        }
                    }
                }
                return Solar::fromDate($date);
            }
            public function getLunar() { return (new Lunar())->fromDate($this->getCalendar()); }
            public function getJulianDay() {
                $y = $this->year;
                $m = $this->month;
                $d = $this->day + (($this->second / 60 + $this->minute) / 60 + $this->hour) / 24;
                $n = 0;
                $g = false;
                if ($y * 372 + $m * 31 + floor($d) >= 588829) {
                    $g = true;
                }
                if ($m <= 2) {
                    $m += 12;
                    $y--;
                }
                if ($g) {
                    $n = floor($y / 100);
                    $n = 2 - $n + floor($n / 4);
                }
                return floor(365.25 * ($y + 4716)) + floor(30.6001 * ($m + 1)) + $d + $n - 1524.5;
            }
            public function getCalendar() {
                return ExactDate::fromYmdHms($this->year, $this->month, $this->day, $this->hour, $this->minute, $this->second);
            }
        };
    }

    public static function fromBaZi($yearGanZhi, $monthGanZhi, $dayGanZhi, $timeGanZhi, $sect, $baseYear = 1900) {
        $sect = ($sect == 1) ? 1 : 2;
        $l = [];
        $today = self::fromDate(new DateTime());
        $lunar = $today->getLunar();
        $offsetYear = LunarUtil::getJiaZiIndex($lunar->getYearInGanZhiExact()) - LunarUtil::getJiaZiIndex($yearGanZhi);
        if ($offsetYear < 0) {
            $offsetYear += 60;
        }
        $startYear = $lunar->getYear() - $offsetYear;
        $hour = 0;
        $timeZhi = substr($timeGanZhi, 1);
        for ($i = 0, $j = count(LunarUtil::$ZHI); $i < $j; $i++) {
            if (LunarUtil::$ZHI[$i] === $timeZhi) {
                $hour = ($i - 1) * 2;
            }
        }
        while ($startYear >= $baseYear) {
            $year = $startYear - 1;
            $counter = 0;
            $month = 12;
            $day=null;
            $solar=null;
            $found = false;
            while ($counter < 15) {
                if ($year >= $baseYear) {
                    $day = 1;
                    $solar = self::fromYmdHms($year, $month, $day, $hour, 0, 0);
                    $lunar = $solar->getLunar();
                    if ($lunar->getYearInGanZhiExact() === $yearGanZhi && $lunar->getMonthInGanZhiExact() === $monthGanZhi) {
                        $found = true;
                        break;
                    }
                }
                $month++;
                if ($month > 12) {
                    $month = 1;
                    $year++;
                }
                $counter++;
            }
            if ($found) {
                $counter = 0;
                $month--;
                if ($month < 1) {
                    $month = 12;
                    $year--;
                }
                $day = 1;
                $solar = self::fromYmdHms($year, $month, $day, $hour, 0, 0);
                while ($counter < 61) {
                    $lunar = $solar->getLunar();
                    $dgz = ($sect == 2) ? $lunar->getDayInGanZhiExact2() : $lunar->getDayInGanZhiExact();
                    if ($lunar->getYearInGanZhiExact() === $yearGanZhi && $lunar->getMonthInGanZhiExact() === $monthGanZhi && $dgz === $dayGanZhi && $lunar->getTimeInGanZhi() === $timeGanZhi) {
                        $l[] = $solar;
                        break;
                    }
                    $solar = $solar->next(1);
                    $counter++;
                }
            }
            $startYear -= 60;
        }
        return $l;
    }

    public static function J2000() {
        return 2451545;
    }

 
}
class LunarYear
{
    static $_YUAN = ['ä¸‹', 'ä¸Š', 'ä¸­'];
    static $_YUN = ['ä¸ƒ', 'å…«', 'ä¹', 'ä¸€', 'äºŒ', 'ä¸‰', 'å››', 'äº”', 'å…­'];
    static $_LEAP_11 = [75, 94, 170, 238, 265, 322, 389, 469, 553, 583, 610, 678, 735, 754, 773, 849, 887, 936, 1050, 1069, 1126, 1145, 1164, 1183, 1259, 1278, 1308, 1373, 1403, 1441, 1460, 1498, 1555, 1593, 1612, 1631, 1642, 2033, 2128, 2147, 2242, 2614, 2728, 2910, 3062, 3244, 3339, 3616, 3711, 3730, 3825, 4007, 4159, 4197, 4322, 4341, 4379, 4417, 4531, 4599, 4694, 4713, 4789, 4808, 4971, 5085, 5104, 5161, 5180, 5199, 5294, 5305, 5476, 5677, 5696, 5772, 5791, 5848, 5886, 6049, 6068, 6144, 6163, 6258, 6402, 6440, 6497, 6516, 6630, 6641, 6660, 6679, 6736, 6774, 6850, 6869, 6899, 6918, 6994, 7013, 7032, 7051, 7070, 7089, 7108, 7127, 7146, 7222, 7271, 7290, 7309, 7366, 7385, 7404, 7442, 7461, 7480, 7491, 7499, 7594, 7624, 7643, 7662, 7681, 7719, 7738, 7814, 7863, 7882, 7901, 7939, 7958, 7977, 7996, 8034, 8053, 8072, 8091, 8121, 8159, 8186, 8216, 8235, 8254, 8273, 8311, 8330, 8341, 8349, 8368, 8444, 8463, 8474, 8493, 8531, 8569, 8588, 8626, 8664, 8683, 8694, 8702, 8713, 8721, 8751, 8789, 8808, 8816, 8827, 8846, 8884, 8903, 8922, 8941, 8971, 9036, 9066, 9085, 9104, 9123, 9142, 9161, 9180, 9199, 9218, 9256, 9294, 9313, 9324, 9343, 9362, 9381, 9419, 9438, 9476, 9514, 9533, 9544, 9552, 9563, 9571, 9582, 9601, 9639, 9658, 9666, 9677, 9696, 9734, 9753, 9772, 9791, 9802, 9821, 9886, 9897, 9916, 9935, 9954, 9973, 9992];
    static $_LEAP_12 = [37, 56, 113, 132, 151, 189, 208, 227, 246, 284, 303, 341, 360, 379, 417, 436, 458, 477, 496, 515, 534, 572, 591, 629, 648, 667, 697, 716, 792, 811, 830, 868, 906, 925, 944, 963, 982, 1001, 1020, 1039, 1058, 1088, 1153, 1202, 1221, 1240, 1297, 1335, 1392, 1411, 1422, 1430, 1517, 1525, 1536, 1574, 3358, 3472, 3806, 3988, 4751, 4941, 5066, 5123, 5275, 5343, 5438, 5457, 5495, 5533, 5552, 5715, 5810, 5829, 5905, 5924, 6421, 6535, 6793, 6812, 6888, 6907, 7002, 7184, 7260, 7279, 7374, 7556, 7746, 7757, 7776, 7833, 7852, 7871, 7966, 8015, 8110, 8129, 8148, 8224, 8243, 8338, 8406, 8425, 8482, 8501, 8520, 8558, 8596, 8607, 8615, 8645, 8740, 8778, 8835, 8865, 8930, 8960, 8979, 8998, 9017, 9055, 9074, 9093, 9112, 9150, 9188, 9237, 9275, 9332, 9351, 9370, 9408, 9427, 9446, 9457, 9465, 9495, 9560, 9590, 9628, 9647, 9685, 9715, 9742, 9780, 9810, 9818, 9829, 9848, 9867, 9905, 9924, 9943, 9962, 10000];
    static $_LEAP = [];
    static $_CACHE = [];
    public function _initLeap()
    {
        global $_LEAP;
        $i = 0;
        $j = count($this->_LEAP_11);
        while ($i < $j) {
            $this->$_LEAP['_' . $this->_LEAP_11[$i]] = 13;
            $i++;
        }

        $i = 0;
        $j = count($this->_LEAP_12);
        while ($i < $j) {
            $this->$_LEAP['_' . $this->_LEAP_12[$i]] = 14;
            $i++;
        }
    }



    public function _fromYear($lunarYear)
    {
        $this->_initLeap();
        function _getYearIndexes($lunarYear)
        {
            $offset = $lunarYear - 4;
            $yearGanIndex = $offset % 10;
            $yearZhiIndex = $offset % 12;

            if ($yearGanIndex < 0) {
                $yearGanIndex += 10;
            }
            if ($yearZhiIndex < 0) {
                $yearZhiIndex += 12;
            }

            return (object) [
                'ganIndex' => $yearGanIndex,
                'zhiIndex' => $yearZhiIndex
            ];
        }
        $_y = _getYearIndexes($lunarYear);

        $tmp = new class($lunarYear, $_y)
        {
            private $year, $ganIndex, $zhiIndex, $months, $jieQiJulianDays;
            public function __construct($lunarYear, $_y)
            {
                $this->year =  $lunarYear;
                $this->ganIndex =  $_y::$ganIndex;
                $this->zhiIndex =  $_y::$zhiIndex;
                $this->months =  [];
                $this->jieQiJulianDays =  [];
            }
            public function getYear()
            {
                return $this->year;
            }

            public function getGanIndex()
            {
                return $this->ganIndex;
            }

            public function getZhiIndex()
            {
                return $this->zhiIndex;
            }

            public function getGan()
            {
                return LunarUtil::$GAN[$this->ganIndex + 1];
            }

            public function getZhi()
            {
                return LunarUtil::$ZHI[$this->zhiIndex + 1];
            }

            public function getGanZhi()
            {
                return $this->getGan() . $this->getZhi();
            }

            public function getJieQiJulianDays()
            {
                return $this->jieQiJulianDays;
            }

            public function getMonths()
            {
                return $this->months;
            }

            public function getMonth($lunarMonth)
            {
                foreach ($this->months as $m) {
                    if ($m->getYear() === $this->year && $m->getMonth() === $lunarMonth) {
                        return $m;
                    }
                }
                return null;
            }

            public function getLeapMonth()
            {
                foreach ($this->months as $m) {
                    if ($m->getYear() === $this->year && $m->isLeap()) {
                        return abs($m->getMonth());
                    }
                }
                return 0;
            }

            private function _getZaoByGan($index, $name)
            {
                $offset = $index - Solar::fromJulianDay($this->getMonth(1)->getFirstJulianDay())->getLunar()->getDayGanIndex();
                if ($offset < 0) {
                    $offset += 10;
                }
                return str_replace('å‡ ', LunarUtil::$NUMBER[$offset + 1], $name);
            }

            private function _getZaoByZhi($index, $name)
            {
                $offset = $index - Solar::fromJulianDay($this->getMonth(1)->getFirstJulianDay())->getLunar()->getDayZhiIndex();
                if ($offset < 0) {
                    $offset += 12;
                }
                return str_replace('å‡ ', LunarUtil::$NUMBER[$offset + 1], $name);
            }

            public function getTouLiang()
            {
                return $this->_getZaoByZhi(0, 'å‡ é¼ å·ç²®');
            }

            public function getCaoZi()
            {
                return $this->_getZaoByZhi(0, 'è‰å­å‡ åˆ†');
            }

            public function getGengTian()
            {
                return $this->_getZaoByZhi(1, 'å‡ ç‰›è€•ç”°');
            }

            public function getHuaShou()
            {
                return $this->_getZaoByZhi(3, 'èŠ±æ”¶å‡ åˆ†');
            }

            public function getZhiShui()
            {
                return $this->_getZaoByZhi(4, 'å‡ é¾™æ²»æ°´');
            }

            public function getTuoGu()
            {
                return $this->_getZaoByZhi(6, 'å‡ é©¬é©®è°·');
            }
            public function getQiangMi()
            {
                return $this->_getZaoByZhi(9, 'å‡ é¸¡æŠ¢ç±³');
            }

            public function getKanCan()
            {
                return $this->_getZaoByZhi(9, 'å‡ å§‘çœ‹èš•');
            }

            public function getGongZhu()
            {
                return $this->_getZaoByZhi(11, 'å‡ å± å…±çŒª');
            }

            public function getJiaTian()
            {
                return $this->_getZaoByGan(0, 'ç”²ç”°å‡ åˆ†');
            }

            public function getFenBing()
            {
                return $this->_getZaoByGan(2, 'å‡ äººåˆ†é¥¼');
            }

            public function getDeJin()
            {
                return $this->_getZaoByGan(7, 'å‡ æ—¥å¾—é‡‘');
            }

            public function getRenBing()
            {
                return $this->_getZaoByGan(2, $this->_getZaoByZhi(2, 'å‡ äººå‡ ä¸™'));
            }

            public function getRenChu()
            {
                return $this->_getZaoByGan(3, $this->_getZaoByZhi(2, 'å‡ äººå‡ é”„'));
            }

            public function getYuan()
            {
                $index = floor(($this->year + 2696) / 60) % 3;
                return LunarYear::$_YUAN[$index] . 'å…ƒ';
            }

            public function getYun()
            {
                $index = floor(($this->year + 2696) / 20) % 9;
                return LunarYear::$_YUN[$index] . 'è¿';
            }

            public function getNineStar()
            {
                $index = LunarUtil::getJiaZiIndex($this->getGanZhi()) + 1;
                $yuan = floor(($this->year + 2696) / 60) % 3;
                $offset = (62 + $yuan * 3 - $index) % 9;
                if ($offset === 0) {
                    $offset = 9;
                }
                return NineStar::fromIndex($offset - 1);
            }

            public function getPositionXi()
            {
                return LunarUtil::$POSITION_XI[$this->ganIndex + 1];
            }

            public function getPositionXiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getPositionXi()];
            }

            public function getPositionYangGui()
            {
                return LunarUtil::$POSITION_YANG_GUI[$this->ganIndex + 1];
            }

            public function getPositionYangGuiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getPositionYangGui()];
            }

            public function getPositionYinGui()
            {
                return LunarUtil::$POSITION_YIN_GUI[$this->ganIndex + 1];
            }

            public function getPositionYinGuiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getPositionYinGui()];
            }

            public function getPositionFu($sect)
            {
                return ($sect === 1 ? LunarUtil::$POSITION_FU : LunarUtil::$POSITION_FU_2)[$this->ganIndex + 1];
            }

            public function getPositionFuDesc($sect)
            {
                return LunarUtil::$POSITION_DESC[$this->getPositionFu($sect)];
            }

            public function getPositionCai()
            {
                return LunarUtil::$POSITION_CAI[$this->ganIndex + 1];
            }

            public function getPositionCaiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getPositionCai()];
            }

            public function getPositionTaiSui()
            {
                return LunarUtil::$POSITION_TAI_SUI_YEAR[$this->zhiIndex];
            }

            public function getPositionTaiSuiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getPositionTaiSui()];
            }

            public function toString()
            {
                return (string) $this->getYear();
            }

            public function toFullString()
            {
                return $this->getYear() . 'å¹´';
            }

            public function next($n)
            {
                return (new LunarYear)->fromYear($this->year + $n);
            }
            public function _compute()
            {
                global $_LEAP;
                $this->months = [];
                $this->jieQiJulianDays = [];
                $jq = []; // 节气 (中合12点), 长度25
                $hs = []; // 合朔, 即每月初一 (中合12点), 长度16
                $dayCounts = []; // 每月天数, 长度15

                $currentYear = $this->year;
                $year = $currentYear - 2000;

                for ($i = 0, $j = count(Lunar::$JIE_QI_IN_USE); $i < $j; $i++) {
                    // 精确的节气
                    $t = 36525 * ShouXingUtil::saLonT(($year + (17 + $i) * 15.0 / 360) * ShouXingUtil::$PI_2);
                    $t += ShouXingUtil::$ONE_THIRD - ShouXingUtil::dtT($t);
                    $this->jieQiJulianDays[] = $t + Solar::J2000();

                    if ($i > 0 && $i < 26) {
                        $jq[$i - 1] = round($t);
                    }
                }

                // 推算到前个月初一
                $w = ShouXingUtil::calcShuo($jq[0]);
                if ($w > $jq[0]) {
                    $w -= 29.5306;
                }

                for ($i = 0; $i < 16; $i++) {
                    $hs[] = ShouXingUtil::calcShuo($w + 29.5306 * $i);
                }

                for ($i = 0; $i < 15; $i++) {
                    $dayCounts[] = floor($hs[$i + 1] - $hs[$i]);
                }

                $currentYearLeap = isset($_LEAP['_' . $currentYear]) ? $_LEAP['_' . $currentYear] : -1;
                if ($currentYearLeap === -1 && $hs[13] <= $jq[24]) {
                    $i = 1;
                    while ($hs[$i + 1] > $jq[2 * $i] && $i < 13) {
                        $i++;
                    }
                    $currentYearLeap = $i;
                }

                $prevYear = $currentYear - 1;
                $prevYearLeap = isset($_LEAP['_' . $prevYear]) ? $_LEAP['_' . $prevYear] - 12 : -1;

                $y = $this->year - 1;
                $m = 11;

                for ($i = 0, $j = count($dayCounts); $i < $j; $i++) {
                    $cm = $m;
                    $isNextLeap = false;

                    if ($y === $currentYear && $i === $currentYearLeap) {
                        $cm = -$cm;
                    } elseif ($y === $prevYear && $i === $prevYearLeap) {
                        $cm = -$cm;
                    }

                    if ($y === $currentYear && $i + 1 === $currentYearLeap) {
                        $isNextLeap = true;
                    } elseif ($y === $prevYear && $i + 1 === $prevYearLeap) {
                        $isNextLeap = true;
                    }

                    $this->months[] = (new LunarMonth())->_($y, $cm, $dayCounts[$i], $hs[$i] + Solar::J2000());

                    if (!$isNextLeap) {
                        $m++;
                    }
                    if ($m === 13) {
                        $m = 1;
                        $y++;
                    }
                }

                return $this;
            }
        };
        return (new $tmp($lunarYear, $_y))->_compute();
    }

    public function _fromCachedYear($lunarYear)
    {
        $this->_initLeap();
        $key = '_' . $lunarYear;
        if (!isset($this->_CACHE[$key])) {
            $this->_CACHE[$key] = $this->_fromYear($lunarYear);
        }
        return $this->_CACHE[$key];
    }

    public function fromYear($lunarYear)
    {
        $this->_initLeap();
        return $this->_fromCachedYear($lunarYear);
    }
}
  class LunarMonth
  {
  
    //   static $LunarYear = new LunarYear();
      public static function _fromYm($lunarYear, $lunarMonth)
      {
          return (new LunarYear())->fromYear($lunarYear)->getMonth($lunarMonth);
      }
  
      public function _new($lunarYear, $lunarMonth, $dayCount, $firstJulianDay)
      {
  
          return new class($lunarYear, $lunarMonth, $dayCount, $firstJulianDay) {
              private $year, $month, $dayCount, $firstJulianDay;
              public function __construct($year, $month, $dayCount, $firstJulianDay)
              {
                  $this->year = $year;
                  $this->month = $month;
                  $this->dayCount = $dayCount;
                  $this->firstJulianDay = $firstJulianDay;
              }
              public function getYear()
              {
                  return $this->year;
              }
  
              public function getMonth()
              {
                  return $this->month;
              }
  
              public function getDayCount()
              {
                  return $this->dayCount;
              }
  
              public function getFirstJulianDay()
              {
                  return $this->firstJulianDay;
              }
  
              public function isLeap()
              {
                  return $this->month < 0;
              }
  
              public function getPositionTaiSui()
              {
                  $p = '';
                  $m = abs($this->month);
                  switch ($m) {
                      case 1:
                      case 5:
                      case 9:
                          $p = 'é‰®';
                          break;
                      case 3:
                      case 7:
                      case 11:
                          $p = 'å¤';
                          break;
                      case 4:
                      case 8:
                      case 12:
                          $p = 'å·½';
                          break;
                      default:
                          $p = LunarUtil::$POSITION_GAN[Solar::fromJulianDay($this->getFirstJulianDay())->getLunar()->getMonthGanIndex()];
                          break;
                  }
                  return $p;
              }
  
              public function getPositionTaiSuiDesc()
              {
                  return LunarUtil::$POSITION_DESC[$this->getPositionTaiSui()];
              }
  
              public function getNineStar()
              {
                  $index = (new LunarYear())->fromYear($this->year)->getZhiIndex() % 3;
                  $m = $this->month;
                  if ($m < 0) {
                      $m = -$m;
                  }
                  $monthZhiIndex = (13 + $m) % 12;
                  $n = 27 - ($index * 3);
                  if ($monthZhiIndex < LunarUtil::$BASE_MONTH_ZHI_INDEX) {
                      $n -= 3;
                  }
                  $offset = ($n - $monthZhiIndex) % 9;
                  return NineStar::fromIndex($offset);
              }
  
              public function next($n)
              {
                  if ($n == 0) {
                      return (new LunarMonth())->fromYm($this->year, $this->month);
                  } else {
                      $rest = abs($n);
                      $ny = $this->year;
                      $iy = $ny;
                      $im = $this->month;
                      $index = 0;
                      $months = (new LunarYear())->fromYear($ny)->getMonths();
                      $size = count($months);
  
                      if ($n > 0) {
                          while (true) {
                              for ($i = 0; $i < $size; $i++) {
                                  $m = $months[$i];
                                  if ($m->getYear() === $iy && $m->getMonth() === $im) {
                                      $index = $i;
                                      break;
                                  }
                              }
                              $more = $size - $index - 1;
                              if ($rest < $more) {
                                  break;
                              }
                              $rest -= $more;
                              $lastMonth = $months[$size - 1];
                              $iy = $lastMonth->getYear();
                              $im = $lastMonth->getMonth();
                              $ny++;
                              $months = (new LunarYear())->fromYear($ny)->getMonths();
                              $size = count($months);
                          }
                          return $months[$index + $rest];
                      } else {
                          while (true) {
                              for ($i = 0; $i < $size; $i++) {
                                  $m = $months[$i];
                                  if ($m->getYear() === $iy && $m->getMonth() === $im) {
                                      $index = $i;
                                      break;
                                  }
                              }
                              if ($rest <= $index) {
                                  break;
                              }
                              $rest -= $index;
                              $firstMonth = $months[0];
                              $iy = $firstMonth->getYear();
                              $im = $firstMonth->getMonth();
                              $ny--;
                              $months = (new LunarYear())->fromYear($ny)->getMonths();
                              $size = count($months);
                          }
                          return $months[$index - $rest];
                      }
                  }
              }
  
              public function toString()
              {
                  return $this->getYear() . '年' . ($this->isLeap() ? '闰' : '') . LunarUtil::$MONTH[abs($this->getMonth())] . '月(' . $this->getDayCount() . ')天';
              }
  
              public static function fromYm($lunarYear, $lunarMonth)
              {
                  return (new LunarYear())->fromYear($lunarYear)->getMonth($lunarMonth);
              }
          };
      }
  
      public function fromYm($lunarYear, $lunarMonth)
      {
          return $this->_fromYm($lunarYear, $lunarMonth);
      }
      public function _($lunarYear, $lunarMonth, $dayCount, $firstJulianDay)
      {
          return self::_new($lunarYear, $lunarMonth, $dayCount, $firstJulianDay);
      }
  }
  
class NineStar
{
    
    private $index;
    static $NUMBER=['ä¸€','äºŒ','ä¸‰','å››','äº”','å…­','ä¸ƒ','å…«','ä¹'];
    static $NUMBERB5=['ä¸€','äºŒ','ä¸‰','å››','äº”','å…­','ä¸ƒ','å…«','ä¹'];
    static $NUMBERB6=['äºŒ','ä¸‰','å››','äº”','å…­','ä¸ƒ','å…«','ä¹','ä¸€'];
    static $NUMBERB7=['ä¸‰','å››','äº”','å…­','ä¸ƒ','å…«','ä¹','ä¸€','äºŒ'];
    static $NUMBERB8=['å››','äº”','å…­','ä¸ƒ','å…«','ä¹','ä¸€','äºŒ','ä¸‰'];
    static $NUMBERB9=['äº”','å…­','ä¸ƒ','å…«','ä¹','ä¸€','äºŒ','ä¸‰','å››'];
    static $NUMBERB1=['å…­','ä¸ƒ','å…«','ä¹','ä¸€','äºŒ','ä¸‰','å››','äº”'];
    static $NUMBERB2=['ä¸ƒ','å…«','ä¹','ä¸€','äºŒ','ä¸‰','å››','äº”','å…­'];
    static $NUMBERB3=['å…«','ä¹','ä¸€','äºŒ','ä¸‰','å››','äº”','å…­','ä¸ƒ'];
    static $NUMBERB4=['ä¹','ä¸€','äºŒ','ä¸‰','å››','äº”','å…­','ä¸ƒ','å…«'];

    static $NUMBER5=['1','2','3','4','5','6','7','8','9'];
    static $NUMBER6=['2','3','4','5','6','7','8','9','1'];
    static $NUMBER7=['3','4','5','6','7','8','9','1','2'];
    static $NUMBER8=['4','5','6','7','8','9','1','2','3'];
    static $NUMBER9=['5','6','7','8','9','1','2','3','4'];
    static $NUMBER1=['6','7','8','9','1','2','3','4','5'];
    static $NUMBER2=['7','8','9','1','2','3','4','5','6'];
    static $NUMBER3=['8','9','1','2','3','4','5','6','7'];
    static $NUMBER4=['9','1','2','3','4','5','6','7','8'];
    static $NUMBERS5=['ï¼‘','ï¼’','ï¼“','ï¼”','ï¼•','ï¼–','ï¼—','ï¼˜','ï¼™'];
    static $NUMBERS6=['ï¼’','ï¼“','ï¼”','ï¼•','ï¼–','ï¼—','ï¼˜','ï¼™','ï¼‘'];
    static $NUMBERS7=['ï¼“','ï¼”','ï¼•','ï¼–','ï¼—','ï¼˜','ï¼™','ï¼‘','ï¼’'];
    static $NUMBERS8=['ï¼”','ï¼•','ï¼–','ï¼—','ï¼˜','ï¼™','ï¼‘','ï¼’','ï¼“'];
    static $NUMBERS9=['ï¼•','ï¼–','ï¼—','ï¼˜','ï¼™','ï¼‘','ï¼’','ï¼“','ï¼”'];
    static $NUMBERS1=['ï¼–','ï¼—','ï¼˜','ï¼™','ï¼‘','ï¼’','ï¼“','ï¼”','ï¼•'];
    static $NUMBERS2=['ï¼—','ï¼˜','ï¼™','ï¼‘','ï¼’','ï¼“','ï¼”','ï¼•','ï¼–'];
    static $NUMBERS3=['ï¼˜','ï¼™','ï¼‘','ï¼’','ï¼“','ï¼”','ï¼•','ï¼–','ï¼—'];
    static $NUMBERS4=['ï¼™','ï¼‘','ï¼’','ï¼“','ï¼”','ï¼•','ï¼–','ï¼—','ï¼˜'];
  
    static $COLOR=['ç™½','é»’','ç¢§','ç»¿','é»„','ç™½','èµ¤','ç™½','ç´«'];
    static $WU_XING=['æ°´','åœŸ','æœ¨','æœ¨','åœŸ','é‡‘','é‡‘','åœŸ','ç«'];
    static $POSITION=['åŽ','å¤','éœ‡','å·½','ä¸­','ä¹¾','å…‘','è‰®','ç¦»'];
    static $NAME_BEI_DOU=['å¤©æž¢','å¤©ç’‡','å¤©çŽ‘','å¤©æƒ','çŽ‰è¡¡','å¼€é˜³','æ‘‡å…‰','æ´žæ˜Ž','éšå…ƒ'];
    static $NAME_XUAN_KONG=['è´ªç‹¼','å·¨é—¨','ç¦„å­˜','æ–‡æ›²','å»‰è´ž','æ­¦æ›²','ç ´å†›','å·¦è¾…','å³å¼¼'];
    static $NAME_QI_MEN=['å¤©è“¬','å¤©èŠ®','å¤©å†²','å¤©è¾…','å¤©ç¦½','å¤©å¿ƒ','å¤©æŸ±','å¤©ä»»','å¤©è‹±'];
    static $BA_MEN_QI_MEN=['ä¼‘','æ­»','ä¼¤','æœ','ä¸­','å¼€','æƒŠ','ç”Ÿ','æ™¯'];
    static $NAME_TAI_YI=['å¤ªä¹™','æ‘„æ','è½©è¾•','æ‹›æ‘‡','å¤©ç¬¦','é’é¾™','å’¸æ± ','å¤ªé˜´','å¤©ä¹™'];
    static $TYPE_TAI_YI=['å‰ç¥ž','å‡¶ç¥ž','å®‰ç¥ž','å®‰ç¥ž','å‡¶ç¥ž','å‰ç¥ž','å‡¶ç¥ž','å‰ç¥ž','å‰ç¥ž'];
    static $SONG_TAI_YI=['é—¨ä¸­å¤ªä¹™æ˜Žï¼Œæ˜Ÿå®˜å·è´ªç‹¼ï¼ŒèµŒå½©è´¢å–œæ—ºï¼Œå©šå§»å¤§å‰æ˜Œï¼Œå‡ºå…¥æ— é˜»æŒ¡ï¼Œå‚è°’è§è´¤è‰¯ï¼Œæ­¤è¡Œä¸‰äº”é‡Œï¼Œé»‘è¡£åˆ«é˜´é˜³ã€‚','é—¨å‰è§æ‘„æï¼Œç™¾äº‹å¿…å¿§ç–‘ï¼Œç›¸ç”ŸçŠ¹è‡ªå¯ï¼Œç›¸å…‹ç¥¸å¿…ä¸´ï¼Œæ­»é—¨å¹¶ç›¸ä¼šï¼Œè€å¦‡å“­æ‚²å•¼ï¼Œæ±‚è°‹å¹¶å‰äº‹ï¼Œå°½çš†ä¸ç›¸å®œï¼Œåªå¯è—éšéï¼Œè‹¥åŠ¨ä¼¤èº«ç–¾ã€‚','å‡ºå…¥ä¼šè½©è¾•ï¼Œå‡¡äº‹å¿…ç¼ ç‰µï¼Œç›¸ç”Ÿå…¨ä¸ç¾Žï¼Œç›¸å…‹æ›´å¿§ç…Žï¼Œè¿œè¡Œå¤šä¸åˆ©ï¼Œåšå½©å°½è¾“é’±ï¼Œä¹å¤©çŽ„å¥³æ³•ï¼Œå¥å¥ä¸è™šè¨€ã€‚','æ‹›æ‘‡å·æœ¨æ˜Ÿï¼Œå½“ä¹‹äº‹èŽ«è¡Œï¼Œç›¸å…‹è¡Œäººé˜»ï¼Œé˜´äººå£èˆŒè¿Žï¼Œæ¢¦å¯å¤šæƒŠæƒ§ï¼Œå±‹å“æ–§è‡ªé¸£ï¼Œé˜´é˜³æ¶ˆæ¯ç†ï¼Œä¸‡æ³•å¼—è¿æƒ…ã€‚','äº”é¬¼ä¸ºå¤©ç¬¦ï¼Œå½“é—¨é˜´å¥³è°‹ï¼Œç›¸å…‹æ— å¥½äº‹ï¼Œè¡Œè·¯é˜»ä¸­é€”ï¼Œèµ°å¤±éš¾å¯»è§…ï¼Œé“é€¢æœ‰å°¼å§‘ï¼Œæ­¤æ˜Ÿå½“é—¨å€¼ï¼Œä¸‡äº‹æœ‰ç¾é™¤ã€‚','ç¥žå…‰è·ƒé’é¾™ï¼Œè´¢æ°”å–œé‡é‡ï¼ŒæŠ•å…¥æœ‰é…’é£Ÿï¼ŒèµŒå½©æœ€å…´éš†ï¼Œæ›´é€¢ç›¸ç”Ÿæ—ºï¼Œä¼‘è¨€å…‹ç ´å‡¶ï¼Œè§è´µå®‰è¥å¯¨ï¼Œä¸‡äº‹æ€»å‰åŒã€‚','å¾å°†ä¸ºå’¸æ± ï¼Œå½“ä¹‹å°½ä¸å®œï¼Œå‡ºå…¥å¤šä¸åˆ©ï¼Œç›¸å…‹æœ‰ç¾æƒ…ï¼ŒèµŒå½©å…¨è¾“å°½ï¼Œæ±‚è´¢ç©ºæ‰‹å›žï¼Œä»™äººçœŸå¦™è¯­ï¼Œæ„šäººèŽ«ä¸ŽçŸ¥ï¼ŒåŠ¨ç”¨è™šæƒŠé€€ï¼Œåå¤é€†é£Žå¹ã€‚','åä¸´å¤ªé˜´æ˜Ÿï¼Œç™¾ç¥¸ä¸ç›¸ä¾µï¼Œæ±‚è°‹æ‚‰æˆå°±ï¼ŒçŸ¥äº¤æœ‰è§…å¯»ï¼Œå›žé£Žå½’æ¥è·¯ï¼Œææœ‰æ®ƒä¼èµ·ï¼Œå¯†è¯­ä¸­è®°å–ï¼Œæ…Žä¹ŽèŽ«è½»è¡Œã€‚','è¿Žæ¥å¤©ä¹™æ˜Ÿï¼Œç›¸é€¢ç™¾äº‹å…´ï¼Œè¿ç”¨å’Œåˆåº†ï¼ŒèŒ¶é…’å–œç›¸è¿Žï¼Œæ±‚è°‹å¹¶å«å¨¶ï¼Œå¥½åˆæœ‰å¤©æˆï¼Œç¥¸ç¦å¦‚ç¥žéªŒï¼Œå‰å‡¶ç”šåˆ†æ˜Žã€‚'];
    static $LUCK_XUAN_KONG=['å‰','å‡¶','å‡¶','å‰','å‡¶','å‰','å‡¶','å‰','å‰'];
    static $LUCK_QI_MEN=['å¤§å‡¶','å¤§å‡¶','å°å‰','å¤§å‰','å¤§å‰','å¤§å‰','å°å‡¶','å°å‰','å°å‡¶'];
    static $YIN_YANG_QI_MEN=['é˜³','é˜´','é˜³','é˜³','é˜³','é˜´','é˜´','é˜³','é˜´'];
    private function __construct($index)
    {
        $this->index = $index;
    }

    public static function fromIndex($index)
    {
        return new self($index);
    }

    public function getNumber()
    {
        return NineStar::$NUMBER[$this->index];
    }

    public function getNumberB1()
    {
        return NineStar::$NUMBERB1[$this->index];
    }

    public function getNumberB2()
    {
        return NineStar::$NUMBERB2[$this->index];
    }

    public function getNumberB3()
    {
        return NineStar::$NUMBERB3[$this->index];
    }

    public function getNumberB4()
    {
        return NineStar::$NUMBERB4[$this->index];
    }

    public function getNumberB5()
    {
        return NineStar::$NUMBERB5[$this->index];
    }

    public function getNumberB6()
    {
        return NineStar::$NUMBERB6[$this->index];
    }

    public function getNumberB7()
    {
        return NineStar::$NUMBERB7[$this->index];
    }

    public function getNumberB8()
    {
        return NineStar::$NUMBERB8[$this->index];
    }

    public function getNumberB9()
    {
        return NineStar::$NUMBERB9[$this->index];
    }

    public function getNumber1()
    {
        return NineStar::$NUMBER1[$this->index];
    }

    public function getNumber2()
    {
        return NineStar::$NUMBER2[$this->index];
    }

    public function getNumber3()
    {
        return NineStar::$NUMBER3[$this->index];
    }

    public function getNumber4()
    {
        return NineStar::$NUMBER4[$this->index];
    }

    public function getNumber5()
    {
        return NineStar::$NUMBER5[$this->index];
    }

    public function getNumber6()
    {
        return NineStar::$NUMBER6[$this->index];
    }

    public function getNumber7()
    {
        return NineStar::$NUMBER7[$this->index];
    }

    public function getNumber8()
    {
        return NineStar::$NUMBER8[$this->index];
    }

    public function getNumber9()
    {
        return NineStar::$NUMBER9[$this->index];
    }

    public function getNumbers1()
    {
        return NineStar::$NUMBERS1[$this->index];
    }

    public function getNumbers2()
    {
        return NineStar::$NUMBERS2[$this->index];
    }

    public function getNumbers3()
    {
        return NineStar::$NUMBERS3[$this->index];
    }

    public function getNumbers4()
    {
        return NineStar::$NUMBERS4[$this->index];
    }

    public function getNumbers5()
    {
        return NineStar::$NUMBERS5[$this->index];
    }

    public function getNumbers6()
    {
        return NineStar::$NUMBERS6[$this->index];
    }

    public function getNumbers7()
    {
        return NineStar::$NUMBERS7[$this->index];
    }

    public function getNumbers8()
    {
        return NineStar::$NUMBERS8[$this->index];
    }

    public function getNumbers9()
    {
        return NineStar::$NUMBERS9[$this->index];
    }

    public function getColor()
    {
        return NineStar::$COLOR[$this->index];
    }

    public function getWuXing()
    {
        return NineStar::$WU_XING[$this->index];
    }

    public function getPosition()
    {
        return NineStar::$POSITION[$this->index];
    }

    public function getPositionDesc()
    {
        return LunarUtil::$POSITION_DESC[$this->getPosition()];
    }

    public function getNameInXuanKong()
    {
        return NineStar::$NAME_XUAN_KONG[$this->index];
    }

    public function getNameInBeiDou()
    {
        return NineStar::$NAME_BEI_DOU[$this->index];
    }

    public function getNameInQiMen()
    {
        return NineStar::$NAME_QI_MEN[$this->index];
    }

    public function getNameInTaiYi()
    {
        return NineStar::$NAME_TAI_YI[$this->index];
    }

    public function getLuckInQiMen()
    {
        return NineStar::$LUCK_QI_MEN[$this->index];
    }

    public function getLuckInXuanKong()
    {
        return NineStar::$LUCK_XUAN_KONG[$this->index];
    }

    public function getYinYangInQiMen()
    {
        return NineStar::$YIN_YANG_QI_MEN[$this->index];
    }

    public function getTypeInTaiYi()
    {
        return NineStar::$TYPE_TAI_YI[$this->index];
    }

    public function getBaMenInQiMen()
    {
        return NineStar::$BA_MEN_QI_MEN[$this->index];
    }

    public function getSongInTaiYi()
    {
        return NineStar::$SONG_TAI_YI[$this->index];
    }

    public function getIndex()
    {
        return $this->index;
    }

    public function __toString()
    {
        return $this->getNumber() . $this->getColor() . $this->getWuXing() . $this->getNameInBeiDou();
    }

    public function toFullString()
    {
        $s = $this->getNumber();
        $s .= $this->getColor();
        $s .= $this->getWuXing();
        $s .= ' ';
        $s .= $this->getPosition();
        $s .= '(';
        $s .= $this->getPositionDesc();
        $s .= ') ';
        $s .= $this->getNameInBeiDou();
        $s .= ' 天宫[';
        $s .= $this->getNameInXuanKong();
        $s .= ' ';
        $s .= $this->getLuckInXuanKong();
        $s .= '] 吉门[';
        $s .= $this->getNameInQiMen();
        $s .= ' ';
        $s .= $this->getLuckInQiMen();
        if (strlen($this->getBaMenInQiMen()) > 0) {
            $s .= ' ';
            $s .= $this->getBaMenInQiMen();
            $s .= '门';
        }
        $s .= ' ';
        $s .= $this->getYinYangInQiMen();
        $s .= '] 太一[';
        $s .= $this->getNameInTaiYi();
        $s .= ' ';
        $s .= $this->getTypeInTaiYi();
        $s .= ']';
        return $s;
    }
}
class Lunar
{

    private function _computeJieQi(&$o, $ly)
    {
        $o['jieQiList'] = [];
        $o['jieQi'] = [];
        $julianDays = $ly->getJieQiJulianDays();
        foreach (Lunar::$JIE_QI_IN_USE as $i => $key) {
            $o['jieQiList'][] = $key;
            $o['jieQi'][$key] = Solar::fromJulianDay($julianDays[$i]);
        }
    }

    private function _computeYear(&$o, $solar, $year)
    {
        $offset = $year - 4;
        $yearGanIndex = $offset % 10;
        $yearZhiIndex = $offset % 12;

        if ($yearGanIndex < 0) {
            $yearGanIndex += 10;
        }

        if ($yearZhiIndex < 0) {
            $yearZhiIndex += 12;
        }

        $g = $yearGanIndex;
        $z = $yearZhiIndex;

        $gExact = $yearGanIndex;
        $zExact = $yearZhiIndex;

        $solarYear = $solar->getYear();
        $solarYmd = $solar->toYmd();
        $solarYmdHms = $solar->toYmdHms();

        $liChun = $o['jieQi']['立春'];
        if ($liChun->getYear() != $solarYear) {
            $liChun = $o['jieQi']['LI_CHUN'];
        }
        $liChunYmd = $liChun->toYmd();
        $liChunYmdHms = $liChun->toYmdHms();

        if ($year === $solarYear) {
            if ($solarYmd < $liChunYmd) {
                $g--;
                $z--;
            }
            if ($solarYmdHms < $liChunYmdHms) {
                $gExact--;
                $zExact--;
            }
        } elseif ($year < $solarYear) {
            if ($solarYmd >= $liChunYmd) {
                $g++;
                $z++;
            }
            if ($solarYmdHms >= $liChunYmdHms) {
                $gExact++;
                $zExact++;
            }
        }

        $o['yearGanIndex'] = $yearGanIndex;
        $o['yearZhiIndex'] = $yearZhiIndex;
        $o['yearGanIndexByLiChun'] = ($g < 0 ? $g + 10 : $g) % 10;
        $o['yearZhiIndexByLiChun'] = ($z < 0 ? $z + 12 : $z) % 12;
        $o['yearGanIndexExact'] = ($gExact < 0 ? $gExact + 10 : $gExact) % 10;
        $o['yearZhiIndexExact'] = ($zExact < 0 ? $zExact + 12 : $zExact) % 12;
    }

    private function _computeMonth(&$o, $solar)
    {
        $start = null;
        $end = null;
        $index = -3;
        $size = count(Lunar::$JIE_QI_IN_USE);

        for ($i = 0; $i < $size; $i += 2) {
            $end = $o['jieQi'][Lunar::$JIE_QI_IN_USE[$i]];
            $ymd = $solar->toYmd();
            $symd = $start === null ? $ymd : $start->toYmd();
            if ($ymd >= $symd && $ymd < $end->toYmd()) {
                break;
            }
            $start = $end;
            $index++;
        }

        $offset = (((($o['yearGanIndexByLiChun'] + ($index < 0 ? 1 : 0)) % 5) + 1) * 2) % 10;
        $o['monthGanIndex'] = (($index < 0 ? $index + 10 : $index) + $offset) % 10;
        $o['monthZhiIndex'] = (($index < 0 ? $index + 12 : $index) + LunarUtil::$BASE_MONTH_ZHI_INDEX) % 12;

        $start = null;
        $index = -3;

        for ($i = 0; $i < $size; $i += 2) {
            $end = $o['jieQi'][Lunar::$JIE_QI_IN_USE[$i]];
            $time = $solar->toYmdHms();
            $stime = $start === null ? $time : $start->toYmdHms();
            if ($time >= $stime && $time < $end->toYmdHms()) {
                break;
            }
            $start = $end;
            $index++;
        }

        $offset = (((($o['yearGanIndexExact'] + ($index < 0 ? 1 : 0)) % 5) + 1) * 2) % 10;
        $o['monthGanIndexExact'] = (($index < 0 ? $index + 10 : $index) + $offset) % 10;
        $o['monthZhiIndexExact'] = (($index < 0 ? $index + 12 : $index) + LunarUtil::$BASE_MONTH_ZHI_INDEX) % 12;
    }

    private function _computeDay(&$o, $solar, $hour, $minute)
    {
        $noon = Solar::fromYmdHms($solar->getYear(), $solar->getMonth(), $solar->getDay(), 12, 0, 0);
        $offset = floor($noon->getJulianDay()) - 11;
        $dayGanIndex = $offset % 10;
        $dayZhiIndex = $offset % 12;
        $o['dayGanIndex'] = $dayGanIndex;
        $o['dayZhiIndex'] = $dayZhiIndex;

        $dayGanExact = $dayGanIndex;
        $dayZhiExact = $dayZhiIndex;
        $o['dayGanIndexExact2'] = $dayGanExact;
        $o['dayZhiIndexExact2'] = $dayZhiExact;

        $hm = ($hour < 10 ? '0' : '') . $hour . ':' . ($minute < 10 ? '0' : '') . $minute;
        if ($hm >= '23:00' && $hm <= '23:59') {
            $dayGanExact++;
            if ($dayGanExact >= 10) {
                $dayGanExact -= 10;
            }
            $dayZhiExact++;
            if ($dayZhiExact >= 12) {
                $dayZhiExact -= 12;
            }
        }
        $o['dayGanIndexExact'] = $dayGanExact;
        $o['dayZhiIndexExact'] = $dayZhiExact;
    }

    private function _computeTime(&$o, $hour, $minute)
    {
        $timeZhiIndex = LunarUtil::getTimeZhiIndex(($hour < 10 ? '0' : '') . $hour . ':' . ($minute < 10 ? '0' : '') . $minute);
        $o['timeZhiIndex'] = $timeZhiIndex;
        $o['timeGanIndex'] = ($o['dayGanIndexExact'] % 5 * 2 + $timeZhiIndex) % 10;
    }

    private function _computeWeek(&$o, $solar)
    {
        $o['weekIndex'] = $solar->getWeek();
    }

    private function _compute($year, $hour, $minute, $second, $solar, $ly)
    {
        $o = [];
        $this->_computeJieQi($o, $ly);
        $this->_computeYear($o, $solar, $year);
        $this->_computeMonth($o, $solar);
        $this->_computeDay($o, $solar, $hour, $minute);
        $this->_computeTime($o, $hour, $minute);
        $this->_computeWeek($o, $solar);
        return $o;
    }

    private function _fromDate($date)
    {
        $currentYear = $date->format('Y');
        $currentMonth = $date->format('n');
        $currentDay = $date->format('j');
        $lunarYear = 0;
        $lunarMonth = 0;
        $lunarDay = 0;
        $ly = (new LunarYear())->fromYear($currentYear);
        $lms = $ly->getMonths();
        foreach ($lms as $m) {
            $firstDay = Solar::fromJulianDay($m->getFirstJulianDay());
            $days = ExactDate::getDaysBetweenYmd($firstDay->getYear(), $firstDay->getMonth(), $firstDay->getDay(), $currentYear, $currentMonth, $currentDay);
            if ($days < $m->getDayCount()) {
                $lunarYear = $m->getYear();
                $lunarMonth = $m->getMonth();
                $lunarDay = $days + 1;
                break;
            }
        }
        return $this->_new($lunarYear, $lunarMonth, $lunarDay, $date->format('G'), $date->format('i'), $date->format('s'), Solar::fromDate($date), $ly);
    }

    private function _fromYmdHms($lunarYear, $lunarMonth, $lunarDay, $hour, $minute, $second)
    {
        $y = (new LunarYear())->fromYear($lunarYear);
        $m = $y->getMonth($lunarMonth);
        if ($m === null) {
            throw new Exception('wrong lunar year ' . $lunarYear . ' month ' . $lunarMonth);
        }
        if ($lunarDay < 1) {
            throw new Exception('lunar day must be greater than 0');
        }
        $days = $m->getDayCount();
        if ($lunarDay > $days) {
            throw new Exception('only ' . $days . ' days in lunar year ' . $lunarYear . ' month ' . $lunarMonth);
        }
        $noon = Solar::fromJulianDay($m->getFirstJulianDay() + $lunarDay - 1);
        $solar = Solar::fromYmdHms($noon->getYear(), $noon->getMonth(), $noon->getDay(), $hour, $minute, $second);
        if ($noon->getYear() !== $lunarYear) {
            $y = (new LunarYear())->fromYear($noon->getYear());
        }
        return $this->_new($lunarYear, $lunarMonth, $lunarDay, $hour, $minute, $second, $solar, $y);
    }

    public function _new($year, $month, $day, $hour, $minute, $second, $solar, $ly)
    {
        $gz =  $this->_compute($year, $hour, $minute, $second, $solar, $ly);
        return new class($year, $month, $day, $hour, $minute, $second, $solar) {
            private $year;
            private $month;
            private $day;
            private $hour;
            private $minute;
            private $second;
            private $timeGanIndex;
            private $timeZhiIndex;
            private $dayGanIndex;
            private $dayZhiIndex;
            private $dayGanIndexExact;
            private $dayZhiIndexExact;
            private $dayGanIndexExact2;
            private $dayZhiIndexExact2;
            private $monthGanIndex;
            private $monthZhiIndex;
            private $monthGanIndexExact;
            private $monthZhiIndexExact;
            private $yearGanIndex;
            private $yearZhiIndex;
            private $yearGanIndexByLiChun;
            private $yearZhiIndexByLiChun;
            private $yearGanIndexExact;
            private $yearZhiIndexExact;
            private $weekIndex;
            private $jieQi;
            private $jieQiList;
            private $solar;
            private $eightChar;

            public function __construct($year, $month, $day, $hour, $minute, $second, $solar)
            {
                global $gz;
                $this->year = $year;
                $this->month = $month;
                $this->day = $day;
                $this->hour = $hour;
                $this->minute = $minute;
                $this->second = $second;
                $this->timeGanIndex = $gz::timeGanIndex;
                $this->timeZhiIndex = $gz::timeZhiIndex;
                $this->dayGanIndex = $gz::dayGanIndex;
                $this->dayZhiIndex = $gz::dayZhiIndex;
                $this->dayGanIndexExact = $gz::dayGanIndexExact;
                $this->dayZhiIndexExact = $gz::dayZhiIndexExact;
                $this->dayGanIndexExact2 = $gz::dayGanIndexExact2;
                $this->dayZhiIndexExact2 = $gz::dayZhiIndexExact2;
                $this->monthGanIndex = $gz::monthGanIndex;
                $this->monthZhiIndex = $gz::monthZhiIndex;
                $this->monthGanIndexExact = $gz::monthGanIndexExact;
                $this->monthZhiIndexExact = $gz::monthZhiIndexExact;
                $this->yearGanIndex = $gz::yearGanIndex;
                $this->yearZhiIndex = $gz::yearZhiIndex;
                $this->yearGanIndexByLiChun = $gz::yearGanIndexByLiChun;
                $this->yearZhiIndexByLiChun = $gz::yearZhiIndexByLiChun;
                $this->yearGanIndexExact = $gz::yearGanIndexExact;
                $this->yearZhiIndexExact = $gz::yearZhiIndexExact;
                $this->weekIndex = $gz::weekIndex;
                $this->jieQi = $gz::jieQi;
                $this->jieQiList = $gz::jieQiList;
                $this->solar = $solar;
                $this->eightChar = null;
            }
            public function getYear()
            {
                return $this->year;
            }
            public function getMonth()
            {
                return $this->month;
            }
            public function getDay()
            {
                return $this->day;
            }
            public function getHour()
            {
                return $this->hour;
            }
            public function getMinute()
            {
                return $this->minute;
            }
            public function getSecond()
            {
                return $this->second;
            }
            public function getTimeGanIndex()
            {
                return $this->timeGanIndex;
            }
            public function getTimeZhiIndex()
            {
                return $this->timeZhiIndex;
            }
            public function getDayGanIndex()
            {
                return $this->dayGanIndex;
            }
            public function getDayGanIndexExact()
            {
                return $this->dayGanIndexExact;
            }
            public function getDayGanIndexExact2()
            {
                return $this->dayGanIndexExact2;
            }
            public function getDayZhiIndex()
            {
                return $this->dayZhiIndex;
            }
            public function getDayZhiIndexExact()
            {
                return $this->dayZhiIndexExact;
            }
            public function getDayZhiIndexExact2()
            {
                return $this->dayZhiIndexExact2;
            }
            public function getMonthGanIndex()
            {
                return $this->monthGanIndex;
            }
            public function getMonthGanIndexExact()
            {
                return $this->monthGanIndexExact;
            }
            public function getMonthZhiIndex()
            {
                return $this->monthZhiIndex;
            }
            public function getMonthZhiIndexExact()
            {
                return $this->monthZhiIndexExact;
            }
            public function getYearGanIndex()
            {
                return $this->yearGanIndex;
            }
            public function getYearGanIndexByLiChun()
            {
                return $this->yearGanIndexByLiChun;
            }
            public function getYearGanIndexExact()
            {
                return $this->yearGanIndexExact;
            }
            public function getYearZhiIndex()
            {
                return $this->yearZhiIndex;
            }
            public function getYearZhiIndexByLiChun()
            {
                return $this->yearZhiIndexByLiChun;
            }
            public function getYearZhiIndexExact()
            {
                return $this->yearZhiIndexExact;
            }
            public function getGan()
            {
                return $this->getYearGan();
            }
            public function getZhi()
            {
                return $this->getYearZhi();
            }
            public function getYearGan()
            {
                return LunarUtil::$GAN[$this->yearGanIndex + 1];
            }
            public function getYearGanByLiChun()
            {
                return LunarUtil::$GAN[$this->yearGanIndexByLiChun + 1];
            }
            public function getYearGanExact()
            {
                return LunarUtil::$GAN[$this->yearGanIndexExact + 1];
            }
            public function getYearZhi()
            {
                return LunarUtil::$ZHI[$this->yearZhiIndex + 1];
            }
            public function getYearZhiByLiChun()
            {
                return LunarUtil::$ZHI[$this->yearZhiIndexByLiChun + 1];
            }
            public function getYearZhiExact()
            {
                return LunarUtil::$ZHI[$this->yearZhiIndexExact + 1];
            }
            public function getYearInGanZhi()
            {
                return $this->getYearGan() + $this->getYearZhi();
            }
            public function getYearInGanZhiByLiChun()
            {
                return $this->getYearGanByLiChun() + $this->getYearZhiByLiChun();
            }
            public function getYearInGanZhiExact()
            {
                return $this->getYearGanExact() + $this->getYearZhiExact();
            }
            public function getMonthGan()
            {
                return LunarUtil::$GAN[$this->monthGanIndex + 1];
            }
            public function getMonthGanExact()
            {
                return LunarUtil::$GAN[$this->monthGanIndexExact + 1];
            }
            public function getMonthZhi()
            {
                return LunarUtil::$ZHI[$this->monthZhiIndex + 1];
            }
            public function getMonthZhiExact()
            {
                return LunarUtil::$ZHI[$this->monthZhiIndexExact + 1];
            }
            public function getMonthInGanZhi()
            {
                return $this->getMonthGan() + $this->getMonthZhi();
            }
            public function getMonthInGanZhiExact()
            {
                return $this->getMonthGanExact() + $this->getMonthZhiExact();
            }
            public function getDayGan()
            {
                return LunarUtil::$GAN[$this->dayGanIndex + 1];
            }
            public function getDayGanExact()
            {
                return LunarUtil::$GAN[$this->dayGanIndexExact + 1];
            }
            public function getDayGanExact2()
            {
                return LunarUtil::$GAN[$this->dayGanIndexExact2 + 1];
            }
            public function getDayZhi()
            {
                return LunarUtil::$ZHI[$this->dayZhiIndex + 1];
            }
            public function getDayZhiExact()
            {
                return LunarUtil::$ZHI[$this->dayZhiIndexExact + 1];
            }
            public function getDayZhiExact2()
            {
                return LunarUtil::$ZHI[$this->dayZhiIndexExact2 + 1];
            }
            public function getDayInGanZhi()
            {
                return $this->getDayGan() + $this->getDayZhi();
            }
            public function getDayInGanZhiExact()
            {
                return $this->getDayGanExact() + $this->getDayZhiExact();
            }
            public function getDayInGanZhiExact2()
            {
                return $this->getDayGanExact2() + $this->getDayZhiExact2();
            }
            public function getTimeGan()
            {
                return LunarUtil::$GAN[$this->timeGanIndex + 1];
            }
            public function getTimeZhi()
            {
                return LunarUtil::$ZHI[$this->timeZhiIndex + 1];
            }
            public function getTimeInGanZhi()
            {
                return $this->getTimeGan() + $this->getTimeZhi();
            }
            public function getShengxiao()
            {
                return $this->getYearShengXiao();
            }
            public function getYearShengXiao()
            {
                return LunarUtil::$SHENGXIAO[$this->yearZhiIndex + 1];
            }
            public function getYearShengXiaoByLiChun()
            {
                return LunarUtil::$SHENGXIAO[$this->yearZhiIndexByLiChun + 1];
            }
            public function getYearShengXiaoExact()
            {
                return LunarUtil::$SHENGXIAO[$this->yearZhiIndexExact + 1];
            }
            public function getMonthShengXiao()
            {
                return LunarUtil::$SHENGXIAO[$this->monthZhiIndex + 1];
            }
            public function getMonthShengXiaoExact()
            {
                return LunarUtil::$SHENGXIAO[$this->monthZhiIndexExact + 1];
            }
            public function getDayShengXiao()
            {
                return LunarUtil::$SHENGXIAO[$this->dayZhiIndex + 1];
            }
            public function getTimeShengXiao()
            {
                return LunarUtil::$SHENGXIAO[$this->timeZhiIndex + 1];
            }
            public function getYearInChinese()
            {
                $year = (string)$this->year;
                $s = '';
                $zero = ord('0');
                $numbers = LunarUtil::$NUMBER;
                for ($i = 0, $j = strlen($year); $i < $j; $i++) {
                    $s .= $numbers[ord($year[$i]) - $zero];
                }
                return $s;
            }
            public function getMonthInChinese()
            {
                $month = $this->month;
                return ($month < 0 ? '月' : '') . LunarUtil::$MONTH[abs($month)];
            }
            public function getDayInChinese()
            {
                return LunarUtil::$DAY[$this->day];
            }
            public function getPengZuGan()
            {
                return LunarUtil::$PENGZU_GAN[$this->dayGanIndex + 1];
            }
            public function getPengZuZhi()
            {
                return LunarUtil::$PENGZU_ZHI[$this->dayZhiIndex + 1];
            }
            public function getPositionXi()
            {
                return $this->getDayPositionXi();
            }
            public function getPositionXiDesc()
            {
                return $this->getDayPositionXiDesc();
            }
            public function getPositionYangGui()
            {
                return $this->getDayPositionYangGui();
            }
            public function getPositionYangGuiDesc()
            {
                return $this->getDayPositionYangGuiDesc();
            }
            public function getPositionYinGui()
            {
                return $this->getDayPositionYinGui();
            }
            public function getPositionYinGuiDesc()
            {
                return $this->getDayPositionYinGuiDesc();
            }
            public function getPositionFu()
            {
                return $this->getDayPositionFu();
            }
            public function getPositionFuDesc()
            {
                return $this->getDayPositionFuDesc();
            }
            public function getPositionCai()
            {
                return $this->getDayPositionCai();
            }
            public function getPositionCaiDesc()
            {
                return $this->getDayPositionCaiDesc();
            }
            public function getDayPositionXi()
            {
                return LunarUtil::$POSITION_XI[$this->dayGanIndex + 1];
            }
            public function getDayPositionXiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getDayPositionXi()];
            }
            public function getDayPositionYangGui()
            {
                return LunarUtil::$POSITION_YANG_GUI[$this->dayGanIndex + 1];
            }
            public function getDayPositionYangGuiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getDayPositionYangGui()];
            }
            public function getDayPositionYinGui()
            {
                return LunarUtil::$POSITION_YIN_GUI[$this->dayGanIndex + 1];
            }
            public function getDayPositionYinGuiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getDayPositionYinGui()];
            }
            public function getDayPositionFu($sect=null)
            {
                return ($sect === 1 ? LunarUtil::$POSITION_FU : LunarUtil::$POSITION_FU_2)[$this->dayGanIndex + 1];
            }
            public function getDayPositionFuDesc($sect=0)
            {
                return LunarUtil::$POSITION_DESC[$this->getDayPositionFu($sect)];
            }
            public function getDayPositionCai()
            {
                return LunarUtil::$POSITION_CAI[$this->dayGanIndex + 1];
            }
            public function getDayPositionCaiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getDayPositionCai()];
            }
            public function getTimePositionXi()
            {
                return LunarUtil::$POSITION_XI[$this->timeGanIndex + 1];
            }
            public function getTimePositionXiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getTimePositionXi()];
            }
            public function getTimePositionYangGui()
            {
                return LunarUtil::$POSITION_YANG_GUI[$this->timeGanIndex + 1];
            }
            public function getTimePositionYangGuiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getTimePositionYangGui()];
            }
            public function getTimePositionYinGui()
            {
                return LunarUtil::$POSITION_YIN_GUI[$this->timeGanIndex + 1];
            }
            public function getTimePositionYinGuiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getTimePositionYinGui()];
            }
            public function getTimePositionFu($sect)
            {
                return ($sect === 1 ? LunarUtil::$POSITION_FU : LunarUtil::$POSITION_FU_2)[$this->timeGanIndex + 1];
            }
            public function getTimePositionFuDesc($sect)
            {
                return LunarUtil::$POSITION_DESC[$this->getTimePositionFu($sect)];
            }
            public function getTimePositionCai()
            {
                return LunarUtil::$POSITION_CAI[$this->timeGanIndex + 1];
            }
            public function getTimePositionCaiDesc()
            {
                return LunarUtil::$POSITION_DESC[$this->getTimePositionCai()];
            }
            private function _getDayPositionTaiSui($dayInGanZhi, $yearZhiIndex)
            {
                $p = '';
                switch ($dayInGanZhi) {
                    case 'ç”²å­':
                        case 'ä¹™ä¸‘':
                        case 'ä¸™å¯…':
                        case 'ä¸å¯':
                        case 'æˆŠè¾°':
                        case 'å·²å·³':
                          $p = 'éœ‡';
                          break;
                        case 'ä¸™å­':
                        case 'ä¸ä¸‘':
                        case 'æˆŠå¯…':
                        case 'å·²å¯':
                        case 'åºšè¾°':
                        case 'è¾›å·³':
                          $p = 'ç¦»';
                          break;
                        case 'æˆŠå­':
                        case 'å·²ä¸‘':
                        case 'åºšå¯…':
                        case 'è¾›å¯':
                        case 'å£¬è¾°':
                        case 'ç™¸å·³':
                          $p = 'ä¸­';
                          break;
                        case 'åºšå­':
                        case 'è¾›ä¸‘':
                        case 'å£¬å¯…':
                        case 'ç™¸å¯':
                        case 'ç”²è¾°':
                        case 'ä¹™å·³':
                          $p = 'å…‘';
                          break;
                        case 'å£¬å­':
                        case 'ç™¸ä¸‘':
                        case 'ç”²å¯…':
                        case 'ä¹™å¯':
                        case 'ä¸™è¾°':
                        case 'ä¸å·³':
                          $p = 'åŽ';
                          break; 
                    default:
                        $p = LunarUtil::$POSITION_TAI_SUI_YEAR[$yearZhiIndex];
                }
                return $p;
            }

            public function getDayPositionTaiSui($sect)
            {
                switch ($sect) {
                    case 1:
                        $dayInGanZhi = $this->getDayInGanZhi();
                        $yearZhiIndex = $this->yearZhiIndex;
                        break;
                    case 3:
                        $dayInGanZhi = $this->getDayInGanZhi();
                        $yearZhiIndex = $this->yearZhiIndexExact;
                        break;
                    default:
                        $dayInGanZhi = $this->getDayInGanZhiExact2();
                        $yearZhiIndex = $this->yearZhiIndexByLiChun;
                }
                return $this->_getDayPositionTaiSui($dayInGanZhi, $yearZhiIndex);
            }

            public function getDayPositionTaiSuiDesc($sect)
            {
                return LunarUtil::$POSITION_DESC[$this->getDayPositionTaiSui($sect)];
            }

            private function _getMonthPositionTaiSui($monthZhiIndex, $monthGanIndex)
            {
                $p = '';
                $m = $monthZhiIndex - LunarUtil::$BASE_MONTH_ZHI_INDEX;
                if ($m < 0) {
                    $m += 12;
                }
                switch ($m) {
                    case 0:
                    case 4:
                    case 8:
                        $p = '艮';
                        break;
                    case 2:
                    case 6:
                    case 10:
                        $p = '坤';
                        break;
                    case 3:
                    case 7:
                    case 11:
                        $p = '离';
                        break;
                    default:
                        $p = LunarUtil::$POSITION_GAN[$monthGanIndex];
                }
                return $p;
            }

            public function getMonthPositionTaiSui($sect)
            {
                switch ($sect) {
                    case 3:
                        $monthZhiIndex = $this->monthZhiIndexExact;
                        $monthGanIndex = $this->monthGanIndexExact;
                        break;
                    default:
                        $monthZhiIndex = $this->monthZhiIndex;
                        $monthGanIndex = $this->monthGanIndex;
                }
                return $this->_getMonthPositionTaiSui($monthZhiIndex, $monthGanIndex);
            }

            public function getMonthPositionTaiSuiDesc($sect)
            {
                return LunarUtil::$POSITION_DESC[$this->getMonthPositionTaiSui($sect)];
            }

            public function getYearPositionTaiSui($sect)
            {
                switch ($sect) {
                    case 1:
                        $yearZhiIndex = $this->yearZhiIndex;
                        break;
                    case 3:
                        $yearZhiIndex = $this->yearZhiIndexExact;
                        break;
                    default:
                        $yearZhiIndex = $this->yearZhiIndexByLiChun;
                }
                return LunarUtil::$POSITION_TAI_SUI_YEAR[$yearZhiIndex];
            }

            public function getYearPositionTaiSuiDesc($sect)
            {
                return LunarUtil::$POSITION_DESC[$this->getYearPositionTaiSui($sect)];
            }

            public function getChong()
            {
                return $this->getDayChong();
            }

            public function getChongGan()
            {
                return $this->getDayChongGan();
            }

            public function getChongGanTie()
            {
                return $this->getDayChongGanTie();
            }

            public function getChongShengXiao()
            {
                return $this->getDayChongShengXiao();
            }

            public function getChongDesc()
            {
                return $this->getDayChongDesc();
            }

            public function getSha()
            {
                return $this->getDaySha();
            }

            public function getDayChong()
            {
                return LunarUtil::$CHONG[$this->dayZhiIndex];
            }

            public function getDayChongGan()
            {
                return LunarUtil::$CHONG_GAN[$this->dayGanIndex];
            }

            public function getDayChongGanTie()
            {
                return LunarUtil::$CHONG_GAN_TIE[$this->dayGanIndex];
            }

            public function getDayChongShengXiao()
            {
                $chong = $this->getChong();
                $index = array_search($chong, LunarUtil::$ZHI);
                return $index !== false ? LunarUtil::$SHENGXIAO[$index] : '';
            }

            public function getDayChongDesc()
            {
                return '(' . $this->getDayChongGan() . $this->getDayChong() . ')' . $this->getDayChongShengXiao();
            }

            public function getDaySha()
            {
                return LunarUtil::$SHA[$this->getDayZhi()];
            }

            public function getTimeChong()
            {
                return LunarUtil::$CHONG[$this->timeZhiIndex];
            }

            public function getTimeChongGan()
            {
                return LunarUtil::$CHONG_GAN[$this->timeGanIndex];
            }

            public function getTimeChongGanTie()
            {
                return LunarUtil::$CHONG_GAN_TIE[$this->timeGanIndex];
            }

            public function getTimeChongShengXiao()
            {
                $chong = $this->getTimeChong();
                $index = array_search($chong, LunarUtil::$ZHI);
                return $index !== false ? LunarUtil::$SHENGXIAO[$index] : '';
            }

            public function getTimeChongDesc()
            {
                return '(' . $this->getTimeChongGan() . $this->getTimeChong() . ')' . $this->getTimeChongShengXiao();
            }

            public function getTimeSha()
            {
                return LunarUtil::$SHA[$this->getTimeZhi()];
            }

            public function getYearGzGc()
            {
                return LunarUtil::$GZGC[$this->getYearInGanZhiExact()];
            }

            public function getMonthGzGc()
            {
                return LunarUtil::$GZGC[$this->getMonthInGanZhiExact()];
            }

            public function getDayGzGc()
            {
                return LunarUtil::$GZGC[$this->getDayInGanZhiExact()];
            }

            public function getTimeGzGc()
            {
                return LunarUtil::$GZGC[$this->getTimeInGanZhi()];
            }

            public function getYearNaYin()
            {
                return LunarUtil::$NAYIN[$this->getYearInGanZhi()];
            }

            public function getMonthNaYin()
            {
                return LunarUtil::$NAYIN[$this->getMonthInGanZhi()];
            }

            public function getDayNaYin()
            {
                return LunarUtil::$NAYIN[$this->getDayInGanZhi()];
            }

            public function getTimeNaYin()
            {
                return LunarUtil::$NAYIN[$this->getTimeInGanZhi()];
            }

            public function getSeason()
            {
                return LunarUtil::$SEASON[abs($this->month)];
            }

            private function _convertJieQi($name)
            {
                $conversion = [
                    'DONG_ZHI' => '冬至',
                    'DA_HAN' => '大寒',
                    'XIAO_HAN' => '小寒',
                    'LI_CHUN' => '立春',
                    'DA_XUE' => '大雪',
                    'YU_SHUI' => '雨水',
                    'JING_ZHE' => '惊蛰'
                ];
                return $conversion[$name] ?? $name;
            }

            public function getJie()
            {
                foreach (Lunar::$JIE_QI_IN_USE as $index => $key) {
                    if ($index % 2 == 0) {
                        $d = $this->jieQi[$key];
                        if (
                            $d->getYear() === $this->solar->getYear() &&
                            $d->getMonth() === $this->solar->getMonth() &&
                            $d->getDay() === $this->solar->getDay()
                        ) {
                            return $this->_convertJieQi($key);
                        }
                    }
                }
                return '';
            }

            public function getQi()
            {
                for ($i = 1, $j = count(Lunar::$JIE_QI_IN_USE); $i < $j; $i += 2) {
                    $key = Lunar::$JIE_QI_IN_USE[$i];
                    $d = $this->jieQi[$key];
                    if (
                        $d->getYear() === $this->solar->getYear() &&
                        $d->getMonth() === $this->solar->getMonth() &&
                        $d->getDay() === $this->solar->getDay()
                    ) {
                        return $this->_convertJieQi($key);
                    }
                }
                return '';
            }

            public function getJieQi()
            {
                foreach ($this->jieQi as $key => $d) {
                    if (
                        $d->getYear() === $this->solar->getYear() &&
                        $d->getMonth() === $this->solar->getMonth() &&
                        $d->getDay() === $this->solar->getDay()
                    ) {
                        return $this->_convertJieQi($key);
                    }
                }
                return '';
            }

            public function getWeek()
            {
                return $this->weekIndex;
            }

            public function getWeekInChinese()
            {
                return SolarUtil::$WEEK[$this->getWeek()];
            }

            public function getXiu()
            {
                return LunarUtil::$XIU[$this->getDayZhi() . $this->getWeek()];
            }

            public function getXiuBmxx()
            {
                return LunarUtil::$XIU_BMXX[$this->getMonthInChinese() . $this->getDay()];
            }
            public function getGcny()
            {
                return LunarUtil::$GCNY[$this->getYearGzGc() . $this->getMonthGzGc()];
            }

            public function getGcrs()
            {
                return LunarUtil::$GCRS[$this->getDayGzGc() . $this->getTimeGzGc()];
            }

            public function getXxxw()
            {
                return LunarUtil::$XXXW[$this->getMonthInChinese() . $this->getDay()];
            }

            public function getLgbf()
            {
                return LunarUtil::$LGBF[$this->getDayInGanZhiExact() . $this->getTimeZhi()];
            }

            public function getXiuLuck()
            {
                return LunarUtil::$XIU_LUCK[$this->getXiu()];
            }

            public function getXiuSong()
            {
                return LunarUtil::$XIU_SONG[$this->getXiu()];
            }

            public function getZheng()
            {
                return LunarUtil::$ZHENG[$this->getXiu()];
            }

            public function getAnimal()
            {
                return LunarUtil::$ANIMAL[$this->getXiu()];
            }

            public function getGong()
            {
                return LunarUtil::$GONG[$this->getXiu()];
            }

            public function getShou()
            {
                return LunarUtil::$SHOU[$this->getGong()];
            }

            public function getFestivals()
            {
                $festivals = [];
                $f = LunarUtil::$FESTIVAL[$this->month . '-' . $this->day];
                if ($f) {
                    $festivals[] = $f;
                }
                if (abs($this->month) === 12 && $this->day >= 29 && $this->year !== $this->next(1)->getYear()) {
                    $festivals[] = '除夕';
                }
                return $festivals;
            }

            public function getOtherFestivals()
            {
                $festivals = [];
                $fs = LunarUtil::$OTHER_FESTIVAL[$this->month . '-' . $this->day];
                if ($fs) {
                    $festivals = array_merge($festivals, $fs);
                }
                $solarYmd = $this->solar->toYmd();
                if ($solarYmd === $this->jieQi['清明']->next(-1)->toYmd()) {
                    $festivals[] = '寒食节';
                }
                $jq = $this->jieQi['立春'];
                $offset = 4 - $jq->getLunar()->getDayGanIndex();
                if ($offset < 0) {
                    $offset += 10;
                }
                if ($solarYmd === $jq->next($offset + 40)->toYmd()) {
                    $festivals[] = '春社';
                }
                $jq = $this->jieQi['立秋'];
                $offset = 4 - $jq->getLunar()->getDayGanIndex();
                if ($offset < 0) {
                    $offset += 10;
                }
                if ($solarYmd === $jq->next($offset + 40)->toYmd()) {
                    $festivals[] = '秋社';
                }
                return $festivals;
            }

            public function getBaZi()
            {
                $bz = $this->getEightChar();
                return [
                    $bz->getYear(),
                    $bz->getMonth(),
                    $bz->getDay(),
                    $bz->getTime()
                ];
            }

            public function getBaZiWuXing()
            {
                $bz = $this->getEightChar();
                return [
                    $bz->getYearWuXing(),
                    $bz->getMonthWuXing(),
                    $bz->getDayWuXing(),
                    $bz->getTimeWuXing()
                ];
            }

            public function getBaZiGzGc()
            {
                $bz = $this->getEightChar();
                return [
                    $bz->getYearGzGc(),
                    $bz->getMonthGzGc(),
                    $bz->getDayGzGc(),
                    $bz->getTimeGzGc()
                ];
            }

            public function getBaZiNaYin()
            {
                $bz = $this->getEightChar();
                return [
                    $bz->getYearNaYin(),
                    $bz->getMonthNaYin(),
                    $bz->getDayNaYin(),
                    $bz->getTimeNaYin()
                ];
            }

            public function getBaZiShiShenGan()
            {
                $bz = $this->getEightChar();
                return [
                    $bz->getYearShiShenGan(),
                    $bz->getMonthShiShenGan(),
                    $bz->getDayShiShenGan(),
                    $bz->getTimeShiShenGan()
                ];
            }

            public function getBaZiShiShenZhi()
            {
                $bz = $this->getEightChar();
                return [
                    $bz->getYearShiShenZhi()[0],
                    $bz->getMonthShiShenZhi()[0],
                    $bz->getDayShiShenZhi()[0],
                    $bz->getTimeShiShenZhi()[0]
                ];
            }

            public function getBaZiShiShenYearZhi()
            {
                return $this->getEightChar()->getYearShiShenZhi();
            }

            public function getBaZiShiShenMonthZhi()
            {
                return $this->getEightChar()->getMonthShiShenZhi();
            }

            public function getBaZiShiShenDayZhi()
            {
                return $this->getEightChar()->getDayShiShenZhi();
            }

            public function getBaZiShiShenTimeZhi()
            {
                return $this->getEightChar()->getTimeShiShenZhi();
            }

            public function getZhiXing()
            {
                $offset = $this->dayZhiIndex - $this->monthZhiIndex;
                if ($offset < 0) {
                    $offset += 12;
                }
                return LunarUtil::$ZHI_XING[$offset + 1];
            }

            public function getDayTianShen()
            {
                $monthZhi = $this->getMonthZhi();
                $offset = LunarUtil::$ZHI_TIAN_SHEN_OFFSET[$monthZhi];
                return LunarUtil::$TIAN_SHEN[($this->dayZhiIndex + $offset) % 12 + 1];
            }

            public function getTimeTianShen()
            {
                $dayZhi = $this->getDayZhiExact();
                $offset = LunarUtil::$ZHI_TIAN_SHEN_OFFSET[$dayZhi];
                return LunarUtil::$TIAN_SHEN[($this->timeZhiIndex + $offset) % 12 + 1];
            }

            public function getDayTianShenType()
            {
                return LunarUtil::$TIAN_SHEN_TYPE[$this->getDayTianShen()];
            }

            public function getTimeTianShenType()
            {
                return LunarUtil::$TIAN_SHEN_TYPE[$this->getTimeTianShen()];
            }

            public function getDayTianShenLuck()
            {
                return LunarUtil::$TIAN_SHEN_TYPE_LUCK[$this->getDayTianShenType()];
            }

            public function getTimeTianShenLuck()
            {
                return LunarUtil::$TIAN_SHEN_TYPE_LUCK[$this->getTimeTianShenType()];
            }

            public function getDayPositionTai()
            {
                return LunarUtil::$POSITION_TAI_DAY[LunarUtil::getJiaZiIndex($this->getDayInGanZhi())];
            }

            public function getMonthPositionTai()
            {
                $m = $this->month;
                if ($m < 0) {
                    return '';
                }
                return LunarUtil::$POSITION_TAI_MONTH[$m - 1];
            }

            public function getDayYi($sect)
            {
                return LunarUtil::getDayYi($sect == 2 ? $this->getMonthInGanZhiExact() : $this->getMonthInGanZhi(), $this->getDayInGanZhi());
            }

            public function getDayJi($sect)
            {
                return LunarUtil::getDayJi($sect == 2 ? $this->getMonthInGanZhiExact() : $this->getMonthInGanZhi(), $this->getDayInGanZhi());
            }

            public function getDayJiShen()
            {
                return LunarUtil::getDayJiShen($this->getMonth(), $this->getDayInGanZhi());
            }

            public function getDayXiongSha()
            {
                return LunarUtil::getDayXiongSha($this->getMonth(), $this->getDayInGanZhi());
            }

            public function getTimeYi()
            {
                return LunarUtil::getTimeYi($this->getDayInGanZhiExact(), $this->getTimeInGanZhi());
            }

            public function getTimeJi()
            {
                return LunarUtil::getTimeJi($this->getDayInGanZhiExact(), $this->getTimeInGanZhi());
            }

            public function getYueXiang()
            {
                return LunarUtil::$YUE_XIANG[$this->day];
            }
            public function _getYearNineStar($yearInGanZhi)
            {
                $indexExact = LunarUtil::getJiaZiIndex($yearInGanZhi) + 1;
                $index = LunarUtil::getJiaZiIndex($this->getYearInGanZhi()) + 1;
                $yearOffset = $indexExact - $index;
                if ($yearOffset > 1) {
                    $yearOffset -= 60;
                } elseif ($yearOffset < -1) {
                    $yearOffset += 60;
                }
                $yuan = floor(($this->year + $yearOffset + 2696) / 60) % 3;
                $offset = (62 + $yuan * 3 - $indexExact) % 9;
                if (0 === $offset) {
                    $offset = 9;
                }
                return NineStar::fromIndex($offset - 1);
            }

            public function getYearNineStar($sect)
            {
                switch ($sect) {
                    case 1:
                        $yearInGanZhi = $this->getYearInGanZhi();
                        break;
                    case 3:
                        $yearInGanZhi = $this->getYearInGanZhiExact();
                        break;
                    default:
                        $yearInGanZhi = $this->getYearInGanZhiByLiChun();
                }
                return $this->_getYearNineStar($yearInGanZhi);
            }

            public function _getMonthNineStar($yearZhiIndex, $monthZhiIndex)
            {
                $index = $yearZhiIndex % 3;
                $n = 27 - ($index * 3);
                if ($monthZhiIndex < LunarUtil::$BASE_MONTH_ZHI_INDEX) {
                    $n -= 3;
                }
                $offset = ($n - $monthZhiIndex) % 9;
                return NineStar::fromIndex($offset);
            }

            public function getMonthNineStar($sect)
            {
                switch ($sect) {
                    case 1:
                        $yearZhiIndex = $this->yearZhiIndex;
                        $monthZhiIndex = $this->monthZhiIndex;
                        break;
                    case 3:
                        $yearZhiIndex = $this->yearZhiIndexExact;
                        $monthZhiIndex = $this->monthZhiIndexExact;
                        break;
                    default:
                        $yearZhiIndex = $this->yearZhiIndexByLiChun;
                        $monthZhiIndex = $this->monthZhiIndex;
                }
                return $this->_getMonthNineStar($yearZhiIndex, $monthZhiIndex);
            }

            public function getDayNineStar()
            {
                $solarYmd = $this->solar->toYmd();
                $dongZhi = $this->jieQi['DONG_ZHI'];
                $dongZhi2 = $this->jieQi['DONG_ZHI'];
                $xiaZhi = $this->jieQi['XIA_ZHI'];
                $dongZhiIndex = LunarUtil::getJiaZiIndex($dongZhi->getLunar()->getDayInGanZhi());
                $dongZhiIndex2 = LunarUtil::getJiaZiIndex($dongZhi2->getLunar()->getDayInGanZhi());
                $xiaZhiIndex = LunarUtil::getJiaZiIndex($xiaZhi->getLunar()->getDayInGanZhi());
                if ($dongZhiIndex > 29) {
                    $solarShunBai = $dongZhi->next(60 - $dongZhiIndex);
                } else {
                    $solarShunBai = $dongZhi->next(-$dongZhiIndex);
                }
                $solarShunBaiYmd = $solarShunBai->toYmd();
                if ($dongZhiIndex2 > 29) {
                    $solarShunBai2 = $dongZhi2->next(60 - $dongZhiIndex2);
                } else {
                    $solarShunBai2 = $dongZhi2->next(-$dongZhiIndex2);
                }
                $solarShunBaiYmd2 = $solarShunBai2->toYmd();
                if ($xiaZhiIndex > 29) {
                    $solarNiZi = $xiaZhi->next(60 - $xiaZhiIndex);
                } else {
                    $solarNiZi = $xiaZhi->next(-$xiaZhiIndex);
                }
                $solarNiZiYmd = $solarNiZi->toYmd();
                $offset = 0;
                if ($solarYmd >= $solarShunBaiYmd && $solarYmd < $solarNiZiYmd) {
                    $offset = ExactDate::getDaysBetween($solarShunBai->getCalendar(), $this->getSolar()->getCalendar()) % 9;
                } elseif ($solarYmd >= $solarNiZiYmd && $solarYmd < $solarShunBaiYmd2) {
                    $offset = 8 - (ExactDate::getDaysBetween($solarNiZi->getCalendar(), $this->getSolar()->getCalendar()) % 9);
                } elseif ($solarYmd >= $solarShunBaiYmd2) {
                    $offset = ExactDate::getDaysBetween($solarShunBai2->getCalendar(), $this->getSolar()->getCalendar()) % 9;
                } else {
                    $offset = (8 + ExactDate::getDaysBetween($this->getSolar()->getCalendar(), $solarShunBai->getCalendar())) % 9;
                }
                return NineStar::fromIndex($offset);
            }

            public function getTimeNineStar()
            {
                $solarYmd = $this->solar->toYmd();
                $asc = false;
                if (($solarYmd >= $this->jieQi['DONG_ZHI']->toYmd() && $solarYmd < $this->jieQi['XIA_ZHI']->toYmd()) || $solarYmd >= $this->jieQi['DONG_ZHI']->toYmd()) {
                    $asc = true;
                }
                $start = $asc ? 6 : 2;
                $dayZhi = $this->getDayZhi();
                if (strpos('子和亥光', $dayZhi) !== false) {
                    $start = $asc ? 0 : 8;
                } elseif (strpos('辰戌丑未', $dayZhi) !== false) {
                    $start = $asc ? 3 : 5;
                }
                $index = $asc ? $start + $this->timeZhiIndex : $start + 9 - $this->timeZhiIndex;
                return NineStar::fromIndex($index % 9);
            }

            public function getSolar()
            {
                return $this->solar;
            }

            public function getJieQiTable()
            {
                return $this->jieQi;
            }

            public function getJieQiList()
            {
                return $this->jieQiList;
            }

            public function getNextJie($wholeDay)
            {
                $conditions = [];
                for ($i = 0, $j = count(Lunar::$JIE_QI_IN_USE) / 2; $i < $j; $i++) {
                    $conditions[] = Lunar::$JIE_QI_IN_USE[$i * 2];
                }
                return $this->_getNearJieQi(true, $conditions, $wholeDay);
            }

            public function getPrevJie($wholeDay)
            {
                $conditions = [];
                for ($i = 0, $j = count(Lunar::$JIE_QI_IN_USE) / 2; $i < $j; $i++) {
                    $conditions[] = Lunar::$JIE_QI_IN_USE[$i * 2];
                }
                return $this->_getNearJieQi(false, $conditions, $wholeDay);
            }
            public function getNextQi($wholeDay)
            {
                $conditions = [];
                for ($i = 0, $j = count(Lunar::$JIE_QI_IN_USE) / 2; $i < $j; $i++) {
                    $conditions[] = Lunar::$JIE_QI_IN_USE[$i * 2 + 1];
                }
                return $this->_getNearJieQi(true, $conditions, $wholeDay);
            }

            public function getPrevQi($wholeDay)
            {
                $conditions = [];
                for ($i = 0, $j = count(Lunar::$JIE_QI_IN_USE) / 2; $i < $j; $i++) {
                    $conditions[] = Lunar::$JIE_QI_IN_USE[$i * 2 + 1];
                }
                return $this->_getNearJieQi(false, $conditions, $wholeDay);
            }

            public function getNextJieQi($wholeDay)
            {
                return $this->_getNearJieQi(true, null, $wholeDay);
            }

            public function getPrevJieQi($wholeDay)
            {
                return $this->_getNearJieQi(false, null, $wholeDay);
            }

            public function _buildJieQi($name, $solar)
            {
                $jie = false;
                $qi = false;
                $i=null;
                $j=null;
                for ($i = 0, $j = count(Lunar::$JIE_QI); $i < $j; $i++) {
                    if (Lunar::$JIE_QI[$i] === $name) {
                        if ($i % 2 === 0) {
                            $qi = true;
                        } else {
                            $jie = true;
                        }
                        break;
                    }
                }
                return new class ($name, $solar, $jie, $qi) {
                    private $name, $solar, $jie, $qi;
                    public function __construct($name, $solar, $jie, $qi)
                    {
                        $this->name = $name;
                        $this->solar = $solar;
                        $this->jie = $jie;
                        $this->qi = $qi;
                    }
                    public function getName()
                    {
                        return $this->name;
                    }
                    public function getSolar()
                    {
                        return $this->solar;
                    }
                    public function setName($name)
                    {
                        $this->name = $name;
                    }
                    public function setSolar($solar)
                    {
                        $this->solar = $solar;
                    }
                    public function isJie()
                    {
                        return $this->jie;
                    }
                    public function isQi()
                    {
                        return $this->qi;
                    }
                    public function toString()
                    {
                        return $this->getName();
                    }

                } ;
            }

            public function _getNearJieQi($forward, $conditions, $wholeDay)
            {
                $name = null;
                $near = null;
                $filters = [];
                $filter = false;
                if ($conditions !== null) {
                    foreach ($conditions as $condition) {
                        $filters[$condition] = true;
                        $filter = true;
                    }
                }
                $today = $this->solar->{$wholeDay ? 'toYmd' : 'toYmdHms'}();
                foreach ($this->jieQi as $key => $solar) {
                    $jq = $this->_convertJieQi($key);
                    if ($filter && !isset($filters[$jq])) {
                        continue;
                    }
                    $day = $solar->{$wholeDay ? 'toYmd' : 'toYmdHms'}();
                    if ($forward) {
                        if ($day < $today) {
                            continue;
                        }
                        if ($near === null || $day < $near->{$wholeDay ? 'toYmd' : 'toYmdHms'}()) {
                            $name = $jq;
                            $near = $solar;
                        }
                    } else {
                        if ($day > $today) {
                            continue;
                        }
                        if ($near === null || $day > $near->{$wholeDay ? 'toYmd' : 'toYmdHms'}()) {
                            $name = $jq;
                            $near = $solar;
                        }
                    }
                }
                if ($near === null) {
                    return null;
                }
                return $this->_buildJieQi($name, $near);
            }

            public function getCurrentJieQi()
            {
                foreach ($this->jieQi as $key => $d) {
                    if (
                        $d->getYear() === $this->solar->getYear() &&
                        $d->getMonth() === $this->solar->getMonth() &&
                        $d->getDay() === $this->solar->getDay()
                    ) {
                        return $this->_buildJieQi($this->_convertJieQi($key), $d);
                    }
                }
                return null;
            }

            public function getCurrentJie()
            {
                for ($i = 0, $j = count(Lunar::$JIE_QI_IN_USE); $i < $j; $i += 2) {
                    $key = Lunar::$JIE_QI_IN_USE[$i];
                    $d = $this->jieQi[$key];
                    if (
                        $d->getYear() === $this->solar->getYear() &&
                        $d->getMonth() === $this->solar->getMonth() &&
                        $d->getDay() === $this->solar->getDay()
                    ) {
                        return $this->_buildJieQi($this->_convertJieQi($key), $d);
                    }
                }
                return null;
            }

            public function getCurrentQi()
            {
                for ($i = 1, $j = count(Lunar::$JIE_QI_IN_USE); $i < $j; $i += 2) {
                    $key = Lunar::$JIE_QI_IN_USE[$i];
                    $d = $this->jieQi[$key];
                    if (
                        $d->getYear() === $this->solar->getYear() &&
                        $d->getMonth() === $this->solar->getMonth() &&
                        $d->getDay() === $this->solar->getDay()
                    ) {
                        return $this->_buildJieQi($this->_convertJieQi($key), $d);
                    }
                }
                return null;
            }

            public function getEightChar()
            {
                $EightChar = new EightChar();
                if (!$this->eightChar) {
                    $this->eightChar = $EightChar->fromLunar($this);
                }
                return $this->eightChar;
            }

            public function next($days)
            {
                return $this->solar->next($days)->getLunar();
            }

            public function getYearXun()
            {
                return LunarUtil::getXun($this->getYearInGanZhi());
            }

            public function getMonthXun()
            {
                return LunarUtil::getXun($this->getMonthInGanZhi());
            }

            public function getDayXun()
            {
                return LunarUtil::getXun($this->getDayInGanZhi());
            }

            public function getTimeXun()
            {
                return LunarUtil::getXun($this->getTimeInGanZhi());
            }

            public function getYearXunByLiChun()
            {
                return LunarUtil::getXun($this->getYearInGanZhiByLiChun());
            }

            public function getYearXunExact()
            {
                return LunarUtil::getXun($this->getYearInGanZhiExact());
            }

            public function getMonthXunExact()
            {
                return LunarUtil::getXun($this->getMonthInGanZhiExact());
            }

            public function getDayXunExact()
            {
                return LunarUtil::getXun($this->getDayInGanZhiExact());
            }

            public function getDayXunExact2()
            {
                return LunarUtil::getXun($this->getDayInGanZhiExact2());
            }

            public function getYearXunKong()
            {
                return LunarUtil::getXunKong($this->getYearInGanZhi());
            }

            public function getMonthXunKong()
            {
                return LunarUtil::getXunKong($this->getMonthInGanZhi());
            }

            public function getDayXunKong()
            {
                return LunarUtil::getXunKong($this->getDayInGanZhi());
            }

            public function getTimeXunKong()
            {
                return LunarUtil::getXunKong($this->getTimeInGanZhi());
            }

            public function getYearXunKongByLiChun()
            {
                return LunarUtil::getXunKong($this->getYearInGanZhiByLiChun());
            }

            public function getYearXunKongExact()
            {
                return LunarUtil::getXunKong($this->getYearInGanZhiExact());
            }

            public function getMonthXunKongExact()
            {
                return LunarUtil::getXunKong($this->getMonthInGanZhiExact());
            }

            public function getDayXunKongExact()
            {
                return LunarUtil::getXunKong($this->getDayInGanZhiExact());
            }

            public function getDayXunKongExact2()
            {
                return LunarUtil::getXunKong($this->getDayInGanZhiExact2());
            }

            public function toString()
            {
                return $this->getYearInChinese() . '年' . $this->getMonthInChinese() . '月' . $this->getDayInChinese();
            }
            public function toFullString()
            {
                $s = $this->toString();
                $s .= ' ' . $this->getYearInGanZhi() . '(' . $this->getYearShengXiao() . ')年';
                $s .= ' ' . $this->getMonthInGanZhi() . '(' . $this->getMonthShengXiao() . ')月';
                $s .= ' ' . $this->getDayInGanZhi() . '(' . $this->getDayShengXiao() . ')日';
                $s .= ' ' . $this->getTimeZhi() . '(' . $this->getTimeShengXiao() . ')时';
                $s .= ' 合会[' . $this->getYearGzGc() . ' ' . $this->getMonthGzGc() . ' ' . $this->getDayGzGc() . ' ' . $this->getTimeGzGc() . ']';
                $s .= ' 纳音[' . $this->getYearNaYin() . ' ' . $this->getMonthNaYin() . ' ' . $this->getDayNaYin() . ' ' . $this->getTimeNaYin() . ']';
                $s .= ' 星期' . $this->getWeekInChinese();

                $festivals = $this->getFestivals();
                foreach ($festivals as $festival) {
                    $s .= ' (' . $festival . ')';
                }

                $otherFestivals = $this->getOtherFestivals();
                foreach ($otherFestivals as $otherFestival) {
                    $s .= ' (' . $otherFestival . ')';
                }

                $jq = $this->getJieQi();
                if (count($jq) > 0) {
                    $s .= ' [' . implode(', ', $jq) . ']';
                }

                $s .= ' ' . $this->getGong() . '方' . $this->getShou();
                $s .= ' 宿户[' . $this->getXiu() . $this->getZheng() . $this->getAnimal() . '](' . $this->getXiuLuck() . ')';
                $s .= ' 彭祖百忌[' . $this->getPengZuGan() . ' ' . $this->getPengZuZhi() . ']';
                $s .= ' 冲神方位[' . $this->getDayPositionXi() . '](' . $this->getDayPositionXiDesc() . ')';
                $s .= ' 阳贵神方位[' . $this->getDayPositionYangGui() . '](' . $this->getDayPositionYangGuiDesc() . ')';
                $s .= ' 阴贵神方位[' . $this->getDayPositionYinGui() . '](' . $this->getDayPositionYinGuiDesc() . ')';
                $s .= ' 福神方位[' . $this->getDayPositionFu() . '](' . $this->getDayPositionFuDesc() . ')';
                $s .= ' 财神方位[' . $this->getDayPositionCai() . '](' . $this->getDayPositionCaiDesc() . ')';
                $s .= ' 冲[' . $this->getDayChongDesc() . ']';
                $s .= ' 煞[' . $this->getDaySha() . ']';

                return $s;
            }

            public function _buildNameAndIndex($name, $index)
            {
                return new class ($name, $index) {
                    private $name, $index;
                    public function __construct($name, $index) 
                    {
                        $this->name = $name;
                        $this->index = $index;
                    }
                    public function getName () {
                        return $this->name;
                    }
                      public function setName($name) {
                        $this->name = $name;
                    }
                     public function getIndex () {
                        return $this->index;
                    }
                      public function setIndex($index) {
                        $this->index = $index;
                    }
                      public function toString() {
                        return $this->getName();
                    }
                      public function toFullString() {
                        return $this->getName() . '第' . $this->getIndex() . '天';
                    }
                } ;
            }

            public function getShuJiu()
            {
                $currentCalendar = ExactDate::fromYmd($this->solar->getYear(), $this->solar->getMonth(), $this->solar->getDay());
                $start = $this->jieQi['DONG_ZHI'];
                $startCalendar = ExactDate::fromYmd($start->getYear(), $start->getMonth(), $start->getDay());

                if ($currentCalendar < $startCalendar) {
                    $start = $this->jieQi['SHU_JIU'];
                    $startCalendar = ExactDate::fromYmd($start->getYear(), $start->getMonth(), $start->getDay());
                }

                $endCalendar = ExactDate::fromYmd($start->getYear(), $start->getMonth(), $start->getDay());
                $endCalendar->setDate(date('Y'), date('m'),$endCalendar->format('d') + 81);

                if ($currentCalendar < $startCalendar || $currentCalendar >= $endCalendar) {
                    return null;
                }

                $days = ExactDate::getDaysBetween($startCalendar, $currentCalendar);
                return $this->_buildNameAndIndex(LunarUtil::$NUMBER[floor($days / 9) + 1] . '九', $days % 9 + 1);
            }

            public function getFu()
            {
                $currentCalendar = ExactDate::fromYmd($this->solar->getYear(), $this->solar->getMonth(), $this->solar->getDay());
                $xiaZhi = $this->jieQi['XIA ZHI'];
                $liQiu = $this->jieQi['LI QIU'];
                $startCalendar = ExactDate::fromYmd($xiaZhi->getYear(), $xiaZhi->getMonth(), $xiaZhi->getDay());

                $add = 6 - $xiaZhi->getLunar()->getDayGanIndex();
                if ($add < 0) {
                    $add += 10;
                }

                $add += 20;
                $startCalendar->setDate(date('Y'), date('m'),$startCalendar->format('d') + $add);

                if ($currentCalendar < $startCalendar) {
                    return null;
                }

                $days = ExactDate::getDaysBetween($startCalendar, $currentCalendar);

                if ($days < 10) {
                    return $this->_buildNameAndIndex('初伏', $days + 1);
                }

                $startCalendar->setDate(date('Y'), date('m'),$startCalendar->format('d') + 10);
                $days = ExactDate::getDaysBetween($startCalendar, $currentCalendar);

                if ($days < 10) {
                    return $this->_buildNameAndIndex('中伏', $days + 1);
                }

                $startCalendar->setDate(date('Y'), date('m'),$startCalendar->format('d') + 10);
                $liQiuCalendar = ExactDate::fromYmd($liQiu->getYear(), $liQiu->getMonth(), $liQiu->getDay());
                $days = ExactDate::getDaysBetween($startCalendar, $currentCalendar);

                if ($liQiuCalendar <= $startCalendar) {
                    if ($days < 10) {
                        return $this->_buildNameAndIndex('末伏', $days + 1);
                    }
                } else {
                    if ($days < 10) {
                        return $this->_buildNameAndIndex('中伏', $days + 11);
                    }
                    $startCalendar->setDate(date('Y'), date('m'),$startCalendar->format('d') + 10);
                    $days = ExactDate::getDaysBetween($startCalendar, $currentCalendar);

                    if ($days < 10) {
                        return $this->_buildNameAndIndex('末伏', $days + 1);
                    }
                }

                return null;
            }

            public function getLiuYao()
            {
                return LunarUtil::$LIU_YAO[(abs($this->month) + $this->day - 2) % 6];
            }

            public function getWuHou()
            {
                $jieQi = $this->getPrevJieQi(true);
                $name = $jieQi->getName();
                $offset = 0;

                for ($i = 0, $j = count(Lunar::$JIE_QI); $i < $j; $i++) {
                    if ($name === Lunar::$JIE_QI[$i]) {
                        $offset = $i;
                        break;
                    }
                }

                $currentCalendar = ExactDate::fromYmd($this->solar->getYear(), $this->solar->getMonth(), $this->solar->getDay());
                $startSolar = $jieQi->getSolar();
                $startCalendar = ExactDate::fromYmd($startSolar->getYear(), $startSolar->getMonth(), $startSolar->getDay());
                $days = ExactDate::getDaysBetween($startCalendar, $currentCalendar);
                $index = floor($days / 5);

                if ($index > 2) {
                    $index = 2;
                }

                return LunarUtil::$WU_HOU[($offset * 3 + $index) % count(LunarUtil::$WU_HOU)];
            }
            public function getHou()
            {
                $jieQi = $this->getPrevJieQi(true);
                $name = $jieQi->getName();
                $startSolar = $jieQi->getSolar();
                $days = ExactDate::getDaysBetweenYmd(
                    $startSolar->getYear(),
                    $startSolar->getMonth(),
                    $startSolar->getDay(),
                    $this->solar->getYear(),
                    $this->solar->getMonth(),
                    $this->solar->getDay()
                );
                $max = count(LunarUtil::$HOU) - 1;
                $offset = floor($days / 5);
                if ($offset > $max) {
                    $offset = $max;
                }
                return $name . ' ' . LunarUtil::$HOU[$offset];
            }

            public function getDayLu()
            {
                $gan = LunarUtil::$LU[$this->getDayGan()];
                $zhi = LunarUtil::$LU[$this->getDayZhi()];
                $lu = $gan . '甲亥';
                if ($zhi) {
                    $lu .= ' ' . $zhi . '甲进';
                }
                return $lu;
            }

            public function getTimes()
            {
                $l = [];
                $l[] = LunarTime::fromYmdHms($this->year, $this->month, $this->day, 0, 0, 0);
                for ($i = 0; $i < 12; $i++) {
                    $l[] = LunarTime::fromYmdHms($this->year, $this->month, $this->day, ($i + 1) * 2 - 1, 0, 0);
                }
                return $l;
            }

            public function getFoto()
            {
                return (new Foto())->fromLunar($this);
            }

            public function getTao()
            {
                return Tao::fromLunar($this);
            }
        };
    }
    static $JIE_QI = ['å†¬è‡³', 'å°å¯’', 'å¤§å¯’', 'ç«‹æ˜¥', 'é›¨æ°´', 'æƒŠè›°', 'æ˜¥åˆ†', 'æ¸…æ˜Ž', 'è°·é›¨', 'ç«‹å¤', 'å°æ»¡', 'èŠ’ç§', 'å¤è‡³', 'å°æš‘', 'å¤§æš‘', 'ç«‹ç§‹', 'å¤„æš‘', 'ç™½éœ²', 'ç§‹åˆ†', 'å¯’éœ²', 'éœœé™', 'ç«‹å†¬', 'å°é›ª', 'å¤§é›ª'];
    static $JIE_QI_IN_USE = ['DA_XUE', 'å†¬è‡³', 'å°å¯’', 'å¤§å¯’', 'ç«‹æ˜¥', 'é›¨æ°´', 'æƒŠè›°', 'æ˜¥åˆ†', 'æ¸…æ˜Ž', 'è°·é›¨', 'ç«‹å¤', 'å°æ»¡', 'èŠ’ç§', 'å¤è‡³', 'å°æš‘', 'å¤§æš‘', 'ç«‹ç§‹', 'å¤„æš‘', 'ç™½éœ²', 'ç§‹åˆ†', 'å¯’éœ²', 'éœœé™', 'ç«‹å†¬', 'å°é›ª', 'å¤§é›ª', 'DONG_ZHI', 'XIAO_HAN', 'DA_HAN', 'LI_CHUN', 'YU_SHUI', 'JING_ZHE'];

    public function fromYmdHms($y, $m, $d, $hour, $minute, $second)
    {
        return $this->_fromYmdHms($y, $m, $d, $hour, $minute, $second);
    }

    public  function fromYmd($y, $m, $d)
    {
        return $this->_fromYmdHms($y, $m, $d, 0, 0, 0);
    }

    public  function fromDate($date)
    {
        return $this->_fromDate($date);
    }
}
class EightChar
{
    static $CHANG_SHENG_OFFSET = ['ç”²' => 1, 'ä¸™' => 10, 'æˆŠ' => 10, 'åºš' => 7, 'å£¬' => 4, 'ä¹™' => 6, 'ä¸' => 9, 'å·±' => 9, 'è¾›' => 0, 'ç™¸' => 3];
    public static function _fromLunar($lunar)
    {

        return new class($lunar) {
            private $_p;
            public function __construct($lunar)
            {
                $this->_p = (object) [
                    'sect'=>2,
                    'lunar'=>$lunar
                ];
            }
            public function setSect($sect) {
                $this->_p['sect'] = ($sect == 1) ? 1 : 2;
            }
            
            public function getSect() {
                return $this->_p['sect'];
            }
            
            public function getDayGanIndex() {
                return ($this->_p['sect'] == 2) ? $this->_p['lunar']->getDayGanIndexExact2() : $this->_p['lunar']->getDayGanIndexExact();
            }
            
            public function getDayZhiIndex() {
                return ($this->_p['sect'] == 2) ? $this->_p['lunar']->getDayZhiIndexExact2() : $this->_p['lunar']->getDayZhiIndexExact();
            }
            
            public function getYear() {
                return $this->_p['lunar']->getYearInGanZhiExact();
            }
            
            public function getYearGan() {
                return $this->_p['lunar']->getYearGanExact();
            }
            
            public function getYearZhi() {
                return $this->_p['lunar']->getYearZhiExact();
            }
            
            public function getYearHideGan() {
                return LunarUtil::$ZHI_HIDE_GAN[$this->getYearZhi()];
            }
            
            public function getYearHideGans() {
                return LunarUtil::$ZHI_HIDE_GANS[$this->getYearZhi()];
            }
            
            public function getYearWuXing() {
                return LunarUtil::$WU_XING_GAN[$this->getYearGan()] . LunarUtil::$WU_XING_ZHI[$this->getYearZhi()];
            }
            
            public function getYearGzGc() {
                return LunarUtil::$GZGC[$this->getYear()];
            }
            
            public function getYearNaYin() {
                return LunarUtil::$NAYIN[$this->getYear()];
            }
            
            public function getYearShiShenGan() {
                return LunarUtil::$SHI_SHEN_GAN[$this->getDayGan() . $this->getYearGan()];
            }
            
            public function getYearShiShenZhi() {
                $dayGan = $this->getDayGan();
                $zhi = $this->getYearZhi();
                $hideGan = LunarUtil::$ZHI_HIDE_GAN[$zhi];
                $result = [];
                foreach ($hideGan as $item) {
                    $result[] = LunarUtil::$SHI_SHEN_ZHI[$dayGan . $zhi . $item];
                }
                return $result;
            }
            
            private function _getDiShi($zhiIndex) {
                $offset = EightChar::$CHANG_SHENG_OFFSET[$this->getDayGan()];
                $index = $offset + (($this->getDayGanIndex() % 2 == 0) ? $zhiIndex : -$zhiIndex);
                if ($index >= 12) {
                    $index -= 12;
                }
                if ($index < 0) {
                    $index += 12;
                }
                return EightChar::$CHANG_SHENG[$index];
            }
            
            public function getYearDiShi() {
                return $this->_getDiShi($this->_p['lunar']->getYearZhiIndexExact());
            }
            
            public function getYearXun() {
                return $this->_p['lunar']->getYearXunExact();
            }
            
            public function getYearXunKong() {
                return $this->_p['lunar']->getYearXunKongExact();
            }
            
            public function getMonth() {
                return $this->_p['lunar']->getMonthInGanZhiExact();
            }
            
            public function getMonthGan() {
                return $this->_p['lunar']->getMonthGanExact();
            }
            
            public function getMonthZhi() {
                return $this->_p['lunar']->getMonthZhiExact();
            }
            
            public function getMonthHideGan() {
                return LunarUtil::$ZHI_HIDE_GAN[$this->getMonthZhi()];
            }
            
            public function getMonthHideGans() {
                return LunarUtil::$ZHI_HIDE_GANS[$this->getMonthZhi()];
            }
            
            public function getMonthWuXing() {
                return LunarUtil::$WU_XING_GAN[$this->getMonthGan()] . LunarUtil::$WU_XING_ZHI[$this->getMonthZhi()];
            }
            
            public function getMonthGzGc() {
                return LunarUtil::$GZGC[$this->getMonth()];
            }
            
            public function getMonthNaYin() {
                return LunarUtil::$NAYIN[$this->getMonth()];
            }
            
            public function getMonthShiShenGan() {
                return LunarUtil::$SHI_SHEN_GAN[$this->getDayGan() . $this->getMonthGan()];
            }
            
            public function getMonthShiShenZhi() {
                $dayGan = $this->getDayGan();
                $zhi = $this->getMonthZhi();
                $hideGan = LunarUtil::$ZHI_HIDE_GAN[$zhi];
                $result = [];
                foreach ($hideGan as $item) {
                    $result[] = LunarUtil::$SHI_SHEN_ZHI[$dayGan . $zhi . $item];
                }
                return $result;
            }
            
            public function getMonthDiShi() {
                return $this->_getDiShi($this->_p['lunar']->getMonthZhiIndexExact());
            }
            
            public function getMonthXun() {
                return $this->_p['lunar']->getMonthXunExact();
            }
            
            public function getMonthXunKong() {
                return $this->_p['lunar']->getMonthXunKongExact();
            }
            
            public function getDay() {
                return ($this->_p['sect'] == 2) ? $this->_p['lunar']->getDayInGanZhiExact2() : $this->_p['lunar']->getDayInGanZhiExact();
            }
            
            public function getDayGan() {
                return ($this->_p['sect'] == 2) ? $this->_p['lunar']->getDayGanExact2() : $this->_p['lunar']->getDayGanExact();
            }
            
            public function getDayZhi() {
                return ($this->_p['sect'] == 2) ? $this->_p['lunar']->getDayZhiExact2() : $this->_p['lunar']->getDayZhiExact();
            }
            
            public function getDayHideGan() {
                return LunarUtil::$ZHI_HIDE_GAN[$this->getDayZhi()];
            }
            
            public function getDayHideGans() {
                return LunarUtil::$ZHI_HIDE_GANS[$this->getDayZhi()];
            }
            
            public function getDayWuXing() {
                return LunarUtil::$WU_XING_GAN[$this->getDayGan()] . LunarUtil::$WU_XING_ZHI[$this->getDayZhi()];
            }
            
            public function getDayGzGc() {
                return LunarUtil::$GZGC[$this->getDay()];
            }
            
            public function getDayNaYin() {
                return LunarUtil::$NAYIN[$this->getDay()];
            }
            
            public function getDayShiShenGan() {
                return '日主';
            }
            
            public function getDayShiShenZhi() {
                $dayGan = $this->getDayGan();
                $zhi = $this->getDayZhi();
                $hideGan = LunarUtil::$ZHI_HIDE_GAN[$zhi];
                $result = [];
                foreach ($hideGan as $item) {
                    $result[] = LunarUtil::$SHI_SHEN_ZHI[$dayGan . $zhi . $item];
                }
                return $result;
            }
            
            public function getDayDiShi() {
                return $this->_getDiShi($this->getDayZhiIndex());
            }
            
            public function getDayXun() {
                return ($this->_p['sect'] == 2) ? $this->_p['lunar']->getDayXunExact2() : $this->_p['lunar']->getDayXunExact();
            }
            
            public function getDayXunKong() {
                return ($this->_p['sect'] == 2) ? $this->_p['lunar']->getDayXunKongExact2() : $this->_p['lunar']->getDayXunKongExact();
            }
            
            public function getTime() {
                return $this->_p['lunar']->getTimeInGanZhi();
            }
            
            public function getTimeGan() {
                return $this->_p['lunar']->getTimeGan();
            }
            
            public function getTimeZhi() {
                return $this->_p['lunar']->getTimeZhi();
            }
            
            public function getTimeHideGan() {
                return LunarUtil::$ZHI_HIDE_GAN[$this->getTimeZhi()];
            }
            
            public function getTimeHideGans() {
                return LunarUtil::$ZHI_HIDE_GANS[$this->getTimeZhi()];
            }
            
            public function getTimeWuXing() {
                return LunarUtil::$WU_XING_GAN[$this->getTimeGan()] . LunarUtil::$WU_XING_ZHI[$this->getTimeZhi()];
            }
            
            public function getTimeGzGc() {
                return LunarUtil::$GZGC[$this->getTime()];
            }
            
            public function getTimeNaYin() {
                return LunarUtil::$NAYIN[$this->getTime()];
            }
            
            public function getTimeShiShenGan() {
                return LunarUtil::$SHI_SHEN_GAN[$this->getDayGan() . $this->getTimeGan()];
            }
            
            public function getTimeShiShenZhi() {
                $dayGan = $this->getDayGan();
                $zhi = $this->getTimeZhi();
                $hideGan = LunarUtil::$ZHI_HIDE_GAN[$zhi];
                $result = [];
                foreach ($hideGan as $item) {
                    $result[] = LunarUtil::$SHI_SHEN_ZHI[$dayGan . $zhi . $item];
                }
                return $result;
            }
            
            public function getTimeDiShi() {
                return $this->_getDiShi($this->_p['lunar']->getTimeZhiIndex());
            }
            
            public function getTimeXun() {
                return $this->_p['lunar']->getTimeXun();
            }
            
            public function getTimeXunKong() {
                return $this->_p['lunar']->getTimeXunKong();
            }
            
            public function getTaiYuan() {
                $ganIndex = $this->_p['lunar']->getMonthGanIndexExact() + 1;
                if ($ganIndex >= 10) {
                    $ganIndex -= 10;
                }
                $zhiIndex = $this->_p['lunar']->getMonthZhiIndexExact() + 3;
                if ($zhiIndex >= 12) {
                    $zhiIndex -= 12;
                }
                return LunarUtil::$GAN[$ganIndex + 1] . LunarUtil::$ZHI[$zhiIndex + 1];
            }
            
            public function getTaiYuanNaYin() {
                return LunarUtil::$NAYIN[$this->getTaiYuan()];
            }
            
            public function getTaiXi() {
                $lunar = $this->_p['lunar'];
                $ganIndex = ($this->_p['sect'] === 2) ? $lunar->getDayGanIndexExact2() : $lunar->getDayGanIndexExact();
                $zhiIndex = ($this->_p['sect'] === 2) ? $lunar->getDayZhiIndexExact2() : $lunar->getDayZhiIndexExact();
                return LunarUtil::$HE_GAN_5[$ganIndex] . LunarUtil::$HE_ZHI_6[$zhiIndex];
            }
            
            public function getTaiXiNaYin() {
                return LunarUtil::$NAYIN[$this->getTaiXi()];
            }
            
            public function getMingGong() {
                $monthZhiIndex = 0;
                $timeZhiIndex = 0;
                foreach (EightChar::$MONTH_ZHI as $i => $zhi) {
                    if ($this->_p['lunar']->getMonthZhiExact() === $zhi) {
                        $monthZhiIndex = $i;
                    }
                    if ($this->_p['lunar']->getTimeZhi() === $zhi) {
                        $timeZhiIndex = $i;
                    }
                }
                $zhiIndex = 26 - ($monthZhiIndex + $timeZhiIndex);
                if ($zhiIndex > 12) {
                    $zhiIndex -= 12;
                }
                $jiaZiIndex = LunarUtil::getJiaZiIndex($this->_p['lunar']->getMonthInGanZhiExact()) - ($monthZhiIndex - $zhiIndex);
                if ($jiaZiIndex >= 60) {
                    $jiaZiIndex -= 60;
                }
                if ($jiaZiIndex < 0) {
                    $jiaZiIndex += 60;
                }
                return LunarUtil::$JIA_ZI[$jiaZiIndex];
            }
            public function getMingGongNaYin() {
                return LunarUtil::$NAYIN[$this->getMingGong()];
            }
            
            public function getShenGong() {
                $lunar = $this->getLunar();
                $monthZhiIndex = 0;
                $timeZhiIndex = 0;
            
                foreach (EightChar::$MONTH_ZHI as $i => $zhi) {
                    if ($lunar->getMonthZhiExact() === $zhi) {
                        $monthZhiIndex = $i;
                    }
                    if ($lunar->getTimeZhi() === $zhi) {
                        $timeZhiIndex = $i;
                    }
                }
            
                $zhiIndex = 2 + $monthZhiIndex + $timeZhiIndex;
                if ($zhiIndex > 12) {
                    $zhiIndex -= 12;
                }
            
                $jiaZiIndex = LunarUtil::getJiaZiIndex($lunar->getMonthInGanZhiExact()) - ($monthZhiIndex - $zhiIndex);
                if ($jiaZiIndex >= 60) {
                    $jiaZiIndex -= 60;
                }
                if ($jiaZiIndex < 0) {
                    $jiaZiIndex += 60;
                }
            
                return LunarUtil::$JIA_ZI[$jiaZiIndex];
            }
            
            public function getShenGongNaYin() {
                return LunarUtil::$NAYIN[$this->getShenGong()];
            }
            
            public function getLunar() {
                return $this->_p['lunar'];
            } 
            public function getYun($gender, $sect) {
                $sect = ($sect == 2) ? $sect : 1;
                $lunar = $this->getLunar();
                $yang = $lunar->getYearGanIndexExact() % 2 === 0;
                $man = $gender === 1;
                $forward = ($yang && $man) || (!$yang && !$man);
            
                $start = function() use ($lunar, $forward, $sect) {
                    $prev = $lunar->getPrevJie();
                    $next = $lunar->getNextJie();
                    $current = $lunar->getSolar();
                    $start = $forward ? $current : $prev->getSolar();
                    $end = $forward ? $next->getSolar() : $current;
            
                    $year = $month = $day = $hour = 0;
            
                    if ($sect === 2) {
                        $minutes = floor(($end->getCalendar() - $start->getCalendar()) / 60000);
                        $year = floor($minutes / 4320);
                        $minutes -= $year * 4320;
                        $month = floor($minutes / 360);
                        $minutes -= $month * 360;
                        $day = floor($minutes / 12);
                        $minutes -= $day * 12;
                        $hour = $minutes * 2;
                    } else {
                        $endTimeZhiIndex = ($end->getHour() === 23) ? 11 : LunarUtil::getTimeZhiIndex(substr($end->toYmdHms(), 11, 5));
                        $startTimeZhiIndex = ($start->getHour() === 23) ? 11 : LunarUtil::getTimeZhiIndex(substr($start->toYmdHms(), 11, 5));
                        
                        $hourDiff = $endTimeZhiIndex - $startTimeZhiIndex;
                        $dayDiff = ExactDate::getDaysBetweenYmd($start->getYear(), $start->getMonth(), $start->getDay(), $end->getYear(), $end->getMonth(), $end->getDay());
                        if ($hourDiff < 0) {
                            $hourDiff += 12;
                            $dayDiff--;
                        }
                        $monthDiff = floor($hourDiff * 10 / 30);
                        $month = $dayDiff * 4 + $monthDiff;
                        $day = $hourDiff * 10 - $monthDiff * 30;
                        $year = floor($month / 12);
                        $month -= $year * 12;
                    }
            
                    return (object) ['year' => $year, 'month' => $month, 'day' => $day, 'hour' => $hour];
                };
            
                $buildLiuYue = function($liuNian, $index) {
                    return new class($liuNian, $index) {
                        private $_p;
                        public function __construct($liuNian, $index) {
                            $this->_p = (object) ['index' => $index, 'liuNian' => $liuNian];
                        }
                        public function getIndex() {
                            return $this->_p->index;
                        }
                        public function getMonthInChinese() {
                            return LunarUtil::$MONTH[$this->_p->index + 1];
                        }
                        public function getGanZhi() {
                            $offset = 0;
                            $yearGan = substr($this->_p->liuNian->getGanZhi(), 0, 1);
                            if ($yearGan === '乙' || $yearGan === '壬') {
                                $offset = 2;
                            } elseif ($yearGan === '丙' || $yearGan === '庚') {
                                $offset = 4;
                            } elseif ($yearGan === '戊' || $yearGan === '己') {
                                $offset = 6;
                            } elseif ($yearGan === '庚' || $yearGan === '辛') {
                                $offset = 8;
                            }
                            $gan = LunarUtil::$GAN[($this->_p->index + $offset) % 10 + 1];
                            $zhi = LunarUtil::$ZHI[($this->_p->index + LunarUtil::$BASE_MONTH_ZHI_INDEX) % 12 + 1];
                            return $gan . $zhi;
                        }
                        public function getXun() {
                            return LunarUtil::getXun($this->getGanZhi());
                        }
                        public function getXunKong() {
                            return LunarUtil::getXunKong($this->getGanZhi());
                        }
                    };
                };
            
                $buildLiuNian = function($daYun, $index) {
                    return new class($daYun, $index) {
                        private $_p; 
                        public function __construct($daYun, $index) {
                            $this->_p = (object) [
                                'year' => $daYun->getStartYear() + $index,
                                'age' => $daYun->getStartAge() + $index,
                                'index' => $index,
                                'daYun' => $daYun,
                                'lunar' => $daYun->getLunar()
                            ];
                        }
                        public function getYear() {
                            return $this->_p->year;
                        }
                        public function getAge() {
                            return $this->_p->age;
                        }
                        public function getIndex() {
                            return $this->_p->index;
                        }
                        public function getLunar() {
                            return $this->_p->lunar;
                        }
                        public function getGanZhi() {
                            $offset = LunarUtil::getJiaZiIndex($this->_p->lunar->getJieQiTable()['立春']->getLunar()->getYearInGanZhiExact()) + $this->_p->index;
                            if ($this->_p->daYun->getIndex() > 0) {
                                $offset += $this->_p->daYun->getStartAge() - 1;
                            }
                            $offset %= count(LunarUtil::$JIA_ZI);
                            return LunarUtil::$JIA_ZI[$offset];
                        }
                        public function getXun() {
                            return LunarUtil::getXun($this->getGanZhi());
                        }
                        public function getXunKong() {
                            return LunarUtil::getXunKong($this->getGanZhi());
                        }
                        public function getLiuYue() {
                            global $buildLiuYue;
                            $l = [];
                            for ($i = 0; $i < 12; $i++) {
                                $l[] = $buildLiuYue($this, $i);
                            }
                            return $l;
                        }
                    };
                };
            
                $buildXiaoYun = function($daYun, $index, $forward) {
                    return new class($daYun, $index, $forward) {
                        private $_p;
                        public function __construct($daYun, $index, $forward) {
                            $this->_p = (object) [
                                'year' => $daYun->getStartYear() + $index,
                                'age' => $daYun->getStartAge() + $index,
                                'index' => $index,
                                'daYun' => $daYun,
                                'forward' => $forward,
                                'lunar' => $daYun->getLunar()
                            ];
                        }
                        public function getYear() {
                            return $this->_p->year;
                        }
                        public function getAge() {
                            return $this->_p->age;
                        }
                        public function getIndex() {
                            return $this->_p->index;
                        }
                        public function getGanZhi() {
                            $offset = LunarUtil::getJiaZiIndex($this->_p->lunar->getTimeInGanZhi());
                            $add = $this->_p->index + 1;
                            if ($this->_p->daYun->getIndex() > 0) {
                                $add += $this->_p->daYun->getStartAge() - 1;
                            }
                            $offset += $this->_p->forward ? $add : -$add;
                            $size = count(LunarUtil::$JIA_ZI);
                            while ($offset < 0) {
                                $offset += $size;
                            }
                            $offset %= $size;
                            return LunarUtil::$JIA_ZI[$offset];
                        }
                        public function getXun() {
                            return LunarUtil::getXun($this->getGanZhi());
                        }
                        public function getXunKong() {
                            return LunarUtil::getXunKong($this->getGanZhi());
                        }
                    };
                };
            
                $buildDaYun = function($yun, $index) {
                    $birthYear = $yun->getLunar()->getSolar()->getYear();
                    $year = $yun->getStartSolar()->getYear();
                    $startYear = $startAge = $endYear = $endAge = 0;
            
                    if ($index < 1) {
                        $startYear = $birthYear;
                        $startAge = 1;
                        $endYear = $year - 1;
                        $endAge = $year - $birthYear;
                    } else {
                        $add = ($index - 1) * 10;
                        $startYear = $year + $add;
                        $startAge = $startYear - $birthYear + 1;
                        $endYear = $startYear + 9;
                        $endAge = $startAge + 9;
                    }
            
                    return new class($yun, $index, $startYear, $endYear, $startAge, $endAge) {
                        private $_p;
                        public function __construct($yun, $index, $startYear, $endYear, $startAge, $endAge) {
                            $this->_p = (object) [
                                'startYear' => $startYear,
                                'endYear' => $endYear,
                                'startAge' => $startAge,
                                'endAge' => $endAge,
                                'index' => $index,
                                'yun' => $yun,
                                'lunar' => $yun->getLunar()
                            ];
                        }
                        public function getStartYear() {
                            return $this->_p->startYear;
                        }
                        public function getEndYear() {
                            return $this->_p->endYear;
                        }
                        public function getStartAge() {
                            return $this->_p->startAge;
                        }
                        public function getEndAge() {
                            return $this->_p->endAge;
                        }
                        public function getIndex() {
                            return $this->_p->index;
                        }
                        public function getLunar() {
                            return $this->_p->lunar;
                        }
                        public function getGanZhi() {
                            if ($this->_p->index < 1) {
                                return '';
                            }
                            $offset = LunarUtil::getJiaZiIndex($this->_p->lunar->getMonthInGanZhiExact());
                            $offset += $this->_p->yun->isForward() ? $this->_p->index : -$this->_p->index;
                            $size = count(LunarUtil::$JIA_ZI);
                            if ($offset >= $size) {
                                $offset -= $size;
                            }
                            if ($offset < 0) {
                                $offset += $size;
                            }
                            return LunarUtil::$JIA_ZI[$offset];
                        }
                        public function getXun() {
                            return LunarUtil::getXun($this->getGanZhi());
                        }
                        public function getXunKong() {
                            return LunarUtil::getXunKong($this->getGanZhi());
                        }
                        public function getLiuNian($n = 10) {
                            global $buildLiuNian;
                            if ($this->_p->index < 1) {
                                $n = $this->_p->endYear - $this->_p->startYear + 1;
                            }
                            $l = [];
                            for ($i = 0; $i < $n; $i++) {
                                $l[] = $buildLiuNian($this, $i);
                            }
                            return $l;
                        }
                        public function getXiaoYun($n = 10) {
                            global $buildXiaoYun;
                            if ($this->_p->index < 1) {
                                $n = $this->_p->endYear - $this->_p->startYear + 1;
                            }
                            $l = [];
                            for ($i = 0; $i < $n; $i++) {
                                $l[] = $buildXiaoYun($this, $i, $this->_p->yun->isForward());
                            }
                            return $l;
                        }
                    };
                };
            
                return new class($gender, $start, $forward, $lunar) {
                    private $_p;
                    public function __construct($gender, $start, $forward, $lunar) {
                        $this->_p = (object) [
                            'gender' => $gender,
                            'startYear' => $start->year,
                            'startMonth' => $start->month,
                            'startDay' => $start->day,
                            'startHour' => $start->hour,
                            'forward' => $forward,
                            'lunar' => $lunar
                        ];
                    }
                    public function getGender() {
                        return $this->_p->gender;
                    }
                    public function getStartYear() {
                        return $this->_p->startYear;
                    }
                    public function getStartMonth() {
                        return $this->_p->startMonth;
                    }
                    public function getStartDay() {
                        return $this->_p->startDay;
                    }
                    public function getStartHour() {
                        return $this->_p->startHour;
                    }
                    public function isForward() {
                        return $this->_p->forward;
                    }
                    public function getLunar() {
                        return $this->_p->lunar;
                    }
                    public function getStartSolar() {
                        $birth = $this->_p->lunar->getSolar();
                        $c = ExactDate::fromYmdHms($birth->getYear(), $birth->getMonth(), $birth->getDay(), $birth->getHour(), $birth->getMinute(), $birth->getSecond());
                        $c->setDate($birth->getYear() + $this->_p->startYear,date('m'), date('d'));
                        $c->setDate(date('Y'),$birth->getMonth() - 1 + $this->_p->startMonth,date('d'));
                        $c->setDate(date('Y'),date('m'),$birth->getDay() + $this->_p->startDay);
                        $c->setTime($birth->getHour() + $this->_p->startHour, date('i'), date('s'));
                        return Solar::fromDate($c);
                    }
                    public function getDaYun($n = 10) {
                        global $buildDaYun;
                        $l = [];
                        for ($i = 0; $i < $n; $i++) {
                            $l[] = $buildDaYun($this, $i);
                        }
                        return $l;
                    }
                };
            }
            
            public function __toString() {
                return $this->getYear() . ' ' . $this->getMonth() . ' ' . $this->getDay() . ' ' . $this->getTime();
            }
            
        };
        
    }
    static $MONTH_ZHI=['','å¯…','å¯','è¾°','å·³','åˆ','æœª','ç”³','é…‰','æˆŒ','äº¥','å­','ä¸‘'];
    static $CHANG_SHENG=['é•¿ç”Ÿ','æ²æµ´','å† å¸¦','ä¸´å®˜','å¸æ—º','è¡°','ç—…','æ­»','å¢“','ç»','èƒŽ','å…»'];
    public function fromLunar($lunar){return $this->_fromLunar($lunar);}
}
class Foto { 
    static $DEAD_YEAR = -543; 
    private   function _fromYmdHms($y, $m, $d, $hour, $minute, $second) {
       
        return self::_fromLunar((new Lunar())->fromYmdHms($y + self::$DEAD_YEAR - 1, $m, $d, $hour, $minute, $second));
    }

    private static function _fromLunar($lunar) {
        return new class($lunar) {
            private $_p;

            public function __construct($lunar) {
                $this->_p = ['lunar' => $lunar];
            }

            public function getLunar() {
                return $this->_p['lunar'];
            }

            public function getYear() {
                $sy = $this->_p['lunar']->getSolar()->getYear();
                $y = $sy - Foto::$DEAD_YEAR;
                if ($sy === $this->_p['lunar']->getYear()) {
                    $y++;
                }
                return $y;
            }

            public function getMonth() {
                return $this->_p['lunar']->getMonth();
            }

            public function getDay() {
                return $this->_p['lunar']->getDay();
            }

            public function getYearInChinese() {
                $y = $this->getYear() . '';
                $s = '';
                $zero = ord('0');
                for ($i = 0, $j = strlen($y); $i < $j; $i++) {
                    $s .= LunarUtil::$NUMBER[ord($y[$i]) - $zero];
                }
                return $s;
            }

            public function getMonthInChinese() {
                return $this->_p['lunar']->getMonthInChinese();
            }

            public function getDayInChinese() {
                return $this->_p['lunar']->getDayInChinese();
            }

            public function getFestivals() {
                $l = FotoUtil()[$this->getMonth() . '-' . $this->getDay()] ?? [];
                return $l;
            }

            public function isMonthZhai() {
                $m = $this->getMonth();
                return $m === 1 || $m === 5 || $m === 9;
            }

            public function isDayYangGong() {
                $l = $this->getFestivals();
                foreach ($l as $festival) {
                    if ($festival->getName() === 'æ¨å…¬å¿Œ') {
                        return true;
                    }
                }
                return false;
            }

            public function isDayZhaiShuoWang() {
                $d = $this->getDay();
                return $d === 1 || $d === 15;
            }

            public function isDayZhaiSix() {
                $d = $this->getDay();
                if (in_array($d, [8, 14, 15, 23, 29, 30])) {
                    return true;
                } elseif ($d === 28) {
                    $m = (new LunarMonth())->fromYm($this->_p['lunar']->getYear(), $this->getMonth());
                    if ($m->getDayCount() !== 30) {
                        return true;
                    }
                }
                return false;
            }

            public function isDayZhaiTen() {
                $d = $this->getDay();
                return in_array($d, [1, 8, 14, 15, 18, 23, 24, 28, 29, 30]);
            }

            public function isDayZhaiGuanYin() {
                $k = $this->getMonth() . '-' . $this->getDay();
                return in_array($k, FotoUtil()['DAY_ZHAI_GUAN_YIN']);
            }

            public function getXiu() {
                return FotoUtil()['getXiu']($this->getMonth(), $this->getDay());
            }

            public function getXiuLuck() {
                return LunarUtil::$XIU_LUCK[$this->getXiu()];
            }

            public function getXiuSong() {
                return LunarUtil::$XIU_SONG[$this->getXiu()];
            }

            public function getZheng() {
                return LunarUtil::$ZHENG[$this->getXiu()];
            }

            public function getAnimal() {
                return LunarUtil::$ANIMAL[$this->getXiu()];
            }

            public function getGong() {
                return LunarUtil::$GONG[$this->getXiu()];
            }

            public function getShou() {
                return LunarUtil::$SHOU[$this->getGong()];
            }

            public function toString() {
                return $this->getYearInChinese() . 'å¹´' . $this->getMonthInChinese() . 'æœˆ' . $this->getDayInChinese();
            }

            public function toFullString() {
                $s = $this->toString();
                $fs = $this->getFestivals();
                foreach ($fs as $festival) {
                    $s .= ' (' . $festival . ')';
                }
                return $s;
            }
        };
    }

    public   function fromYmdHms($y, $m, $d, $hour, $minute, $second) {
        return $this->_fromYmdHms($y, $m, $d, $hour, $minute, $second);
    }

    public   function fromYmd($y, $m, $d) {
        return $this->_fromYmdHms($y, $m, $d, 0, 0, 0);
    }

    public   function fromLunar($lunar) {
        return $this->_fromLunar($lunar);
    }
}
function FotoUtil()
{
    global $XIU_27,$XIU_OFFSET,$XIU_27,$DAY_ZHAI_GUAN_YIN;
     $XIU_OFFSET = [11, 13, 15, 17, 19, 21, 24, 0, 2, 4, 7, 9];
     $XIU_27=['è§’','äº¢','æ°','æˆ¿','å¿ƒ','å°¾','ç®•','æ–—','å¥³','è™š','å±','å®¤','å£','å¥Ž','å¨„','èƒƒ','æ˜´','æ¯•','è§œ','å‚','äº•','é¬¼','æŸ³','æ˜Ÿ','å¼ ','ç¿¼','è½¸'];
     $DAY_ZHAI_GUAN_YIN=['1-8','2-7','2-9','2-19','3-3','3-6','3-13','4-22','5-3','5-17','6-16','6-18','6-19','6-23','7-13','8-16','9-19','9-23','10-2','11-19','11-24','12-25'];
    function _f($name, $result = '', $everyMonth = false, $remark = '')
    {
        return new class($name, $result, $everyMonth, $remark) {
            private $name;
            private $result;
            private $everyMonth;
            private $remark;

            public function __construct($name, $result, $everyMonth, $remark)
            {
                $this->name = $name;
                $this->result = $result;
                $this->everyMonth = $everyMonth;
                $this->remark = $remark;
            }

            public function getName()
            {
                return $this->name;
            }

            public function getResult()
            {
                return $this->result;
            }

            public function isEveryMonth()
            {
                return $this->everyMonth;
            }

            public function getRemark()
            {
                return $this->remark;
            }

            public function __toString()
            {
                return $this->name;
            }

            public function toFullString()
            {
                $l = [$this->name];
                if ($this->result) {
                    $l[] = $this->result;
                }
                if ($this->remark) {
                    $l[] = $this->remark;
                }
                return implode(' ', $l);
            }
        };
    }

     function _getXiu($m, $d)
    {
        global $XIU_27,$XIU_OFFSET,$XIU_27;
        return $XIU_27[($XIU_OFFSET[abs($m) - 1] + $d - 1) % count($XIU_27)];
    }

    // Constants
     $dj = 'çŠ¯è€…å¤ºçºª';
     $js = 'çŠ¯è€…å‡å¯¿';
     $ss = 'çŠ¯è€…æŸå¯¿';
     $xl = 'çŠ¯è€…å‰Šç¦„å¤ºçºª';
     $jw = 'çŠ¯è€…ä¸‰å¹´å†…å¤«å¦‡ä¿±äº¡'; 
     $_y = _f('æ¨å…¬å¿Œ');
     $_t = _f('å››å¤©çŽ‹å·¡è¡Œ', '', true);
     $_d = _f('æ–—é™', $dj, true);
     $_s = _f('æœˆæœ”', $dj, true);
     $_w = _f('æœˆæœ›', $dj, true);
     $_h = _f('æœˆæ™¦', $js, true);
     $_l = _f('é›·æ–‹æ—¥', $js, true);
     $_j = _f('ä¹æ¯’æ—¥', 'çŠ¯è€…å¤­äº¡ï¼Œå¥‡ç¥¸ä¸æµ‹');
     $_r = _f('äººç¥žåœ¨é˜´', 'çŠ¯è€…å¾—ç—…', true, 'å®œå…ˆä¸€æ—¥å³æˆ’');
     $_m = _f('å¸å‘½å¥äº‹', $js, true, 'å¦‚æœˆå°ï¼Œå³æˆ’å»¿ä¹');
     $_hh = _f('æœˆæ™¦', $js, true, 'å¦‚æœˆå°ï¼Œå³æˆ’å»¿ä¹'); 


     $FESTIVAL=[
    '1-1'=> [_f('å¤©è…Šï¼ŒçŽ‰å¸æ ¡ä¸–äººç¥žæ°”ç¦„å‘½', $xl), $_s],
    '1-3'=> [_f('ä¸‡ç¥žéƒ½ä¼š', $dj), $_d],
    '1-5'=> [_f('äº”è™šå¿Œ')],
    '1-6'=> [_f('å…­è€—å¿Œ'), $_l],
    '1-7'=> [_f('ä¸Šä¼šæ—¥', $ss)],
    '1-8'=> [_f('äº”æ®¿é˜Žç½—å¤©å­è¯ž', $dj), $_t],
    '1-9'=> [_f('çŽ‰çš‡ä¸Šå¸è¯ž', $dj)],
    '1-13'=> [$_y],
    '1-14'=> [_f('ä¸‰å…ƒé™', $js), $_t],
    '1-15'=> [_f('ä¸‰å…ƒé™', $js), _f('ä¸Šå…ƒç¥žä¼š', $dj), $_w, $_t],
    '1-16'=> [_f('ä¸‰å…ƒé™', $js)],
    '1-19'=> [_f('é•¿æ˜¥çœŸäººè¯ž')],
    '1-23'=> [_f('ä¸‰å°¸ç¥žå¥äº‹'), $_t],
    '1-25'=> [$_h, _f('å¤©åœ°ä»“å¼€æ—¥', 'çŠ¯è€…æŸå¯¿ï¼Œå­å¸¦ç–¾')],
    '1-27'=> [$_d],
    '1-28'=> [$_r],
    '1-29'=> [$_t],
    '1-30'=> [$_hh, $_m, $_t],
    '2-1'=> [_f('ä¸€æ®¿ç§¦å¹¿çŽ‹è¯ž', $dj), $_s],
    '2-2'=> [_f('ä¸‡ç¥žéƒ½ä¼š', $dj), _f('ç¦å¾·åœŸåœ°æ­£ç¥žè¯ž', 'çŠ¯è€…å¾—ç¥¸')],
    '2-3'=> [_f('æ–‡æ˜Œå¸å›è¯ž', $xl), $_d],
    '2-6'=> [_f('ä¸œåŽå¸å›è¯ž'), $_l],
    '2-8'=> [_f('é‡Šè¿¦ç‰Ÿå°¼ä½›å‡ºå®¶', $dj), _f('ä¸‰æ®¿å®‹å¸çŽ‹è¯ž', $dj), _f('å¼ å¤§å¸è¯ž', $dj), $_t],
    '2-11'=> [$_y],
    '2-14'=> [$_t],
    '2-15'=> [_f('é‡Šè¿¦ç‰Ÿå°¼ä½›æ¶…æ§ƒ', $xl), _f('å¤ªä¸Šè€å›è¯ž', $xl), _f('æœˆæœ›', $xl, true), $_t],
    '2-17'=> [_f('ä¸œæ–¹æœå°†å†›è¯ž')],
    '2-18'=> [_f('å››æ®¿äº”å®˜çŽ‹è¯ž', $xl), _f('è‡³åœ£å…ˆå¸ˆå­”å­è®³è¾°', $xl)],
    '2-19'=> [_f('è§‚éŸ³å¤§å£«è¯ž', $dj)],
    '2-21'=> [_f('æ™®è´¤è©è¨è¯ž')],
    '2-23'=> [$_t],
    '2-25'=> [$_h],
    '2-27'=> [$_d],
    '2-28'=> [$_r],
    '2-29'=> [$_t],
    '2-30'=> [$_hh, $_m, $_t],
    '3-1'=> [_f('äºŒæ®¿æ¥šæ±ŸçŽ‹è¯ž', $dj), $_s],
    '3-3'=> [_f('çŽ„å¤©ä¸Šå¸è¯ž', $dj), $_d],
    '3-6'=> [$_l],
    '3-8'=> [_f('å…­æ®¿åžåŸŽçŽ‹è¯ž', $dj), $_t],
    '3-9'=> [_f('ç‰›é¬¼ç¥žå‡º', 'çŠ¯è€…äº§æ¶èƒŽ'), $_y],
    '3-12'=> [_f('ä¸­å¤®äº”é“è¯ž')],
    '3-14'=> [$_t],
    '3-15'=> [_f('æ˜Šå¤©ä¸Šå¸è¯ž', $dj), _f('çŽ„å›è¯ž', $dj), $_w, $_t],
    '3-16'=> [_f('å‡†æè©è¨è¯ž', $dj)],
    '3-19'=> [_f('ä¸­å²³å¤§å¸è¯ž'), _f('åŽåœŸå¨˜å¨˜è¯ž'), _f('ä¸‰èŒ…é™')],
    '3-20'=> [_f('å¤©åœ°ä»“å¼€æ—¥', $ss), _f('å­å­™å¨˜å¨˜è¯ž')],
    '3-23'=> [$_t],
    '3-25'=> [$_h],
    '3-27'=> [_f('ä¸ƒæ®¿æ³°å±±çŽ‹è¯ž'), $_d],
    '3-28'=> [$_r, _f('è‹é¢‰è‡³åœ£å…ˆå¸ˆè¯ž', $xl), _f('ä¸œå²³å¤§å¸è¯ž')],
    '3-29'=> [$_t],
    '3-30'=> [$_hh, $_m, $_t],
    '4-1'=> [_f('å…«æ®¿éƒ½å¸‚çŽ‹è¯ž', $dj), $_s],
    '4-3'=> [$_d],
    '4-4'=> [_f('ä¸‡ç¥žå–„ä¼š', 'çŠ¯è€…å¤±ç˜¼å¤­èƒŽ'), _f('æ–‡æ®Šè©è¨è¯ž')],
    '4-6'=> [$_l],
    '4-7'=> [_f('å—æ–—ã€åŒ—æ–—ã€è¥¿æ–—åŒé™', $js), $_y],
    '4-8'=> [_f('é‡Šè¿¦ç‰Ÿå°¼ä½›è¯ž', $dj), _f('ä¸‡ç¥žå–„ä¼š', 'çŠ¯è€…å¤±ç˜¼å¤­èƒŽ'), _f('å–„æ¶ç«¥å­é™', 'çŠ¯è€…è¡€æ­»'), _f('ä¹æ®¿å¹³ç­‰çŽ‹è¯ž'), $_t],
    '4-14'=> [_f('çº¯é˜³ç¥–å¸ˆè¯ž', $js), $_t],
    '4-15'=> [$_w, _f('é’Ÿç¦»ç¥–å¸ˆè¯ž'),  $_t],
    '4-16'=> [_f('å¤©åœ°ä»“å¼€æ—¥', $ss)],
    '4-17'=> [_f('åæ®¿è½¬è½®çŽ‹è¯ž', $dj)],
    '4-18'=> [_f('å¤©åœ°ä»“å¼€æ—¥', $ss), _f('ç´«å¾½å¤§å¸è¯ž', $ss)],
    '4-20'=> [_f('çœ¼å…‰åœ£æ¯è¯ž')],
    '4-23'=> [$_t],
    '4-25'=> [$_h],
    '4-27'=> [$_d],
    '4-28'=> [$_r],
    '4-29'=> [$_t],
    '4-30'=> [$_hh, $_m, $_t],
    '5-1'=> [_f('å—æžé•¿ç”Ÿå¤§å¸è¯ž', $dj), $_s],
    '5-3'=> [$_d],
    '5-5'=> [_f('åœ°è…Š', $xl), _f('äº”å¸æ ¡å®šç”Ÿäººå®˜çˆµ', $xl), $_j, $_y],
    '5-6'=> [$_j, $_l],
    '5-7'=> [$_j],
    '5-8'=> [_f('å—æ–¹äº”é“è¯ž'), $_t],
    '5-11'=> [_f('å¤©åœ°ä»“å¼€æ—¥', $ss),_f('å¤©ä¸‹éƒ½åŸŽéšè¯ž')],
    '5-12'=> [_f('ç‚³çµå…¬è¯ž')],
    '5-13'=> [_f('å…³åœ£é™', $xl)],
    '5-14'=> [_f('å¤œå­æ—¶ä¸ºå¤©åœ°äº¤æ³°', $jw), $_t],
    '5-15'=> [$_w, $_j, $_t],
    '5-16'=> [_f('ä¹æ¯’æ—¥', $jw), _f('å¤©åœ°å…ƒæ°”é€ åŒ–ä¸‡ç‰©ä¹‹è¾°', $jw)],
    '5-17'=> [$_j],
    '5-18'=> [_f('å¼ å¤©å¸ˆè¯ž')],
    '5-22'=> [_f('å­å¨¥ç¥žè¯ž', $dj)],
    '5-23'=> [$_t],
    '5-25'=> [$_j, $_h],
    '5-26'=> [$_j],
    '5-27'=> [$_j, $_d],
    '5-28'=> [$_r],
    '5-29'=> [$_t],
    '5-30'=> [$_hh, $_m, $_t],
    '6-1'=> [$_s],
    '6-3'=> [_f('éŸ¦é©®è©è¨åœ£è¯ž'), $_d, $_y],
    '6-5'=> [_f('å—èµ¡éƒ¨æ´²è½¬å¤§è½®', $ss)],
    '6-6'=> [_f('å¤©åœ°ä»“å¼€æ—¥', $ss), $_l],
    '6-8'=> [$_t],
    '6-10'=> [_f('é‡‘ç²Ÿå¦‚æ¥è¯ž')],
    '6-14'=> [$_t],
    '6-15'=> [$_w, $_t],
    '6-19'=> [_f('è§‚ä¸–éŸ³è©è¨æˆé“', $dj)],
    '6-23'=> [_f('å—æ–¹ç«ç¥žè¯ž', 'çŠ¯è€…é­å›žç¦„'), $_t],
    '6-24'=> [_f('é›·ç¥–è¯ž', $xl), _f('å…³å¸è¯ž', $xl)],
    '6-25'=> [$_h],
    '6-27'=> [$_d],
    '6-28'=> [$_r],
    '6-29'=> [$_t],
    '6-30'=> [$_hh, $_m, $_t],
    '7-1'=> [$_s, $_y],
    '7-3'=> [$_d],
    '7-5'=> [_f('ä¸­ä¼šæ—¥', $ss, false, 'ä¸€ä½œåˆä¸ƒ')],
    '7-6'=> [$_l],
    '7-7'=> [_f('é“å¾·è…Š', $xl), _f('äº”å¸æ ¡ç”Ÿäººå–„æ¶', $xl), _f('é­æ˜Ÿè¯ž', $xl)],
    '7-8'=> [$_t],
    '7-10'=> [_f('é˜´æ¯’æ—¥', '', false, 'å¤§å¿Œ')],
    '7-12'=> [_f('é•¿çœŸè°­çœŸäººè¯ž')],
    '7-13'=> [_f('å¤§åŠ¿è‡³è©è¨è¯ž', $js)],
    '7-14'=> [_f('ä¸‰å…ƒé™', $js), $_t],
    '7-15'=> [$_w, _f('ä¸‰å…ƒé™', $dj),_f('åœ°å®˜æ ¡ç±', $dj), $_t],
    '7-16'=> [_f('ä¸‰å…ƒé™', $js)],
    '7-18'=> [_f('è¥¿çŽ‹æ¯è¯ž', $dj)],
    '7-19'=> [_f('å¤ªå²è¯ž', $dj)],
    '7-22'=> [_f('å¢žç¦è´¢ç¥žè¯ž', $xl)],
    '7-23'=> [$_t],
    '7-25'=> [$_h],
    '7-27'=> [$_d],
    '7-28'=> [$_r],
    '7-29'=> [$_y, $_t],
    '7-30'=> [_f('åœ°è—è©è¨è¯ž', $dj), $_hh, $_m, $_t],
    '8-1'=> [$_s, _f('è®¸çœŸå›è¯ž')],
    '8-3'=> [$_d, _f('åŒ—æ–—è¯ž', $xl), _f('å¸å‘½ç¶å›è¯ž', 'çŠ¯è€…é­å›žç¦„')],
    '8-5'=> [_f('é›·å£°å¤§å¸è¯ž', $dj)],
    '8-6'=> [$_l],
    '8-8'=> [$_t],
    '8-10'=> [_f('åŒ—æ–—å¤§å¸è¯ž')],
    '8-12'=> [_f('è¥¿æ–¹äº”é“è¯ž')],
    '8-14'=> [$_t],
    '8-15'=> [$_w, _f('å¤ªæ˜Žæœå…ƒ', 'çŠ¯è€…æš´äº¡', false, 'å®œç„šé¦™å®ˆå¤œ'), $_t],
    '8-16'=> [_f('å¤©æ›¹æŽ åˆ·çœŸå›é™', 'çŠ¯è€…è´«å¤­')],
    '8-18'=> [_f('å¤©äººå…´ç¦ä¹‹è¾°', '', false, 'å®œæ–‹æˆ’ï¼Œå­˜æƒ³å‰äº‹')],
    '8-23'=> [_f('æ±‰æ’å€™å¼ æ˜¾çŽ‹è¯ž'), $_t],
    '8-24'=> [_f('ç¶å›å¤«äººè¯ž')],
    '8-25'=> [$_h],
    '8-27'=> [$_d, _f('è‡³åœ£å…ˆå¸ˆå­”å­è¯ž', $xl), $_y],
    '8-28'=> [$_r, _f('å››å¤©ä¼šäº‹')],
    '8-29'=> [$_t],
    '8-30'=> [_f('è¯¸ç¥žè€ƒæ ¡', 'çŠ¯è€…å¤ºç®—'), $_hh, $_m, $_t],
    '9-1'=> [$_s, _f('å—æ–—è¯ž', $xl), _f('åŒ—æ–—ä¹æ˜Ÿé™ä¸–', $dj, false, 'æ­¤ä¹æ—¥ä¿±å®œæ–‹æˆ’')],
    '9-3'=> [$_d, _f('äº”ç˜Ÿç¥žè¯ž')],
    '9-6'=> [$_l],
    '9-8'=> [$_t],
    '9-9'=> [_f('æ–—æ¯è¯ž', $xl), _f('é…†éƒ½å¤§å¸è¯ž'), _f('çŽ„å¤©ä¸Šå¸é£žå‡')],
    '9-10'=> [_f('æ–—æ¯é™', $dj)],
    '9-11'=> [_f('å®œæˆ’')],
    '9-13'=> [_f('å­Ÿå©†å°Šç¥žè¯ž')],
    '9-14'=> [$_t],
    '9-15'=> [$_w, $_t],
    '9-17'=> [_f('é‡‘é¾™å››å¤§çŽ‹è¯ž', 'çŠ¯è€…é­æ°´åŽ„')],
    '9-19'=> [_f('æ—¥å®«æœˆå®«ä¼šåˆ', $js), _f('è§‚ä¸–éŸ³è©è¨è¯ž', $js)],
    '9-23'=> [$_t],
    '9-25'=> [$_h, $_y],
    '9-27'=> [$_d],
    '9-28'=> [$_r],
    '9-29'=> [$_t],
    '9-30'=> [_f('è¯å¸ˆç‰ç’ƒå…‰ä½›è¯ž', 'çŠ¯è€…å±ç–¾'), $_hh, $_m, $_t],
    '10-1'=> [$_s, _f('æ°‘å²è…Š', $dj), _f('å››å¤©çŽ‹é™', 'çŠ¯è€…ä¸€å¹´å†…æ­»')],
    '10-3'=> [$_d, _f('ä¸‰èŒ…è¯ž')],
    '10-5'=> [_f('ä¸‹ä¼šæ—¥', $js), _f('è¾¾æ‘©ç¥–å¸ˆè¯ž', $js)],
    '10-6'=> [$_l, _f('å¤©æ›¹è€ƒå¯Ÿ', $dj)],
    '10-8'=> [_f('ä½›æ¶…æ§ƒæ—¥', '', false, 'å¤§å¿Œè‰²æ¬²'), $_t],
    '10-10'=> [_f('å››å¤©çŽ‹é™', 'çŠ¯è€…ä¸€å¹´å†…æ­»')],
    '10-11'=> [_f('å®œæˆ’')],
    '10-14'=> [_f('ä¸‰å…ƒé™', $js), $_t],
    '10-15'=> [$_w, _f('ä¸‰å…ƒé™', $dj), _f('ä¸‹å…ƒæ°´åºœæ ¡ç±', $dj), $_t],
    '10-16'=> [_f('ä¸‰å…ƒé™', $js), $_t],
    '10-23'=> [$_y, $_t],
    '10-25'=> [$_h],
    '10-27'=> [$_d, _f('åŒ—æžç´«å¾½å¤§å¸é™')],
    '10-28'=> [$_r],
    '10-29'=> [$_t],
    '10-30'=> [$_hh, $_m, $_t],
    '11-1'=> [$_s],
    '11-3'=> [$_d],
    '11-4'=> [_f('è‡³åœ£å…ˆå¸ˆå­”å­è¯ž', $xl)],
    '11-6'=> [_f('è¥¿å²³å¤§å¸è¯ž')],
    '11-8'=> [$_t],
    '11-11'=> [_f('å¤©åœ°ä»“å¼€æ—¥', $dj), _f('å¤ªä¹™æ•‘è‹¦å¤©å°Šè¯ž', $dj)],
    '11-14'=> [$_t],
    '11-15'=> [_f('æœˆæœ›', 'ä¸ŠåŠå¤œçŠ¯ç”·æ­» ä¸‹åŠå¤œçŠ¯å¥³æ­»'), _f('å››å¤©çŽ‹å·¡è¡Œ', 'ä¸ŠåŠå¤œçŠ¯ç”·æ­» ä¸‹åŠå¤œçŠ¯å¥³æ­»')],
    '11-17'=> [_f('é˜¿å¼¥é™€ä½›è¯ž')],
    '11-19'=> [_f('å¤ªé˜³æ—¥å®«è¯ž', 'çŠ¯è€…å¾—å¥‡ç¥¸')],
    '11-21'=> [$_y],
    '11-23'=> [_f('å¼ ä»™è¯ž', 'çŠ¯è€…ç»å—£'), $_t],
    '11-25'=> [_f('æŽ åˆ·å¤§å¤«é™', 'çŠ¯è€…é­å¤§å‡¶'), $_h],
    '11-26'=> [_f('åŒ—æ–¹äº”é“è¯ž')],
    '11-27'=> [$_d],
    '11-28'=> [$_r],
    '11-29'=> [$_t],
    '11-30'=> [$_hh, $_m, $_t],
    '12-1'=> [$_s],
    '12-3'=> [$_d],
    '12-6'=> [_f('å¤©åœ°ä»“å¼€æ—¥', $js), $_l],
    '12-7'=> [_f('æŽ åˆ·å¤§å¤«é™', 'çŠ¯è€…å¾—æ¶ç–¾')],
    '12-8'=> [_f('çŽ‹ä¾¯è…Š', $dj), _f('é‡Šè¿¦å¦‚æ¥æˆä½›ä¹‹è¾°'), $_t, _f('åˆæ—¬å†…æˆŠæ—¥ï¼Œäº¦åçŽ‹ä¾¯è…Š', $dj)],
    '12-12'=> [_f('å¤ªç´ ä¸‰å…ƒå›æœçœŸ')],
    '12-14'=> [$_t],
    '12-15'=> [$_w, $_t],
    '12-16'=> [_f('å—å²³å¤§å¸è¯ž')],
    '12-19'=> [$_y],
    '12-20'=> [_f('å¤©åœ°äº¤é“', 'çŠ¯è€…ä¿ƒå¯¿')],
    '12-21'=> [_f('å¤©çŒ·ä¸Šå¸è¯ž')],
    '12-23'=> [_f('äº”å²³è¯žé™'), $_t],
    '12-24'=> [_f('å¸ä»Šæœå¤©å¥äººå–„æ¶', 'çŠ¯è€…å¾—å¤§ç¥¸')],
    '12-25'=> [_f('ä¸‰æ¸…çŽ‰å¸åŒé™ï¼Œè€ƒå¯Ÿå–„æ¶', 'çŠ¯è€…å¾—å¥‡ç¥¸'), $_h],
    '12-27'=> [$_d],
    '12-28'=> [$_r],
    '12-29'=> [_f('åŽä¸¥è©è¨è¯ž'), $_t],
    '12-30'=> [_f('è¯¸ç¥žä¸‹é™ï¼Œå¯Ÿè®¿å–„æ¶', 'çŠ¯è€…ç”·å¥³ä¿±äº¡')],
    'getXiu' => function ($m,$d){return _getXiu($m,$d);},
    'DAY_ZHAI_GUAN_YIN'=>$DAY_ZHAI_GUAN_YIN
    ];
     return $FESTIVAL;
}

class LunarTime
{
    private $p; 
    private function __construct($ganIndex, $zhiIndex, $lunar)
    {
        $this->p = [
            'ganIndex' => $ganIndex,
            'zhiIndex' => $zhiIndex,
            'lunar' => $lunar
        ];
    }

    public static function fromYmdHms($lunarYear, $lunarMonth, $lunarDay, $hour, $minute, $second)
    {
        $lunar = (new Lunar())->fromYmdHms($lunarYear, $lunarMonth, $lunarDay, $hour, $minute, $second);
        $zhiIndex = LunarUtil::getTimeZhiIndex(sprintf('%02d:%02d', $hour, $minute));
        $ganIndex = ($lunar->getDayGanIndexExact() % 5 * 2 + $zhiIndex) % 10;

        return new self($ganIndex, $zhiIndex, $lunar);
    }

    public function getGanIndex()
    {
        return $this->p['ganIndex'];
    }

    public function getZhiIndex()
    {
        return $this->p['zhiIndex'];
    }

    public function getGan()
    {
        return LunarUtil::$GAN[$this->p['ganIndex'] + 1];
    }

    public function getZhi()
    {
        return LunarUtil::$ZHI[$this->p['zhiIndex'] + 1];
    }

    public function getGanZhi()
    {
        return $this->getGan() . $this->getZhi();
    }

    public function getShengXiao()
    {
        return LunarUtil::$SHENGXIAO[$this->p['zhiIndex'] + 1];
    }

    public function getPositionXi()
    {
        return LunarUtil::$POSITION_XI[$this->p['ganIndex'] + 1];
    }

    public function getPositionXiDesc()
    {
        return LunarUtil::$POSITION_DESC[$this->getPositionXi()];
    }

    public function getPositionYangGui()
    {
        return LunarUtil::$POSITION_YANG_GUI[$this->p['ganIndex'] + 1];
    }

    public function getPositionYangGuiDesc()
    {
        return LunarUtil::$POSITION_DESC[$this->getPositionYangGui()];
    }

    public function getPositionYinGui()
    {
        return LunarUtil::$POSITION_YIN_GUI[$this->p['ganIndex'] + 1];
    }

    public function getPositionYinGuiDesc()
    {
        return LunarUtil::$POSITION_DESC[$this->getPositionYinGui()];
    }

    public function getPositionFu($sect)
    {
        return $sect === 1 ? LunarUtil::$POSITION_FU[$this->p['ganIndex'] + 1] : LunarUtil::$POSITION_FU_2[$this->p['ganIndex'] + 1];
    }

    public function getPositionFuDesc($sect)
    {
        return LunarUtil::$POSITION_DESC[$this->getPositionFu($sect)];
    }

    public function getPositionCai()
    {
        return LunarUtil::$POSITION_CAI[$this->p['ganIndex'] + 1];
    }

    public function getPositionCaiDesc()
    {
        return LunarUtil::$POSITION_DESC[$this->getPositionCai()];
    }

    public function getGzGc()
    {
        return LunarUtil::$GZGC[$this->getGanZhi()];
    }

    public function getNaYin()
    {
        return LunarUtil::$NAYIN[$this->getGanZhi()];
    }

    public function getTianShen()
    {
        return LunarUtil::$TIAN_SHEN[($this->p['zhiIndex'] + LunarUtil::$ZHI_TIAN_SHEN_OFFSET[$this->p['lunar']->getDayZhiExact()]) % 12 + 1];
    }

    public function getTianShenType()
    {
        return LunarUtil::$TIAN_SHEN_TYPE[$this->getTianShen()];
    }

    public function getTianShenLuck()
    {
        return LunarUtil::$TIAN_SHEN_TYPE_LUCK[$this->getTianShenType()];
    }

    public function getChong()
    {
        return LunarUtil::$CHONG[$this->p['zhiIndex']];
    }

    public function getSha()
    {
        return LunarUtil::$SHA[$this->getZhi()];
    }

    public function getChongShengXiao()
    {
        $chong = $this->getChong();
        foreach (LunarUtil::$ZHI as $index => $zhi) {
            if ($zhi === $chong) {
                return LunarUtil::$SHENGXIAO[$index];
            }
        }
        return '';
    }

    public function getChongDesc()
    {
        return '(' . $this->getChongGan() . $this->getChong() . ')' . $this->getChongShengXiao();
    }

    public function getChongGan()
    {
        return LunarUtil::$CHONG_GAN[$this->p['ganIndex']];
    }

    public function getChongGanTie()
    {
        return LunarUtil::$CHONG_GAN_TIE[$this->p['ganIndex']];
    }

    public function getYi()
    {
        return LunarUtil::getTimeYi($this->p['lunar']->getDayInGanZhiExact(), $this->getGanZhi());
    }

    public function getJi()
    {
        return LunarUtil::getTimeJi($this->p['lunar']->getDayInGanZhiExact(), $this->getGanZhi());
    }

    public function getNineStar()
    {
        $solarYmd = $this->p['lunar']->getSolar()->toYmd();
        $jieQi = $this->p['lunar']->getJieQiTable();
        $asc = false;

        if ($solarYmd >= $jieQi['冬至']->toYmd() && $solarYmd < $jieQi['夏至']->toYmd()) {
            $asc = true;
        }

        $start = $asc ? 7 : 3;
        $dayZhi = $this->p['lunar']->getDayZhi();

        if (strpos('子午卯酉', $dayZhi) !== false) {
            $start = $asc ? 1 : 9;
        } elseif (strpos('寅申巳亥', $dayZhi) !== false) {
            $start = $asc ? 4 : 6;
        }

        $index = $asc ? $start + $this->p['zhiIndex'] - 1 : $start - $this->p['zhiIndex'] - 1;

        if ($index > 8) {
            $index -= 9;
        } elseif ($index < 0) {
            $index += 9;
        }

        return NineStar::fromIndex($index);
    }

    public function getXun()
    {
        return LunarUtil::getXun($this->getGanZhi());
    }

    public function getXunKong()
    {
        return LunarUtil::getXunKong($this->getGanZhi());
    }

    public function getMinHm()
    {
        $hour = $this->p['lunar']->getHour();

        if ($hour < 1) {
            return '00:00';
        } elseif ($hour > 22) {
            return '23:00';
        }

        if ($hour % 2 === 0) {
            $hour -= 1;
        }

        return sprintf('%02d:00', $hour);
    }

    public function getMaxHm()
    {
        $hour = $this->p['lunar']->getHour();

        if ($hour < 1) {
            return '00:59';
        } elseif ($hour > 22) {
            return '23:59';
        }

        if ($hour % 2 !== 0) {
            $hour += 1;
        }

        return sprintf('%02d:59', $hour);
    }

    public function __toString()
    {
        return $this->getGanZhi();
    }
}
 class Tao
{
    static $BIRTH_YEAR = -2697; 
    private $p;

    private function __construct($lunar)
    {
        $this->p = ['lunar' => $lunar];
    }

    public static function fromYmdHms($y, $m, $d, $hour, $minute, $second)
    {
        return self::fromLunar((new Lunar())->fromYmdHms($y + self::$BIRTH_YEAR, $m, $d, $hour, $minute, $second));
    }

    public static function fromYmd($y, $m, $d)
    {
        return self::fromYmdHms($y, $m, $d, 0, 0, 0);
    }

    public static function fromLunar($lunar)
    {
        return new self($lunar);
    }

    public function getLunar()
    {
        return $this->p['lunar'];
    }

    public function getYear()
    {
        return $this->p['lunar']->getYear() - self::$BIRTH_YEAR;
    }

    public function getMonth()
    {
        return $this->p['lunar']->getMonth();
    }

    public function getDay()
    {
        return $this->p['lunar']->getDay();
    }

    public function getYearInChinese()
    {
        $y = strval($this->getYear());
        $s = '';
        $zero = ord('0');
        for ($i = 0, $j = strlen($y); $i < $j; $i++) {
            $s .= LunarUtil::$NUMBER[ord($y[$i]) - $zero];
        }
        return $s;
    }

    public function getMonthInChinese()
    {
        return $this->p['lunar']->getMonthInChinese();
    }

    public function getDayInChinese()
    {
        return $this->p['lunar']->getDayInChinese();
    }

    public function getFestivals()
    {
        $l = [];
        $fs = TaoUtil()['FESTIVAL'][$this->getMonth() . '-' . $this->getDay()];
        if ($fs) {
            $l = array_merge($l, $fs);
        }

        $jq = $this->p['lunar']->getJieQi();
        if ($jq === '冬至') {
            $l[] = TaoFestival::create('元始天尊圣诞');
        } elseif ($jq === '夏至') {
            $l[] = TaoFestival::create('灵宝天尊圣诞');
        }

        $f = TaoUtil()['BA_JIE'][$jq];
        if ($f) {
            $l[] = TaoFestival::create($f);
        }

        $f = TaoUtil()['BA_HUI'][$this->p['lunar']->getDayInGanZhi()];
        if ($f) {
            $l[] = TaoFestival::create($f);
        }

        return $l;
    }

    private function isDayIn($days)
    {
        $md = $this->getMonth() . '-' . $this->getDay();
        return in_array($md, $days);
    }

    public function isDaySanHui()
    {
        return $this->isDayIn(TaoUtil()['SAN_HUI']);
    }

    public function isDaySanYuan()
    {
        return $this->isDayIn(TaoUtil()['SAN_YUAN']);
    }

    public function isDayBaJie()
    {
        return isset(TaoUtil()['BA_JIE'][$this->p['lunar']->getJieQi()]);
    }

    public function isDayWuLa()
    {
        return $this->isDayIn(TaoUtil()['WU_LA']);
    }

    public function isDayBaHui()
    {
        return isset(TaoUtil()['BA_HUI'][$this->p['lunar']->getDayInGanZhi()]);
    }

    public function isDayMingWu()
    {
        return $this->p['lunar']->getDayGan() === '戊';
    }

    public function isDayAnWu()
    {
        return $this->p['lunar']->getDayZhi() === TaoUtil()['AN_WU'][abs($this->getMonth()) - 1];
    }

    public function isDayWu()
    {
        return $this->isDayMingWu() || $this->isDayAnWu();
    }

    public function isDayTianShe()
    {
        $ret = false;
        $mz = $this->p['lunar']->getMonthZhi();
        $dgz = $this->p['lunar']->getDayInGanZhi();

        switch ($mz) {
            case '寅':
            case '午':
            case '戌':
                if ($dgz === '戊寅') {
                    $ret = true;
                }
                break;
            case '卯':
            case '未':
            case '亥':
                if ($dgz === '甲午') {
                    $ret = true;
                }
                break;
            case '辰':
            case '申':
            case '子':
                if ($dgz === '戊申') {
                    $ret = true;
                }
                break;
            case '巳':
            case '酉':
            case '丑':
                if ($dgz === '甲子') {
                    $ret = true;
                }
                break;
        }

        return $ret;
    }

    public function __toString()
    {
        return $this->getYearInChinese() . '年' . $this->getMonthInChinese() . '月' . $this->getDayInChinese() . '日';
    }

    public function toFullString()
    {
        return '道历' . $this->getYearInChinese() . '年，天运' . $this->p['lunar']->getYearInGanZhi() . '年，' .
            $this->p['lunar']->getMonthInGanZhi() . '月，' . $this->p['lunar']->getDayInGanZhi() . '日。' .
            $this->getMonthInChinese() . '月' . $this->getDayInChinese() . '日，' . $this->p['lunar']->getTimeZhi() . '时。';
    }
}
function TaoUtil()
{
    function  _f($a, $b = null)
    {
        return  TaoFestival::create($a, $b);
    }
    return [
        'SAN_HUI' => ['1-7', '7-7', '10-15'],
        'SAN_YUAN' => ['1-15', '7-15', '10-15'],
        'WU_LA' => ['1-1', '5-5', '7-7', '10-1', '12-8'],
        'AN_WU' => ['æœª', 'æˆŒ', 'è¾°', 'å¯…', 'åˆ', 'å­', 'é…‰', 'ç”³', 'å·³', 'äº¥', 'å¯', 'ä¸‘'],
        'BA_HUI' => [
            'ä¸™åˆ' => 'å¤©ä¼š',
            'å£¬åˆ' => 'åœ°ä¼š',
            'å£¬å­' => 'äººä¼š',
            'åºšåˆ' => 'æ—¥ä¼š',
            'åºšç”³' => 'æœˆä¼š',
            'è¾›é…‰' => 'æ˜Ÿè¾°ä¼š',
            'ç”²è¾°' => 'äº”è¡Œä¼š',
            'ç”²æˆŒ' => 'å››æ—¶ä¼š'
        ],
        'BA_JIE' => [
            'ç«‹æ˜¥' => 'ä¸œåŒ—æ–¹åº¦ä»™ä¸Šåœ£å¤©å°ŠåŒæ¢µç‚å§‹é’å¤©å›ä¸‹é™',
            'æ˜¥åˆ†' => 'ä¸œæ–¹çŽ‰å®æ˜Ÿä¸Šå¤©å°ŠåŒé’å¸ä¹ç‚å¤©å›ä¸‹é™',
            'ç«‹å¤' => 'ä¸œå—æ–¹å¥½ç”Ÿåº¦å‘½å¤©å°ŠåŒæ¢µç‚å§‹ä¸¹å¤©å›ä¸‹é™',
            'å¤è‡³' => 'å—æ–¹çŽ„çœŸä¸‡ç¦å¤©å°ŠåŒèµ¤å¸ä¸‰ç‚å¤©å›ä¸‹é™',
            'ç«‹ç§‹' => 'è¥¿å—æ–¹å¤ªçµè™šçš‡å¤©å°ŠåŒæ¢µç‚å§‹ç´ å¤©å›ä¸‹é™',
            'ç§‹åˆ†' => 'è¥¿æ–¹å¤ªå¦™è‡³æžå¤©å°ŠåŒç™½å¸ä¸ƒç‚å¤©å›ä¸‹é™',
            'ç«‹å†¬' => 'è¥¿åŒ—æ–¹æ— é‡å¤ªåŽå¤©å°ŠåŒæ¢µç‚å§‹çŽ„å¤©å›ä¸‹é™',
            'å†¬è‡³' => 'åŒ—æ–¹çŽ„ä¸ŠçŽ‰å®¸å¤©å°ŠåŒé»‘å¸äº”ç‚å¤©å›ä¸‹é™'
        ],
        'FESTIVAL' => [
            '1-1' => [_f('å¤©è…Šä¹‹è¾°', 'å¤©è…Šï¼Œæ­¤æ—¥äº”å¸ä¼šäºŽä¸œæ–¹ä¹ç‚é’å¤©')],
            '1-3' => [_f('éƒçœŸäººåœ£è¯ž'), _f('å­™çœŸäººåœ£è¯ž')],
            '1-5' => [_f('å­™ç¥–æ¸…é™å…ƒå›è¯ž')],
            '1-7' => [_f('ä¸¾è¿èµä¼š', 'æ­¤æ—¥ä¸Šå…ƒèµç¦ï¼Œå¤©å®˜åŒåœ°æ°´äºŒå®˜è€ƒæ ¡ç½ªç¦')],
            '1-9' => [_f('çŽ‰çš‡ä¸Šå¸åœ£è¯ž')],
            '1-13' => [_f('å…³åœ£å¸å›é£žå‡')],
            '1-15' => [_f('ä¸Šå…ƒå¤©å®˜åœ£è¯ž'), _f('è€ç¥–å¤©å¸ˆåœ£è¯ž')],
            '1-19' => [_f('é•¿æ˜¥é‚±çœŸäºº(é‚±å¤„æœº)åœ£è¯ž')],
            '1-28' => [_f('è®¸çœŸå›(è®¸é€Šå¤©å¸ˆ)åœ£è¯ž')],
            '2-1' => [_f('å‹¾é™ˆå¤©çš‡å¤§å¸åœ£è¯ž'), _f('é•¿æ˜¥åˆ˜çœŸäºº(åˆ˜æ¸Šç„¶)åœ£è¯ž')],
            '2-2' => [_f('åœŸåœ°æ­£ç¥žè¯ž'), _f('å§œå¤ªå…¬åœ£è¯ž')],
            '2-3' => [_f('æ–‡æ˜Œæ¢“æ½¼å¸å›åœ£è¯ž')],
            '2-6' => [_f('ä¸œåŽå¸å›åœ£è¯ž')],
            '2-13' => [_f('åº¦äººæ— é‡è‘›çœŸå›åœ£è¯ž')],
            '2-15' => [_f('å¤ªæ¸…é“å¾·å¤©å°Š(å¤ªä¸Šè€å›)åœ£è¯ž')],
            '2-19' => [_f('æ…ˆèˆªçœŸäººåœ£è¯ž')],
            '3-1' => [_f('è°­ç¥–(è°­å¤„ç«¯)é•¿çœŸçœŸäººåœ£è¯ž')],
            '3-3' => [_f('çŽ„å¤©ä¸Šå¸åœ£è¯ž')],
            '3-6' => [_f('çœ¼å…‰å¨˜å¨˜åœ£è¯ž')],
            '3-15' => [_f('å¤©å¸ˆå¼ å¤§çœŸäººåœ£è¯ž'), _f('è´¢ç¥žèµµå…¬å…ƒå¸…åœ£è¯ž')],
            '3-16' => [_f('ä¸‰èŒ…çœŸå›å¾—é“ä¹‹è¾°'), _f('ä¸­å²³å¤§å¸åœ£è¯ž')],
            '3-18' => [_f('çŽ‹ç¥–(çŽ‹å¤„ä¸€)çŽ‰é˜³çœŸäººåœ£è¯ž'), _f('åŽåœŸå¨˜å¨˜åœ£è¯ž')],
            '3-19' => [_f('å¤ªé˜³æ˜Ÿå›åœ£è¯ž')],
            '3-20' => [_f('å­å­™å¨˜å¨˜åœ£è¯ž')],
            '3-23' => [_f('å¤©åŽå¦ˆç¥–åœ£è¯ž')],
            '3-26' => [_f('é¬¼è°·å…ˆå¸ˆè¯ž')],
            '3-28' => [_f('ä¸œå²³å¤§å¸åœ£è¯ž')],
            '4-1' => [_f('é•¿ç”Ÿè°­çœŸå›æˆé“ä¹‹è¾°')],
            '4-10' => [_f('ä½•ä»™å§‘åœ£è¯ž')],
            '4-14' => [_f('å•ç¥–çº¯é˜³ç¥–å¸ˆåœ£è¯ž')],
            '4-15' => [_f('é’Ÿç¦»ç¥–å¸ˆåœ£è¯ž')],
            '4-18' => [_f('åŒ—æžç´«å¾®å¤§å¸åœ£è¯ž'), _f('æ³°å±±åœ£æ¯ç¢§éœžå…ƒå›è¯ž'), _f('åŽä½—ç¥žåŒ»å…ˆå¸ˆè¯ž')],
            '4-20' => [_f('çœ¼å…‰åœ£æ¯å¨˜å¨˜è¯ž')],
            '4-28' => [_f('ç¥žå†œå…ˆå¸è¯ž')],
            '5-1' => [_f('å—æžé•¿ç”Ÿå¤§å¸åœ£è¯ž')],
            '5-5' => [_f('åœ°è…Šä¹‹è¾°', 'åœ°è…Šï¼Œæ­¤æ—¥äº”å¸ä¼šäºŽå—æ–¹ä¸‰ç‚ä¸¹å¤©'), _f('å—æ–¹é›·ç¥–åœ£è¯ž'), _f('åœ°ç¥—æ¸©å…ƒå¸…åœ£è¯ž'), _f('é›·éœ†é‚“å¤©å›åœ£è¯ž')],
            '5-11' => [_f('åŸŽéšçˆ·åœ£è¯ž')],
            '5-13' => [_f('å…³åœ£å¸å›é™ç¥ž'), _f('å…³å¹³å¤ªå­åœ£è¯ž')],
            '5-18' => [_f('å¼ å¤©å¸ˆåœ£è¯ž')],
            '5-20' => [_f('é©¬ç¥–ä¸¹é˜³çœŸäººåœ£è¯ž')],
            '5-29' => [_f('ç´«é’ç™½ç¥–å¸ˆåœ£è¯ž')],
            '6-1' => [_f('å—æ–—æ˜Ÿå›ä¸‹é™')],
            '6-2' => [_f('å—æ–—æ˜Ÿå›ä¸‹é™')],
            '6-3' => [_f('å—æ–—æ˜Ÿå›ä¸‹é™')],
            '6-4' => [_f('å—æ–—æ˜Ÿå›ä¸‹é™')],
            '6-5' => [_f('å—æ–—æ˜Ÿå›ä¸‹é™')],
            '6-6' => [_f('å—æ–—æ˜Ÿå›ä¸‹é™')],
            '6-10' => [_f('åˆ˜æµ·èŸ¾ç¥–å¸ˆåœ£è¯ž')],
            '6-15' => [_f('çµå®˜çŽ‹å¤©å›åœ£è¯ž')],
            '6-19' => [_f('æ…ˆèˆª(è§‚éŸ³)æˆé“æ—¥')],
            '6-23' => [_f('ç«ç¥žåœ£è¯ž')],
            '6-24' => [_f('å—æžå¤§å¸ä¸­æ–¹é›·ç¥–åœ£è¯ž'), _f('å…³åœ£å¸å›åœ£è¯ž')],
            '6-26' => [_f('äºŒéƒŽçœŸå›åœ£è¯ž')],
            '7-7' => [_f('é“å¾·è…Šä¹‹è¾°', 'é“å¾·è…Šï¼Œæ­¤æ—¥äº”å¸ä¼šäºŽè¥¿æ–¹ä¸ƒç‚ç´ å¤©'), _f('åº†ç”Ÿä¸­ä¼š', 'æ­¤æ—¥ä¸­å…ƒèµ¦ç½ªï¼Œåœ°å®˜åŒå¤©æ°´äºŒå®˜è€ƒæ ¡ç½ªç¦')],
            '7-12' => [_f('è¥¿æ–¹é›·ç¥–åœ£è¯ž')],
            '7-15' => [_f('ä¸­å…ƒåœ°å®˜å¤§å¸åœ£è¯ž')],
            '7-18' => [_f('çŽ‹æ¯å¨˜å¨˜åœ£è¯ž')],
            '7-20' => [_f('åˆ˜ç¥–(åˆ˜å¤„çŽ„)é•¿ç”ŸçœŸäººåœ£è¯ž')],
            '7-22' => [_f('è´¢å¸›æ˜Ÿå›æ–‡è´¢ç¥žå¢žç¦ç›¸å…¬æŽè¯¡ç¥–åœ£è¯ž')],
            '7-26' => [_f('å¼ ä¸‰ä¸°ç¥–å¸ˆåœ£è¯ž')],
            '8-1' => [_f('è®¸çœŸå›é£žå‡æ—¥')],
            '8-3' => [_f('ä¹å¤©å¸å‘½ç¶å›è¯ž')],
            '8-5' => [_f('åŒ—æ–¹é›·ç¥–åœ£è¯ž')],
            '8-10' => [_f('åŒ—å²³å¤§å¸è¯žè¾°')],
            '8-15' => [_f('å¤ªé˜´æ˜Ÿå›è¯ž')],
            '9-1' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-2' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-3' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-4' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-5' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-6' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-7' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-8' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°')],
            '9-9' => [_f('åŒ—æ–—ä¹çš‡é™ä¸–ä¹‹è¾°'), _f('æ–—å§¥å…ƒå›åœ£è¯ž'), _f('é‡é˜³å¸å›åœ£è¯ž'), _f('çŽ„å¤©ä¸Šå¸é£žå‡'), _f('é…†éƒ½å¤§å¸åœ£è¯ž')],
            '9-22' => [_f('å¢žç¦è´¢ç¥žè¯ž')],
            '9-23' => [_f('è¨ç¿çœŸå›åœ£è¯ž')],
            '9-28' => [_f('äº”æ˜¾çµå®˜é©¬å…ƒå¸…åœ£è¯ž')],
            '10-1' => [_f('æ°‘å²è…Šä¹‹è¾°', 'æ°‘å²è…Šï¼Œæ­¤æ—¥äº”å¸ä¼šäºŽåŒ—æ–¹äº”ç‚é»‘å¤©'), _f('ä¸œçš‡å¤§å¸åœ£è¯ž')],
            '10-3' => [_f('ä¸‰èŒ…åº”åŒ–çœŸå›åœ£è¯ž')],
            '10-6' => [_f('å¤©æ›¹è¯¸å¸äº”å²³äº”å¸åœ£è¯ž')],
            '10-15' => [_f('ä¸‹å…ƒæ°´å®˜å¤§å¸åœ£è¯ž'), _f('å»ºç”Ÿå¤§ä¼š', 'æ­¤æ—¥ä¸‹å…ƒè§£åŽ„ï¼Œæ°´å®˜åŒå¤©åœ°äºŒå®˜è€ƒæ ¡ç½ªç¦')],
            '10-18' => [_f('åœ°æ¯å¨˜å¨˜åœ£è¯ž')],
            '10-19' => [_f('é•¿æ˜¥é‚±çœŸå›é£žå‡')],
            '10-20' => [_f('è™šé–å¤©å¸ˆ(å³ä¸‰åä»£å¤©å¸ˆå¼˜æ‚Ÿå¼ çœŸäºº)è¯ž')],
            '11-6' => [_f('è¥¿å²³å¤§å¸åœ£è¯ž')],
            '11-9' => [_f('æ¹˜å­éŸ©ç¥–åœ£è¯ž')],
            '11-11' => [_f('å¤ªä¹™æ•‘è‹¦å¤©å°Šåœ£è¯ž')],
            '11-26' => [_f('åŒ—æ–¹äº”é“åœ£è¯ž')],
            '12-8' => [_f('çŽ‹ä¾¯è…Šä¹‹è¾°', 'çŽ‹ä¾¯è…Šï¼Œæ­¤æ—¥äº”å¸ä¼šäºŽä¸Šæ–¹çŽ„éƒ½çŽ‰äº¬')],
            '12-16' => [_f('å—å²³å¤§å¸åœ£è¯ž'), _f('ç¦å¾·æ­£ç¥žè¯ž')],
            '12-20' => [_f('é²ç­å…ˆå¸ˆåœ£è¯ž')],
            '12-21' => [_f('å¤©çŒ·ä¸Šå¸åœ£è¯ž')],
            '12-22' => [_f('é‡é˜³ç¥–å¸ˆåœ£è¯ž')],
            '12-23' => [_f('ç¥­ç¶çŽ‹', 'æœ€é€‚å®œè°¢æ—§å¹´å¤ªå²ï¼Œå¼€å¯æ‹œæ–°å¹´å¤ªå²')],
            '12-25' => [_f('çŽ‰å¸å·¡å¤©'), _f('å¤©ç¥žä¸‹é™')],
            '12-29' => [_f('æ¸…é™å­™çœŸå›(å­™ä¸äºŒ)æˆé“')]
        ]
    ];
}

class TaoFestival
{
    private $p;

    private function __construct($name, $remark = '')
    {
        $this->p = [
            'name' => $name,
            'remark' => $remark
        ];
    }

    public static function create($name, $remark = '')
    {
        return new self($name, $remark);
    }

    public function getName()
    {
        return $this->p['name'];
    }

    public function getRemark()
    {
        return $this->p['remark'];
    }

    public function __toString()
    {
        return $this->p['name'];
    }

    public function toFullString()
    {
        $l = [$this->p['name']];
        if (!empty($this->p['remark'])) {
            $l[] = '[' . $this->p['remark'] . ']';
        }
        return implode('', $l);
    }
}